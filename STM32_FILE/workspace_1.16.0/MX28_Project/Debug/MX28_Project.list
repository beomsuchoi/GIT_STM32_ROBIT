
MX28_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003734  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080038f8  080038f8  000048f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003928  08003928  00005024  2**0
                  CONTENTS
  4 .ARM          00000008  08003928  08003928  00004928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003930  08003930  00005024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003930  08003930  00004930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003934  08003934  00004934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08003938  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000024  0800395c  00005024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  0800395c  0000518c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7b6  00000000  00000000  00005054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026e4  00000000  00000000  0001280a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  00014ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b3a  00000000  00000000  00015dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002469b  00000000  00000000  000168fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010eae  00000000  00000000  0003af95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbec2  00000000  00000000  0004be43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00127d05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d10  00000000  00000000  00127d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0012ba58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000024 	.word	0x20000024
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080038e0 	.word	0x080038e0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000028 	.word	0x20000028
 8000200:	080038e0 	.word	0x080038e0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004f8:	4b04      	ldr	r3, [pc, #16]	@ (800050c <__NVIC_GetPriorityGrouping+0x18>)
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	0a1b      	lsrs	r3, r3, #8
 80004fe:	f003 0307 	and.w	r3, r3, #7
}
 8000502:	4618      	mov	r0, r3
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr
 800050c:	e000ed00 	.word	0xe000ed00

08000510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800051a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800051e:	2b00      	cmp	r3, #0
 8000520:	db0b      	blt.n	800053a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	f003 021f 	and.w	r2, r3, #31
 8000528:	4907      	ldr	r1, [pc, #28]	@ (8000548 <__NVIC_EnableIRQ+0x38>)
 800052a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800052e:	095b      	lsrs	r3, r3, #5
 8000530:	2001      	movs	r0, #1
 8000532:	fa00 f202 	lsl.w	r2, r0, r2
 8000536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800053a:	bf00      	nop
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	e000e100 	.word	0xe000e100

0800054c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	6039      	str	r1, [r7, #0]
 8000556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055c:	2b00      	cmp	r3, #0
 800055e:	db0a      	blt.n	8000576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	b2da      	uxtb	r2, r3
 8000564:	490c      	ldr	r1, [pc, #48]	@ (8000598 <__NVIC_SetPriority+0x4c>)
 8000566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800056a:	0112      	lsls	r2, r2, #4
 800056c:	b2d2      	uxtb	r2, r2
 800056e:	440b      	add	r3, r1
 8000570:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000574:	e00a      	b.n	800058c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	b2da      	uxtb	r2, r3
 800057a:	4908      	ldr	r1, [pc, #32]	@ (800059c <__NVIC_SetPriority+0x50>)
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	f003 030f 	and.w	r3, r3, #15
 8000582:	3b04      	subs	r3, #4
 8000584:	0112      	lsls	r2, r2, #4
 8000586:	b2d2      	uxtb	r2, r2
 8000588:	440b      	add	r3, r1
 800058a:	761a      	strb	r2, [r3, #24]
}
 800058c:	bf00      	nop
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	e000e100 	.word	0xe000e100
 800059c:	e000ed00 	.word	0xe000ed00

080005a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b089      	sub	sp, #36	@ 0x24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	f003 0307 	and.w	r3, r3, #7
 80005b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005b4:	69fb      	ldr	r3, [r7, #28]
 80005b6:	f1c3 0307 	rsb	r3, r3, #7
 80005ba:	2b04      	cmp	r3, #4
 80005bc:	bf28      	it	cs
 80005be:	2304      	movcs	r3, #4
 80005c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c2:	69fb      	ldr	r3, [r7, #28]
 80005c4:	3304      	adds	r3, #4
 80005c6:	2b06      	cmp	r3, #6
 80005c8:	d902      	bls.n	80005d0 <NVIC_EncodePriority+0x30>
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	3b03      	subs	r3, #3
 80005ce:	e000      	b.n	80005d2 <NVIC_EncodePriority+0x32>
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d4:	f04f 32ff 	mov.w	r2, #4294967295
 80005d8:	69bb      	ldr	r3, [r7, #24]
 80005da:	fa02 f303 	lsl.w	r3, r2, r3
 80005de:	43da      	mvns	r2, r3
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	401a      	ands	r2, r3
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005e8:	f04f 31ff 	mov.w	r1, #4294967295
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	fa01 f303 	lsl.w	r3, r1, r3
 80005f2:	43d9      	mvns	r1, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f8:	4313      	orrs	r3, r2
         );
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3724      	adds	r7, #36	@ 0x24
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
	...

08000608 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	4b10      	ldr	r3, [pc, #64]	@ (8000654 <MX_DMA_Init+0x4c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	4a0f      	ldr	r2, [pc, #60]	@ (8000654 <MX_DMA_Init+0x4c>)
 8000618:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800061c:	6313      	str	r3, [r2, #48]	@ 0x30
 800061e:	4b0d      	ldr	r3, [pc, #52]	@ (8000654 <MX_DMA_Init+0x4c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800062a:	f7ff ff63 	bl	80004f4 <__NVIC_GetPriorityGrouping>
 800062e:	4603      	mov	r3, r0
 8000630:	2200      	movs	r2, #0
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ffb3 	bl	80005a0 <NVIC_EncodePriority>
 800063a:	4603      	mov	r3, r0
 800063c:	4619      	mov	r1, r3
 800063e:	200c      	movs	r0, #12
 8000640:	f7ff ff84 	bl	800054c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000644:	200c      	movs	r0, #12
 8000646:	f7ff ff63 	bl	8000510 <__NVIC_EnableIRQ>

}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40023800 	.word	0x40023800

08000658 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	@ 0x28
 800065c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
 8000672:	4b3e      	ldr	r3, [pc, #248]	@ (800076c <MX_GPIO_Init+0x114>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a3d      	ldr	r2, [pc, #244]	@ (800076c <MX_GPIO_Init+0x114>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
 800067e:	4b3b      	ldr	r3, [pc, #236]	@ (800076c <MX_GPIO_Init+0x114>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	4b37      	ldr	r3, [pc, #220]	@ (800076c <MX_GPIO_Init+0x114>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	4a36      	ldr	r2, [pc, #216]	@ (800076c <MX_GPIO_Init+0x114>)
 8000694:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000698:	6313      	str	r3, [r2, #48]	@ 0x30
 800069a:	4b34      	ldr	r3, [pc, #208]	@ (800076c <MX_GPIO_Init+0x114>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	4b30      	ldr	r3, [pc, #192]	@ (800076c <MX_GPIO_Init+0x114>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	4a2f      	ldr	r2, [pc, #188]	@ (800076c <MX_GPIO_Init+0x114>)
 80006b0:	f043 0302 	orr.w	r3, r3, #2
 80006b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b6:	4b2d      	ldr	r3, [pc, #180]	@ (800076c <MX_GPIO_Init+0x114>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	f003 0302 	and.w	r3, r3, #2
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	4b29      	ldr	r3, [pc, #164]	@ (800076c <MX_GPIO_Init+0x114>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	4a28      	ldr	r2, [pc, #160]	@ (800076c <MX_GPIO_Init+0x114>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d2:	4b26      	ldr	r3, [pc, #152]	@ (800076c <MX_GPIO_Init+0x114>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	4b22      	ldr	r3, [pc, #136]	@ (800076c <MX_GPIO_Init+0x114>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	4a21      	ldr	r2, [pc, #132]	@ (800076c <MX_GPIO_Init+0x114>)
 80006e8:	f043 0308 	orr.w	r3, r3, #8
 80006ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ee:	4b1f      	ldr	r3, [pc, #124]	@ (800076c <MX_GPIO_Init+0x114>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_12, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000700:	481b      	ldr	r0, [pc, #108]	@ (8000770 <MX_GPIO_Init+0x118>)
 8000702:	f001 f9cf 	bl	8001aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2104      	movs	r1, #4
 800070a:	481a      	ldr	r0, [pc, #104]	@ (8000774 <MX_GPIO_Init+0x11c>)
 800070c:	f001 f9ca 	bl	8001aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_12;
 8000710:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000716:	2301      	movs	r3, #1
 8000718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071e:	2300      	movs	r3, #0
 8000720:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	4619      	mov	r1, r3
 8000728:	4811      	ldr	r0, [pc, #68]	@ (8000770 <MX_GPIO_Init+0x118>)
 800072a:	f001 f827 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800072e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000734:	2300      	movs	r3, #0
 8000736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4619      	mov	r1, r3
 8000742:	480d      	ldr	r0, [pc, #52]	@ (8000778 <MX_GPIO_Init+0x120>)
 8000744:	f001 f81a 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000748:	2304      	movs	r3, #4
 800074a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	2301      	movs	r3, #1
 800074e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4619      	mov	r1, r3
 800075e:	4805      	ldr	r0, [pc, #20]	@ (8000774 <MX_GPIO_Init+0x11c>)
 8000760:	f001 f80c 	bl	800177c <HAL_GPIO_Init>

}
 8000764:	bf00      	nop
 8000766:	3728      	adds	r7, #40	@ 0x28
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40023800 	.word	0x40023800
 8000770:	40020800 	.word	0x40020800
 8000774:	40020c00 	.word	0x40020c00
 8000778:	40020400 	.word	0x40020400

0800077c <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 800077c:	b480      	push	{r7}
 800077e:	b089      	sub	sp, #36	@ 0x24
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	330c      	adds	r3, #12
 8000788:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	e853 3f00 	ldrex	r3, [r3]
 8000790:	60bb      	str	r3, [r7, #8]
   return(result);
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	f043 0310 	orr.w	r3, r3, #16
 8000798:	61fb      	str	r3, [r7, #28]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	330c      	adds	r3, #12
 800079e:	69fa      	ldr	r2, [r7, #28]
 80007a0:	61ba      	str	r2, [r7, #24]
 80007a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80007a4:	6979      	ldr	r1, [r7, #20]
 80007a6:	69ba      	ldr	r2, [r7, #24]
 80007a8:	e841 2300 	strex	r3, r2, [r1]
 80007ac:	613b      	str	r3, [r7, #16]
   return(result);
 80007ae:	693b      	ldr	r3, [r7, #16]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d1e7      	bne.n	8000784 <LL_USART_EnableIT_IDLE+0x8>
}
 80007b4:	bf00      	nop
 80007b6:	bf00      	nop
 80007b8:	3724      	adds	r7, #36	@ 0x24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 80007c2:	b480      	push	{r7}
 80007c4:	b089      	sub	sp, #36	@ 0x24
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	3314      	adds	r3, #20
 80007ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	e853 3f00 	ldrex	r3, [r3]
 80007d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007de:	61fb      	str	r3, [r7, #28]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3314      	adds	r3, #20
 80007e4:	69fa      	ldr	r2, [r7, #28]
 80007e6:	61ba      	str	r2, [r7, #24]
 80007e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80007ea:	6979      	ldr	r1, [r7, #20]
 80007ec:	69ba      	ldr	r2, [r7, #24]
 80007ee:	e841 2300 	strex	r3, r2, [r1]
 80007f2:	613b      	str	r3, [r7, #16]
   return(result);
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d1e7      	bne.n	80007ca <LL_USART_EnableDMAReq_RX+0x8>
}
 80007fa:	bf00      	nop
 80007fc:	bf00      	nop
 80007fe:	3724      	adds	r7, #36	@ 0x24
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000812:	4a0c      	ldr	r2, [pc, #48]	@ (8000844 <LL_DMA_EnableStream+0x3c>)
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	4413      	add	r3, r2
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	461a      	mov	r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4413      	add	r3, r2
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4908      	ldr	r1, [pc, #32]	@ (8000844 <LL_DMA_EnableStream+0x3c>)
 8000824:	683a      	ldr	r2, [r7, #0]
 8000826:	440a      	add	r2, r1
 8000828:	7812      	ldrb	r2, [r2, #0]
 800082a:	4611      	mov	r1, r2
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	440a      	add	r2, r1
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6013      	str	r3, [r2, #0]
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	080038f8 	.word	0x080038f8

08000848 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8000854:	4a0d      	ldr	r2, [pc, #52]	@ (800088c <LL_DMA_SetDataLength+0x44>)
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	4413      	add	r3, r2
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	461a      	mov	r2, r3
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	4413      	add	r3, r2
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	0c1b      	lsrs	r3, r3, #16
 8000866:	041b      	lsls	r3, r3, #16
 8000868:	4908      	ldr	r1, [pc, #32]	@ (800088c <LL_DMA_SetDataLength+0x44>)
 800086a:	68ba      	ldr	r2, [r7, #8]
 800086c:	440a      	add	r2, r1
 800086e:	7812      	ldrb	r2, [r2, #0]
 8000870:	4611      	mov	r1, r2
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	440a      	add	r2, r1
 8000876:	4611      	mov	r1, r2
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	4313      	orrs	r3, r2
 800087c:	604b      	str	r3, [r1, #4]
}
 800087e:	bf00      	nop
 8000880:	3714      	adds	r7, #20
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	080038f8 	.word	0x080038f8

08000890 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 800089c:	4a07      	ldr	r2, [pc, #28]	@ (80008bc <LL_DMA_SetMemoryAddress+0x2c>)
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	4413      	add	r3, r2
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	461a      	mov	r2, r3
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	4413      	add	r3, r2
 80008aa:	461a      	mov	r2, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	60d3      	str	r3, [r2, #12]
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	080038f8 	.word	0x080038f8

080008c0 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 80008cc:	4a07      	ldr	r2, [pc, #28]	@ (80008ec <LL_DMA_SetPeriphAddress+0x2c>)
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	4413      	add	r3, r2
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	461a      	mov	r2, r3
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	4413      	add	r3, r2
 80008da:	461a      	mov	r2, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6093      	str	r3, [r2, #8]
}
 80008e0:	bf00      	nop
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	080038f8 	.word	0x080038f8

080008f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_1, PCrxBuffer);
 80008f4:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <main+0x58>)
 80008f6:	461a      	mov	r2, r3
 80008f8:	2101      	movs	r1, #1
 80008fa:	4814      	ldr	r0, [pc, #80]	@ (800094c <main+0x5c>)
 80008fc:	f7ff ffc8 	bl	8000890 <LL_DMA_SetMemoryAddress>
LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_1, &USART3->DR);
 8000900:	4a13      	ldr	r2, [pc, #76]	@ (8000950 <main+0x60>)
 8000902:	2101      	movs	r1, #1
 8000904:	4811      	ldr	r0, [pc, #68]	@ (800094c <main+0x5c>)
 8000906:	f7ff ffdb 	bl	80008c0 <LL_DMA_SetPeriphAddress>
LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_1, RX_BUFFER_SIZE);
 800090a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800090e:	2101      	movs	r1, #1
 8000910:	480e      	ldr	r0, [pc, #56]	@ (800094c <main+0x5c>)
 8000912:	f7ff ff99 	bl	8000848 <LL_DMA_SetDataLength>
LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_1);
 8000916:	2101      	movs	r1, #1
 8000918:	480c      	ldr	r0, [pc, #48]	@ (800094c <main+0x5c>)
 800091a:	f7ff ff75 	bl	8000808 <LL_DMA_EnableStream>
LL_USART_EnableDMAReq_RX(USART3);
 800091e:	480d      	ldr	r0, [pc, #52]	@ (8000954 <main+0x64>)
 8000920:	f7ff ff4f 	bl	80007c2 <LL_USART_EnableDMAReq_RX>
LL_USART_EnableIT_IDLE(USART3);
 8000924:	480b      	ldr	r0, [pc, #44]	@ (8000954 <main+0x64>)
 8000926:	f7ff ff29 	bl	800077c <LL_USART_EnableIT_IDLE>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092a:	f000 fda3 	bl	8001474 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092e:	f000 f813 	bl	8000958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000932:	f7ff fe91 	bl	8000658 <MX_GPIO_Init>
  MX_DMA_Init();
 8000936:	f7ff fe67 	bl	8000608 <MX_DMA_Init>
  MX_TIM6_Init();
 800093a:	f000 fa4b 	bl	8000dd4 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 800093e:	f000 fcc7 	bl	80012d0 <MX_USART3_UART_Init>
//setMotorGoalPosition(1, goalPosition);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000942:	bf00      	nop
 8000944:	e7fd      	b.n	8000942 <main+0x52>
 8000946:	bf00      	nop
 8000948:	20000040 	.word	0x20000040
 800094c:	40026000 	.word	0x40026000
 8000950:	40004804 	.word	0x40004804
 8000954:	40004800 	.word	0x40004800

08000958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b094      	sub	sp, #80	@ 0x50
 800095c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	2234      	movs	r2, #52	@ 0x34
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f002 ff8e 	bl	8003888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096c:	f107 0308 	add.w	r3, r7, #8
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800097c:	2300      	movs	r3, #0
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	4b2c      	ldr	r3, [pc, #176]	@ (8000a34 <SystemClock_Config+0xdc>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000984:	4a2b      	ldr	r2, [pc, #172]	@ (8000a34 <SystemClock_Config+0xdc>)
 8000986:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800098a:	6413      	str	r3, [r2, #64]	@ 0x40
 800098c:	4b29      	ldr	r3, [pc, #164]	@ (8000a34 <SystemClock_Config+0xdc>)
 800098e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000990:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000998:	2300      	movs	r3, #0
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	4b26      	ldr	r3, [pc, #152]	@ (8000a38 <SystemClock_Config+0xe0>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a25      	ldr	r2, [pc, #148]	@ (8000a38 <SystemClock_Config+0xe0>)
 80009a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009a6:	6013      	str	r3, [r2, #0]
 80009a8:	4b23      	ldr	r3, [pc, #140]	@ (8000a38 <SystemClock_Config+0xe0>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009b4:	2301      	movs	r3, #1
 80009b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009be:	2302      	movs	r3, #2
 80009c0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009c8:	2308      	movs	r3, #8
 80009ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80009cc:	23b4      	movs	r3, #180	@ 0xb4
 80009ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009d4:	2302      	movs	r3, #2
 80009d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009d8:	2302      	movs	r3, #2
 80009da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4618      	mov	r0, r3
 80009e2:	f001 fbdd 	bl	80021a0 <HAL_RCC_OscConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009ec:	f000 f826 	bl	8000a3c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009f0:	f001 f872 	bl	8001ad8 <HAL_PWREx_EnableOverDrive>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009fa:	f000 f81f 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fe:	230f      	movs	r3, #15
 8000a00:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a02:	2302      	movs	r3, #2
 8000a04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a0a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a14:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a16:	f107 0308 	add.w	r3, r7, #8
 8000a1a:	2105      	movs	r1, #5
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f001 f8ab 	bl	8001b78 <HAL_RCC_ClockConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a28:	f000 f808 	bl	8000a3c <Error_Handler>
  }
}
 8000a2c:	bf00      	nop
 8000a2e:	3750      	adds	r7, #80	@ 0x50
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40007000 	.word	0x40007000

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <Error_Handler+0x8>

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a56:	4a0f      	ldr	r2, [pc, #60]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a72:	4a08      	ldr	r2, [pc, #32]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a7a:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800

08000a98 <LL_USART_IsActiveFlag_ORE>:
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f003 0308 	and.w	r3, r3, #8
 8000aa8:	2b08      	cmp	r3, #8
 8000aaa:	bf0c      	ite	eq
 8000aac:	2301      	moveq	r3, #1
 8000aae:	2300      	movne	r3, #0
 8000ab0:	b2db      	uxtb	r3, r3
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <LL_USART_IsActiveFlag_IDLE>:
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f003 0310 	and.w	r3, r3, #16
 8000ace:	2b10      	cmp	r3, #16
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2301      	moveq	r3, #1
 8000ad4:	2300      	movne	r3, #0
 8000ad6:	b2db      	uxtb	r3, r3
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <LL_USART_IsActiveFlag_TXE>:
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000af4:	2b80      	cmp	r3, #128	@ 0x80
 8000af6:	bf0c      	ite	eq
 8000af8:	2301      	moveq	r3, #1
 8000afa:	2300      	movne	r3, #0
 8000afc:	b2db      	uxtb	r3, r3
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <LL_USART_ClearFlag_ORE>:
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b085      	sub	sp, #20
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000b18:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000b20:	68fb      	ldr	r3, [r7, #12]
}
 8000b22:	bf00      	nop
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <LL_USART_ClearFlag_IDLE>:
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b085      	sub	sp, #20
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000b44:	68fb      	ldr	r3, [r7, #12]
}
 8000b46:	bf00      	nop
 8000b48:	3714      	adds	r7, #20
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b083      	sub	sp, #12
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000b5e:	78fa      	ldrb	r2, [r7, #3]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	605a      	str	r2, [r3, #4]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <LL_DMA_EnableStream>:
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000b7a:	4a0c      	ldr	r2, [pc, #48]	@ (8000bac <LL_DMA_EnableStream+0x3c>)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	461a      	mov	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4413      	add	r3, r2
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4908      	ldr	r1, [pc, #32]	@ (8000bac <LL_DMA_EnableStream+0x3c>)
 8000b8c:	683a      	ldr	r2, [r7, #0]
 8000b8e:	440a      	add	r2, r1
 8000b90:	7812      	ldrb	r2, [r2, #0]
 8000b92:	4611      	mov	r1, r2
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	440a      	add	r2, r1
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6013      	str	r3, [r2, #0]
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	08003900 	.word	0x08003900

08000bb0 <LL_DMA_DisableStream>:
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000bba:	4a0c      	ldr	r2, [pc, #48]	@ (8000bec <LL_DMA_DisableStream+0x3c>)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4908      	ldr	r1, [pc, #32]	@ (8000bec <LL_DMA_DisableStream+0x3c>)
 8000bcc:	683a      	ldr	r2, [r7, #0]
 8000bce:	440a      	add	r2, r1
 8000bd0:	7812      	ldrb	r2, [r2, #0]
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	440a      	add	r2, r1
 8000bd8:	f023 0301 	bic.w	r3, r3, #1
 8000bdc:	6013      	str	r3, [r2, #0]
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	08003900 	.word	0x08003900

08000bf0 <LL_DMA_SetDataLength>:
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c34 <LL_DMA_SetDataLength+0x44>)
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	4413      	add	r3, r2
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	4413      	add	r3, r2
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	0c1b      	lsrs	r3, r3, #16
 8000c0e:	041b      	lsls	r3, r3, #16
 8000c10:	4908      	ldr	r1, [pc, #32]	@ (8000c34 <LL_DMA_SetDataLength+0x44>)
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	440a      	add	r2, r1
 8000c16:	7812      	ldrb	r2, [r2, #0]
 8000c18:	4611      	mov	r1, r2
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	440a      	add	r2, r1
 8000c1e:	4611      	mov	r1, r2
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	604b      	str	r3, [r1, #4]
}
 8000c26:	bf00      	nop
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	08003900 	.word	0x08003900

08000c38 <LL_DMA_GetDataLength>:
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT));
 8000c42:	4a07      	ldr	r2, [pc, #28]	@ (8000c60 <LL_DMA_GetDataLength+0x28>)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4413      	add	r3, r2
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	b29b      	uxth	r3, r3
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	08003900 	.word	0x08003900

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <NMI_Handler+0x4>

08000c6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <HardFault_Handler+0x4>

08000c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <MemManage_Handler+0x4>

08000c7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <BusFault_Handler+0x4>

08000c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <UsageFault_Handler+0x4>

08000c8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000cba:	f000 fc2d 	bl	8001518 <HAL_IncTick>
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
   if(LL_USART_IsActiveFlag_IDLE(USART3))
 8000cd6:	4818      	ldr	r0, [pc, #96]	@ (8000d38 <USART3_IRQHandler+0x68>)
 8000cd8:	f7ff fef1 	bl	8000abe <LL_USART_IsActiveFlag_IDLE>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d01c      	beq.n	8000d1c <USART3_IRQHandler+0x4c>
   {
      int len = RX_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_STREAM_1);
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	4815      	ldr	r0, [pc, #84]	@ (8000d3c <USART3_IRQHandler+0x6c>)
 8000ce6:	f7ff ffa7 	bl	8000c38 <LL_DMA_GetDataLength>
 8000cea:	4603      	mov	r3, r0
 8000cec:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8000cf0:	607b      	str	r3, [r7, #4]

      // 주기적으로 토크 활성화 패킷을 전송하도록 수정
      static uint8_t torque_packet[] = {0xFF, 0xFF, 0xFD, 0x00, 0x01, 0x06, 0x00, 0x03, 0x40, 0x00, 0x01};
      writePacket(torque_packet, sizeof(torque_packet));
 8000cf2:	210b      	movs	r1, #11
 8000cf4:	4812      	ldr	r0, [pc, #72]	@ (8000d40 <USART3_IRQHandler+0x70>)
 8000cf6:	f000 f825 	bl	8000d44 <writePacket>

      LL_USART_ClearFlag_IDLE(USART3);
 8000cfa:	480f      	ldr	r0, [pc, #60]	@ (8000d38 <USART3_IRQHandler+0x68>)
 8000cfc:	f7ff ff17 	bl	8000b2e <LL_USART_ClearFlag_IDLE>
      LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_1);
 8000d00:	2101      	movs	r1, #1
 8000d02:	480e      	ldr	r0, [pc, #56]	@ (8000d3c <USART3_IRQHandler+0x6c>)
 8000d04:	f7ff ff54 	bl	8000bb0 <LL_DMA_DisableStream>
      LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_1, RX_BUFFER_SIZE);
 8000d08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	480b      	ldr	r0, [pc, #44]	@ (8000d3c <USART3_IRQHandler+0x6c>)
 8000d10:	f7ff ff6e 	bl	8000bf0 <LL_DMA_SetDataLength>
      LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_1);
 8000d14:	2101      	movs	r1, #1
 8000d16:	4809      	ldr	r0, [pc, #36]	@ (8000d3c <USART3_IRQHandler+0x6c>)
 8000d18:	f7ff ff2a 	bl	8000b70 <LL_DMA_EnableStream>
   }

   if(LL_USART_IsActiveFlag_ORE(USART3))
 8000d1c:	4806      	ldr	r0, [pc, #24]	@ (8000d38 <USART3_IRQHandler+0x68>)
 8000d1e:	f7ff febb 	bl	8000a98 <LL_USART_IsActiveFlag_ORE>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d002      	beq.n	8000d2e <USART3_IRQHandler+0x5e>
   {
      LL_USART_ClearFlag_ORE(USART3);
 8000d28:	4803      	ldr	r0, [pc, #12]	@ (8000d38 <USART3_IRQHandler+0x68>)
 8000d2a:	f7ff feee 	bl	8000b0a <LL_USART_ClearFlag_ORE>
   }
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40004800 	.word	0x40004800
 8000d3c:	40026000 	.word	0x40026000
 8000d40:	20000000 	.word	0x20000000

08000d44 <writePacket>:

void writePacket(uint8_t packet[], int length)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
   for(int i = 0; i < length; i++)
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	e011      	b.n	8000d78 <writePacket+0x34>
   {
      while(!LL_USART_IsActiveFlag_TXE(USART3));
 8000d54:	bf00      	nop
 8000d56:	480d      	ldr	r0, [pc, #52]	@ (8000d8c <writePacket+0x48>)
 8000d58:	f7ff fec4 	bl	8000ae4 <LL_USART_IsActiveFlag_TXE>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d0f9      	beq.n	8000d56 <writePacket+0x12>
      LL_USART_TransmitData8(USART3, packet[i]);
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	4413      	add	r3, r2
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4807      	ldr	r0, [pc, #28]	@ (8000d8c <writePacket+0x48>)
 8000d6e:	f7ff fef0 	bl	8000b52 <LL_USART_TransmitData8>
   for(int i = 0; i < length; i++)
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	3301      	adds	r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fa      	ldr	r2, [r7, #12]
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	dbe9      	blt.n	8000d54 <writePacket+0x10>
   }
}
 8000d80:	bf00      	nop
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40004800 	.word	0x40004800

08000d90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim6);
 8000d94:	4804      	ldr	r0, [pc, #16]	@ (8000da8 <TIM6_DAC_IRQHandler+0x18>)
 8000d96:	f001 fcf0 	bl	800277a <HAL_TIM_IRQHandler>

    // 주기적으로 토크 활성화 패킷 전송
    static uint8_t torque_packet[] = {0xFF, 0xFF, 0xFD, 0x00, 0x01, 0x06, 0x00, 0x03, 0x40, 0x00, 0x01};
    writePacket(torque_packet, sizeof(torque_packet));
 8000d9a:	210b      	movs	r1, #11
 8000d9c:	4803      	ldr	r0, [pc, #12]	@ (8000dac <TIM6_DAC_IRQHandler+0x1c>)
 8000d9e:	f7ff ffd1 	bl	8000d44 <writePacket>
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000140 	.word	0x20000140
 8000dac:	2000000c 	.word	0x2000000c

08000db0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db4:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <SystemInit+0x20>)
 8000db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dba:	4a05      	ldr	r2, [pc, #20]	@ (8000dd0 <SystemInit+0x20>)
 8000dbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dda:	463b      	mov	r3, r7
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000de2:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <MX_TIM6_Init+0x64>)
 8000de4:	4a15      	ldr	r2, [pc, #84]	@ (8000e3c <MX_TIM6_Init+0x68>)
 8000de6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4500-1;
 8000de8:	4b13      	ldr	r3, [pc, #76]	@ (8000e38 <MX_TIM6_Init+0x64>)
 8000dea:	f241 1293 	movw	r2, #4499	@ 0x1193
 8000dee:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df0:	4b11      	ldr	r3, [pc, #68]	@ (8000e38 <MX_TIM6_Init+0x64>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000-1;
 8000df6:	4b10      	ldr	r3, [pc, #64]	@ (8000e38 <MX_TIM6_Init+0x64>)
 8000df8:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000dfc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000e38 <MX_TIM6_Init+0x64>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e04:	480c      	ldr	r0, [pc, #48]	@ (8000e38 <MX_TIM6_Init+0x64>)
 8000e06:	f001 fc69 	bl	80026dc <HAL_TIM_Base_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000e10:	f7ff fe14 	bl	8000a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e14:	2300      	movs	r3, #0
 8000e16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4805      	ldr	r0, [pc, #20]	@ (8000e38 <MX_TIM6_Init+0x64>)
 8000e22:	f001 fe79 	bl	8002b18 <HAL_TIMEx_MasterConfigSynchronization>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000e2c:	f7ff fe06 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000140 	.word	0x20000140
 8000e3c:	40001000 	.word	0x40001000

08000e40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0e      	ldr	r2, [pc, #56]	@ (8000e88 <HAL_TIM_Base_MspInit+0x48>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d115      	bne.n	8000e7e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	4b0d      	ldr	r3, [pc, #52]	@ (8000e8c <HAL_TIM_Base_MspInit+0x4c>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8000e8c <HAL_TIM_Base_MspInit+0x4c>)
 8000e5c:	f043 0310 	orr.w	r3, r3, #16
 8000e60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e62:	4b0a      	ldr	r3, [pc, #40]	@ (8000e8c <HAL_TIM_Base_MspInit+0x4c>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e66:	f003 0310 	and.w	r3, r3, #16
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	2036      	movs	r0, #54	@ 0x36
 8000e74:	f000 fc4b 	bl	800170e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e78:	2036      	movs	r0, #54	@ 0x36
 8000e7a:	f000 fc64 	bl	8001746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40001000 	.word	0x40001000
 8000e8c:	40023800 	.word	0x40023800

08000e90 <__NVIC_GetPriorityGrouping>:
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e94:	4b04      	ldr	r3, [pc, #16]	@ (8000ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	f003 0307 	and.w	r3, r3, #7
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_EnableIRQ>:
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	db0b      	blt.n	8000ed6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	f003 021f 	and.w	r2, r3, #31
 8000ec4:	4907      	ldr	r1, [pc, #28]	@ (8000ee4 <__NVIC_EnableIRQ+0x38>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	095b      	lsrs	r3, r3, #5
 8000ecc:	2001      	movs	r0, #1
 8000ece:	fa00 f202 	lsl.w	r2, r0, r2
 8000ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000e100 	.word	0xe000e100

08000ee8 <__NVIC_SetPriority>:
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	db0a      	blt.n	8000f12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	490c      	ldr	r1, [pc, #48]	@ (8000f34 <__NVIC_SetPriority+0x4c>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	0112      	lsls	r2, r2, #4
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000f10:	e00a      	b.n	8000f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4908      	ldr	r1, [pc, #32]	@ (8000f38 <__NVIC_SetPriority+0x50>)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	3b04      	subs	r3, #4
 8000f20:	0112      	lsls	r2, r2, #4
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	440b      	add	r3, r1
 8000f26:	761a      	strb	r2, [r3, #24]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000e100 	.word	0xe000e100
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <NVIC_EncodePriority>:
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	@ 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f1c3 0307 	rsb	r3, r3, #7
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	bf28      	it	cs
 8000f5a:	2304      	movcs	r3, #4
 8000f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3304      	adds	r3, #4
 8000f62:	2b06      	cmp	r3, #6
 8000f64:	d902      	bls.n	8000f6c <NVIC_EncodePriority+0x30>
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3b03      	subs	r3, #3
 8000f6a:	e000      	b.n	8000f6e <NVIC_EncodePriority+0x32>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43da      	mvns	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	401a      	ands	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f84:	f04f 31ff 	mov.w	r1, #4294967295
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	43d9      	mvns	r1, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	4313      	orrs	r3, r2
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3724      	adds	r7, #36	@ 0x24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <LL_USART_Enable>:
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	60da      	str	r2, [r3, #12]
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <LL_USART_ConfigAsyncMode>:
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	691b      	ldr	r3, [r3, #16]
 8000fce:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	615a      	str	r2, [r3, #20]
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000ff8:	4b08      	ldr	r3, [pc, #32]	@ (800101c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ffa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ffc:	4907      	ldr	r1, [pc, #28]	@ (800101c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4313      	orrs	r3, r2
 8001002:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001004:	4b05      	ldr	r3, [pc, #20]	@ (800101c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001006:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4013      	ands	r3, r2
 800100c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800100e:	68fb      	ldr	r3, [r7, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	40023800 	.word	0x40023800

08001020 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001028:	4b08      	ldr	r3, [pc, #32]	@ (800104c <LL_APB1_GRP1_EnableClock+0x2c>)
 800102a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800102c:	4907      	ldr	r1, [pc, #28]	@ (800104c <LL_APB1_GRP1_EnableClock+0x2c>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4313      	orrs	r3, r2
 8001032:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001034:	4b05      	ldr	r3, [pc, #20]	@ (800104c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001036:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4013      	ands	r3, r2
 800103c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800103e:	68fb      	ldr	r3, [r7, #12]
}
 8001040:	bf00      	nop
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	40023800 	.word	0x40023800

08001050 <LL_DMA_SetDataTransferDirection>:
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 800105c:	4a0d      	ldr	r2, [pc, #52]	@ (8001094 <LL_DMA_SetDataTransferDirection+0x44>)
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	4413      	add	r3, r2
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	4413      	add	r3, r2
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001070:	4908      	ldr	r1, [pc, #32]	@ (8001094 <LL_DMA_SetDataTransferDirection+0x44>)
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	440b      	add	r3, r1
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4619      	mov	r1, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	440b      	add	r3, r1
 800107e:	4619      	mov	r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4313      	orrs	r3, r2
 8001084:	600b      	str	r3, [r1, #0]
}
 8001086:	bf00      	nop
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	08003920 	.word	0x08003920

08001098 <LL_DMA_SetMode>:
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 80010a4:	4a0d      	ldr	r2, [pc, #52]	@ (80010dc <LL_DMA_SetMode+0x44>)
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	4413      	add	r3, r2
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	4413      	add	r3, r2
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 80010b8:	4908      	ldr	r1, [pc, #32]	@ (80010dc <LL_DMA_SetMode+0x44>)
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	440b      	add	r3, r1
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	4619      	mov	r1, r3
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	440b      	add	r3, r1
 80010c6:	4619      	mov	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	600b      	str	r3, [r1, #0]
}
 80010ce:	bf00      	nop
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	08003920 	.word	0x08003920

080010e0 <LL_DMA_SetPeriphIncMode>:
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 80010ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001124 <LL_DMA_SetPeriphIncMode+0x44>)
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	4413      	add	r3, r2
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4413      	add	r3, r2
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8001100:	4908      	ldr	r1, [pc, #32]	@ (8001124 <LL_DMA_SetPeriphIncMode+0x44>)
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	440b      	add	r3, r1
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	4619      	mov	r1, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	440b      	add	r3, r1
 800110e:	4619      	mov	r1, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4313      	orrs	r3, r2
 8001114:	600b      	str	r3, [r1, #0]
}
 8001116:	bf00      	nop
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	08003920 	.word	0x08003920

08001128 <LL_DMA_SetMemoryIncMode>:
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8001134:	4a0d      	ldr	r2, [pc, #52]	@ (800116c <LL_DMA_SetMemoryIncMode+0x44>)
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	4413      	add	r3, r2
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4413      	add	r3, r2
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8001148:	4908      	ldr	r1, [pc, #32]	@ (800116c <LL_DMA_SetMemoryIncMode+0x44>)
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	440b      	add	r3, r1
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	440b      	add	r3, r1
 8001156:	4619      	mov	r1, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4313      	orrs	r3, r2
 800115c:	600b      	str	r3, [r1, #0]
}
 800115e:	bf00      	nop
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	08003920 	.word	0x08003920

08001170 <LL_DMA_SetPeriphSize>:
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 800117c:	4a0d      	ldr	r2, [pc, #52]	@ (80011b4 <LL_DMA_SetPeriphSize+0x44>)
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	4413      	add	r3, r2
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4413      	add	r3, r2
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8001190:	4908      	ldr	r1, [pc, #32]	@ (80011b4 <LL_DMA_SetPeriphSize+0x44>)
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	440b      	add	r3, r1
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	4619      	mov	r1, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	440b      	add	r3, r1
 800119e:	4619      	mov	r1, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	600b      	str	r3, [r1, #0]
}
 80011a6:	bf00      	nop
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	08003920 	.word	0x08003920

080011b8 <LL_DMA_SetMemorySize>:
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 80011c4:	4a0d      	ldr	r2, [pc, #52]	@ (80011fc <LL_DMA_SetMemorySize+0x44>)
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	4413      	add	r3, r2
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4413      	add	r3, r2
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 80011d8:	4908      	ldr	r1, [pc, #32]	@ (80011fc <LL_DMA_SetMemorySize+0x44>)
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	440b      	add	r3, r1
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4619      	mov	r1, r3
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	440b      	add	r3, r1
 80011e6:	4619      	mov	r1, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	600b      	str	r3, [r1, #0]
}
 80011ee:	bf00      	nop
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	08003920 	.word	0x08003920

08001200 <LL_DMA_SetStreamPriorityLevel>:
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 800120c:	4a0d      	ldr	r2, [pc, #52]	@ (8001244 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	4413      	add	r3, r2
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4413      	add	r3, r2
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001220:	4908      	ldr	r1, [pc, #32]	@ (8001244 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	440b      	add	r3, r1
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	440b      	add	r3, r1
 800122e:	4619      	mov	r1, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4313      	orrs	r3, r2
 8001234:	600b      	str	r3, [r1, #0]
}
 8001236:	bf00      	nop
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	08003920 	.word	0x08003920

08001248 <LL_DMA_SetChannelSelection>:
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8001254:	4a0d      	ldr	r2, [pc, #52]	@ (800128c <LL_DMA_SetChannelSelection+0x44>)
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	4413      	add	r3, r2
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4413      	add	r3, r2
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8001268:	4908      	ldr	r1, [pc, #32]	@ (800128c <LL_DMA_SetChannelSelection+0x44>)
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	440b      	add	r3, r1
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	440b      	add	r3, r1
 8001276:	4619      	mov	r1, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4313      	orrs	r3, r2
 800127c:	600b      	str	r3, [r1, #0]
}
 800127e:	bf00      	nop
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	08003920 	.word	0x08003920

08001290 <LL_DMA_DisableFifoMode>:
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800129a:	4a0c      	ldr	r2, [pc, #48]	@ (80012cc <LL_DMA_DisableFifoMode+0x3c>)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4413      	add	r3, r2
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	4908      	ldr	r1, [pc, #32]	@ (80012cc <LL_DMA_DisableFifoMode+0x3c>)
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	440a      	add	r2, r1
 80012b0:	7812      	ldrb	r2, [r2, #0]
 80012b2:	4611      	mov	r1, r2
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	440a      	add	r2, r1
 80012b8:	f023 0304 	bic.w	r3, r3, #4
 80012bc:	6153      	str	r3, [r2, #20]
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	08003920 	.word	0x08003920

080012d0 <MX_USART3_UART_Init>:
/* USER CODE END 0 */

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08e      	sub	sp, #56	@ 0x38
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80012d6:	f107 031c 	add.w	r3, r7, #28
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	611a      	str	r2, [r3, #16]
 80012e6:	615a      	str	r2, [r3, #20]
 80012e8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
 80012f8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80012fa:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80012fe:	f7ff fe8f 	bl	8001020 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001302:	2004      	movs	r0, #4
 8001304:	f7ff fe74 	bl	8000ff0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001308:	2002      	movs	r0, #2
 800130a:	f7ff fe71 	bl	8000ff0 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PC5   ------> USART3_RX
  PB10   ------> USART3_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 800130e:	2320      	movs	r3, #32
 8001310:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001312:	2302      	movs	r3, #2
 8001314:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001316:	2303      	movs	r3, #3
 8001318:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001322:	2307      	movs	r3, #7
 8001324:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	4619      	mov	r1, r3
 800132a:	4839      	ldr	r0, [pc, #228]	@ (8001410 <MX_USART3_UART_Init+0x140>)
 800132c:	f001 fdcf 	bl	8002ece <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001330:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001334:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001336:	2302      	movs	r3, #2
 8001338:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800133a:	2303      	movs	r3, #3
 800133c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001346:	2307      	movs	r3, #7
 8001348:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	4619      	mov	r1, r3
 800134e:	4831      	ldr	r0, [pc, #196]	@ (8001414 <MX_USART3_UART_Init+0x144>)
 8001350:	f001 fdbd 	bl	8002ece <LL_GPIO_Init>

  /* USART3 DMA Init */

  /* USART3_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_1, LL_DMA_CHANNEL_4);
 8001354:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001358:	2101      	movs	r1, #1
 800135a:	482f      	ldr	r0, [pc, #188]	@ (8001418 <MX_USART3_UART_Init+0x148>)
 800135c:	f7ff ff74 	bl	8001248 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001360:	2200      	movs	r2, #0
 8001362:	2101      	movs	r1, #1
 8001364:	482c      	ldr	r0, [pc, #176]	@ (8001418 <MX_USART3_UART_Init+0x148>)
 8001366:	f7ff fe73 	bl	8001050 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_1, LL_DMA_PRIORITY_LOW);
 800136a:	2200      	movs	r2, #0
 800136c:	2101      	movs	r1, #1
 800136e:	482a      	ldr	r0, [pc, #168]	@ (8001418 <MX_USART3_UART_Init+0x148>)
 8001370:	f7ff ff46 	bl	8001200 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MODE_CIRCULAR);
 8001374:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001378:	2101      	movs	r1, #1
 800137a:	4827      	ldr	r0, [pc, #156]	@ (8001418 <MX_USART3_UART_Init+0x148>)
 800137c:	f7ff fe8c 	bl	8001098 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_PERIPH_NOINCREMENT);
 8001380:	2200      	movs	r2, #0
 8001382:	2101      	movs	r1, #1
 8001384:	4824      	ldr	r0, [pc, #144]	@ (8001418 <MX_USART3_UART_Init+0x148>)
 8001386:	f7ff feab 	bl	80010e0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MEMORY_INCREMENT);
 800138a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800138e:	2101      	movs	r1, #1
 8001390:	4821      	ldr	r0, [pc, #132]	@ (8001418 <MX_USART3_UART_Init+0x148>)
 8001392:	f7ff fec9 	bl	8001128 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_1, LL_DMA_PDATAALIGN_BYTE);
 8001396:	2200      	movs	r2, #0
 8001398:	2101      	movs	r1, #1
 800139a:	481f      	ldr	r0, [pc, #124]	@ (8001418 <MX_USART3_UART_Init+0x148>)
 800139c:	f7ff fee8 	bl	8001170 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_1, LL_DMA_MDATAALIGN_BYTE);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2101      	movs	r1, #1
 80013a4:	481c      	ldr	r0, [pc, #112]	@ (8001418 <MX_USART3_UART_Init+0x148>)
 80013a6:	f7ff ff07 	bl	80011b8 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_1);
 80013aa:	2101      	movs	r1, #1
 80013ac:	481a      	ldr	r0, [pc, #104]	@ (8001418 <MX_USART3_UART_Init+0x148>)
 80013ae:	f7ff ff6f 	bl	8001290 <LL_DMA_DisableFifoMode>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80013b2:	f7ff fd6d 	bl	8000e90 <__NVIC_GetPriorityGrouping>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2200      	movs	r2, #0
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fdbd 	bl	8000f3c <NVIC_EncodePriority>
 80013c2:	4603      	mov	r3, r0
 80013c4:	4619      	mov	r1, r3
 80013c6:	2027      	movs	r0, #39	@ 0x27
 80013c8:	f7ff fd8e 	bl	8000ee8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 80013cc:	2027      	movs	r0, #39	@ 0x27
 80013ce:	f7ff fd6d 	bl	8000eac <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80013d2:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80013d6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80013d8:	2300      	movs	r3, #0
 80013da:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80013e4:	230c      	movs	r3, #12
 80013e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80013ec:	2300      	movs	r3, #0
 80013ee:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 80013f0:	f107 031c 	add.w	r3, r7, #28
 80013f4:	4619      	mov	r1, r3
 80013f6:	4809      	ldr	r0, [pc, #36]	@ (800141c <MX_USART3_UART_Init+0x14c>)
 80013f8:	f002 f9c6 	bl	8003788 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 80013fc:	4807      	ldr	r0, [pc, #28]	@ (800141c <MX_USART3_UART_Init+0x14c>)
 80013fe:	f7ff fde0 	bl	8000fc2 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8001402:	4806      	ldr	r0, [pc, #24]	@ (800141c <MX_USART3_UART_Init+0x14c>)
 8001404:	f7ff fdcd 	bl	8000fa2 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001408:	bf00      	nop
 800140a:	3738      	adds	r7, #56	@ 0x38
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40020800 	.word	0x40020800
 8001414:	40020400 	.word	0x40020400
 8001418:	40026000 	.word	0x40026000
 800141c:	40004800 	.word	0x40004800

08001420 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001420:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001458 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001424:	f7ff fcc4 	bl	8000db0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001428:	480c      	ldr	r0, [pc, #48]	@ (800145c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800142a:	490d      	ldr	r1, [pc, #52]	@ (8001460 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800142c:	4a0d      	ldr	r2, [pc, #52]	@ (8001464 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001430:	e002      	b.n	8001438 <LoopCopyDataInit>

08001432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001436:	3304      	adds	r3, #4

08001438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800143c:	d3f9      	bcc.n	8001432 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800143e:	4a0a      	ldr	r2, [pc, #40]	@ (8001468 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001440:	4c0a      	ldr	r4, [pc, #40]	@ (800146c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001444:	e001      	b.n	800144a <LoopFillZerobss>

08001446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001448:	3204      	adds	r2, #4

0800144a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800144c:	d3fb      	bcc.n	8001446 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800144e:	f002 fa23 	bl	8003898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001452:	f7ff fa4d 	bl	80008f0 <main>
  bx  lr    
 8001456:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001458:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800145c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001460:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001464:	08003938 	.word	0x08003938
  ldr r2, =_sbss
 8001468:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 800146c:	2000018c 	.word	0x2000018c

08001470 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001470:	e7fe      	b.n	8001470 <ADC_IRQHandler>
	...

08001474 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001478:	4b0e      	ldr	r3, [pc, #56]	@ (80014b4 <HAL_Init+0x40>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a0d      	ldr	r2, [pc, #52]	@ (80014b4 <HAL_Init+0x40>)
 800147e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001482:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001484:	4b0b      	ldr	r3, [pc, #44]	@ (80014b4 <HAL_Init+0x40>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0a      	ldr	r2, [pc, #40]	@ (80014b4 <HAL_Init+0x40>)
 800148a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800148e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001490:	4b08      	ldr	r3, [pc, #32]	@ (80014b4 <HAL_Init+0x40>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a07      	ldr	r2, [pc, #28]	@ (80014b4 <HAL_Init+0x40>)
 8001496:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800149a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149c:	2003      	movs	r0, #3
 800149e:	f000 f92b 	bl	80016f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014a2:	200f      	movs	r0, #15
 80014a4:	f000 f808 	bl	80014b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014a8:	f7ff face 	bl	8000a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023c00 	.word	0x40023c00

080014b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c0:	4b12      	ldr	r3, [pc, #72]	@ (800150c <HAL_InitTick+0x54>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <HAL_InitTick+0x58>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80014d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f943 	bl	8001762 <HAL_SYSTICK_Config>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00e      	b.n	8001504 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b0f      	cmp	r3, #15
 80014ea:	d80a      	bhi.n	8001502 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ec:	2200      	movs	r2, #0
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	f000 f90b 	bl	800170e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f8:	4a06      	ldr	r2, [pc, #24]	@ (8001514 <HAL_InitTick+0x5c>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	e000      	b.n	8001504 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000018 	.word	0x20000018
 8001510:	20000020 	.word	0x20000020
 8001514:	2000001c 	.word	0x2000001c

08001518 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800151c:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <HAL_IncTick+0x20>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	4b06      	ldr	r3, [pc, #24]	@ (800153c <HAL_IncTick+0x24>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4413      	add	r3, r2
 8001528:	4a04      	ldr	r2, [pc, #16]	@ (800153c <HAL_IncTick+0x24>)
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000020 	.word	0x20000020
 800153c:	20000188 	.word	0x20000188

08001540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return uwTick;
 8001544:	4b03      	ldr	r3, [pc, #12]	@ (8001554 <HAL_GetTick+0x14>)
 8001546:	681b      	ldr	r3, [r3, #0]
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	20000188 	.word	0x20000188

08001558 <__NVIC_SetPriorityGrouping>:
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001568:	4b0c      	ldr	r3, [pc, #48]	@ (800159c <__NVIC_SetPriorityGrouping+0x44>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001574:	4013      	ands	r3, r2
 8001576:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001580:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001584:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158a:	4a04      	ldr	r2, [pc, #16]	@ (800159c <__NVIC_SetPriorityGrouping+0x44>)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	60d3      	str	r3, [r2, #12]
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_GetPriorityGrouping>:
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a4:	4b04      	ldr	r3, [pc, #16]	@ (80015b8 <__NVIC_GetPriorityGrouping+0x18>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	f003 0307 	and.w	r3, r3, #7
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <__NVIC_EnableIRQ>:
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	db0b      	blt.n	80015e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	f003 021f 	and.w	r2, r3, #31
 80015d4:	4907      	ldr	r1, [pc, #28]	@ (80015f4 <__NVIC_EnableIRQ+0x38>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	095b      	lsrs	r3, r3, #5
 80015dc:	2001      	movs	r0, #1
 80015de:	fa00 f202 	lsl.w	r2, r0, r2
 80015e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000e100 	.word	0xe000e100

080015f8 <__NVIC_SetPriority>:
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	2b00      	cmp	r3, #0
 800160a:	db0a      	blt.n	8001622 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	b2da      	uxtb	r2, r3
 8001610:	490c      	ldr	r1, [pc, #48]	@ (8001644 <__NVIC_SetPriority+0x4c>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	0112      	lsls	r2, r2, #4
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	440b      	add	r3, r1
 800161c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001620:	e00a      	b.n	8001638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4908      	ldr	r1, [pc, #32]	@ (8001648 <__NVIC_SetPriority+0x50>)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	3b04      	subs	r3, #4
 8001630:	0112      	lsls	r2, r2, #4
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	440b      	add	r3, r1
 8001636:	761a      	strb	r2, [r3, #24]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000e100 	.word	0xe000e100
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <NVIC_EncodePriority>:
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	@ 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f1c3 0307 	rsb	r3, r3, #7
 8001666:	2b04      	cmp	r3, #4
 8001668:	bf28      	it	cs
 800166a:	2304      	movcs	r3, #4
 800166c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3304      	adds	r3, #4
 8001672:	2b06      	cmp	r3, #6
 8001674:	d902      	bls.n	800167c <NVIC_EncodePriority+0x30>
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3b03      	subs	r3, #3
 800167a:	e000      	b.n	800167e <NVIC_EncodePriority+0x32>
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	f04f 32ff 	mov.w	r2, #4294967295
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43da      	mvns	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	401a      	ands	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001694:	f04f 31ff 	mov.w	r1, #4294967295
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	43d9      	mvns	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	4313      	orrs	r3, r2
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3724      	adds	r7, #36	@ 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016c4:	d301      	bcc.n	80016ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00f      	b.n	80016ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ca:	4a0a      	ldr	r2, [pc, #40]	@ (80016f4 <SysTick_Config+0x40>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d2:	210f      	movs	r1, #15
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	f7ff ff8e 	bl	80015f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016dc:	4b05      	ldr	r3, [pc, #20]	@ (80016f4 <SysTick_Config+0x40>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e2:	4b04      	ldr	r3, [pc, #16]	@ (80016f4 <SysTick_Config+0x40>)
 80016e4:	2207      	movs	r2, #7
 80016e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	e000e010 	.word	0xe000e010

080016f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ff29 	bl	8001558 <__NVIC_SetPriorityGrouping>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001720:	f7ff ff3e 	bl	80015a0 <__NVIC_GetPriorityGrouping>
 8001724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	6978      	ldr	r0, [r7, #20]
 800172c:	f7ff ff8e 	bl	800164c <NVIC_EncodePriority>
 8001730:	4602      	mov	r2, r0
 8001732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff5d 	bl	80015f8 <__NVIC_SetPriority>
}
 800173e:	bf00      	nop
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff31 	bl	80015bc <__NVIC_EnableIRQ>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ffa2 	bl	80016b4 <SysTick_Config>
 8001770:	4603      	mov	r3, r0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800177c:	b480      	push	{r7}
 800177e:	b089      	sub	sp, #36	@ 0x24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800178e:	2300      	movs	r3, #0
 8001790:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	e165      	b.n	8001a64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001798:	2201      	movs	r2, #1
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	4013      	ands	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	f040 8154 	bne.w	8001a5e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d005      	beq.n	80017ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d130      	bne.n	8001830 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	2203      	movs	r2, #3
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	68da      	ldr	r2, [r3, #12]
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001804:	2201      	movs	r2, #1
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	091b      	lsrs	r3, r3, #4
 800181a:	f003 0201 	and.w	r2, r3, #1
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	2b03      	cmp	r3, #3
 800183a:	d017      	beq.n	800186c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	2203      	movs	r2, #3
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d123      	bne.n	80018c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	08da      	lsrs	r2, r3, #3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3208      	adds	r2, #8
 8001880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001884:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	220f      	movs	r2, #15
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	691a      	ldr	r2, [r3, #16]
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	08da      	lsrs	r2, r3, #3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3208      	adds	r2, #8
 80018ba:	69b9      	ldr	r1, [r7, #24]
 80018bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	2203      	movs	r2, #3
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0203 	and.w	r2, r3, #3
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 80ae 	beq.w	8001a5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	4b5d      	ldr	r3, [pc, #372]	@ (8001a7c <HAL_GPIO_Init+0x300>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190a:	4a5c      	ldr	r2, [pc, #368]	@ (8001a7c <HAL_GPIO_Init+0x300>)
 800190c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001910:	6453      	str	r3, [r2, #68]	@ 0x44
 8001912:	4b5a      	ldr	r3, [pc, #360]	@ (8001a7c <HAL_GPIO_Init+0x300>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001916:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800191e:	4a58      	ldr	r2, [pc, #352]	@ (8001a80 <HAL_GPIO_Init+0x304>)
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	089b      	lsrs	r3, r3, #2
 8001924:	3302      	adds	r3, #2
 8001926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	220f      	movs	r2, #15
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4013      	ands	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a4f      	ldr	r2, [pc, #316]	@ (8001a84 <HAL_GPIO_Init+0x308>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d025      	beq.n	8001996 <HAL_GPIO_Init+0x21a>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4e      	ldr	r2, [pc, #312]	@ (8001a88 <HAL_GPIO_Init+0x30c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d01f      	beq.n	8001992 <HAL_GPIO_Init+0x216>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4d      	ldr	r2, [pc, #308]	@ (8001a8c <HAL_GPIO_Init+0x310>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d019      	beq.n	800198e <HAL_GPIO_Init+0x212>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a4c      	ldr	r2, [pc, #304]	@ (8001a90 <HAL_GPIO_Init+0x314>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d013      	beq.n	800198a <HAL_GPIO_Init+0x20e>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a4b      	ldr	r2, [pc, #300]	@ (8001a94 <HAL_GPIO_Init+0x318>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d00d      	beq.n	8001986 <HAL_GPIO_Init+0x20a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a4a      	ldr	r2, [pc, #296]	@ (8001a98 <HAL_GPIO_Init+0x31c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d007      	beq.n	8001982 <HAL_GPIO_Init+0x206>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a49      	ldr	r2, [pc, #292]	@ (8001a9c <HAL_GPIO_Init+0x320>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d101      	bne.n	800197e <HAL_GPIO_Init+0x202>
 800197a:	2306      	movs	r3, #6
 800197c:	e00c      	b.n	8001998 <HAL_GPIO_Init+0x21c>
 800197e:	2307      	movs	r3, #7
 8001980:	e00a      	b.n	8001998 <HAL_GPIO_Init+0x21c>
 8001982:	2305      	movs	r3, #5
 8001984:	e008      	b.n	8001998 <HAL_GPIO_Init+0x21c>
 8001986:	2304      	movs	r3, #4
 8001988:	e006      	b.n	8001998 <HAL_GPIO_Init+0x21c>
 800198a:	2303      	movs	r3, #3
 800198c:	e004      	b.n	8001998 <HAL_GPIO_Init+0x21c>
 800198e:	2302      	movs	r3, #2
 8001990:	e002      	b.n	8001998 <HAL_GPIO_Init+0x21c>
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <HAL_GPIO_Init+0x21c>
 8001996:	2300      	movs	r3, #0
 8001998:	69fa      	ldr	r2, [r7, #28]
 800199a:	f002 0203 	and.w	r2, r2, #3
 800199e:	0092      	lsls	r2, r2, #2
 80019a0:	4093      	lsls	r3, r2
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019a8:	4935      	ldr	r1, [pc, #212]	@ (8001a80 <HAL_GPIO_Init+0x304>)
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	089b      	lsrs	r3, r3, #2
 80019ae:	3302      	adds	r3, #2
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019b6:	4b3a      	ldr	r3, [pc, #232]	@ (8001aa0 <HAL_GPIO_Init+0x324>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	43db      	mvns	r3, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4013      	ands	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019da:	4a31      	ldr	r2, [pc, #196]	@ (8001aa0 <HAL_GPIO_Init+0x324>)
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019e0:	4b2f      	ldr	r3, [pc, #188]	@ (8001aa0 <HAL_GPIO_Init+0x324>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a04:	4a26      	ldr	r2, [pc, #152]	@ (8001aa0 <HAL_GPIO_Init+0x324>)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a0a:	4b25      	ldr	r3, [pc, #148]	@ (8001aa0 <HAL_GPIO_Init+0x324>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	43db      	mvns	r3, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4013      	ands	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a2e:	4a1c      	ldr	r2, [pc, #112]	@ (8001aa0 <HAL_GPIO_Init+0x324>)
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a34:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa0 <HAL_GPIO_Init+0x324>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a58:	4a11      	ldr	r2, [pc, #68]	@ (8001aa0 <HAL_GPIO_Init+0x324>)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3301      	adds	r3, #1
 8001a62:	61fb      	str	r3, [r7, #28]
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	2b0f      	cmp	r3, #15
 8001a68:	f67f ae96 	bls.w	8001798 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	3724      	adds	r7, #36	@ 0x24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40013800 	.word	0x40013800
 8001a84:	40020000 	.word	0x40020000
 8001a88:	40020400 	.word	0x40020400
 8001a8c:	40020800 	.word	0x40020800
 8001a90:	40020c00 	.word	0x40020c00
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40021400 	.word	0x40021400
 8001a9c:	40021800 	.word	0x40021800
 8001aa0:	40013c00 	.word	0x40013c00

08001aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	807b      	strh	r3, [r7, #2]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ab4:	787b      	ldrb	r3, [r7, #1]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aba:	887a      	ldrh	r2, [r7, #2]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ac0:	e003      	b.n	8001aca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ac2:	887b      	ldrh	r3, [r7, #2]
 8001ac4:	041a      	lsls	r2, r3, #16
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	619a      	str	r2, [r3, #24]
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	603b      	str	r3, [r7, #0]
 8001ae6:	4b20      	ldr	r3, [pc, #128]	@ (8001b68 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aea:	4a1f      	ldr	r2, [pc, #124]	@ (8001b68 <HAL_PWREx_EnableOverDrive+0x90>)
 8001aec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001af0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001af2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b68 <HAL_PWREx_EnableOverDrive+0x90>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001afa:	603b      	str	r3, [r7, #0]
 8001afc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001afe:	4b1b      	ldr	r3, [pc, #108]	@ (8001b6c <HAL_PWREx_EnableOverDrive+0x94>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b04:	f7ff fd1c 	bl	8001540 <HAL_GetTick>
 8001b08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b0a:	e009      	b.n	8001b20 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b0c:	f7ff fd18 	bl	8001540 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b1a:	d901      	bls.n	8001b20 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e01f      	b.n	8001b60 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b20:	4b13      	ldr	r3, [pc, #76]	@ (8001b70 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b2c:	d1ee      	bne.n	8001b0c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b2e:	4b11      	ldr	r3, [pc, #68]	@ (8001b74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b34:	f7ff fd04 	bl	8001540 <HAL_GetTick>
 8001b38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b3a:	e009      	b.n	8001b50 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b3c:	f7ff fd00 	bl	8001540 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b4a:	d901      	bls.n	8001b50 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e007      	b.n	8001b60 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b50:	4b07      	ldr	r3, [pc, #28]	@ (8001b70 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001b5c:	d1ee      	bne.n	8001b3c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	420e0040 	.word	0x420e0040
 8001b70:	40007000 	.word	0x40007000
 8001b74:	420e0044 	.word	0x420e0044

08001b78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0cc      	b.n	8001d26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b8c:	4b68      	ldr	r3, [pc, #416]	@ (8001d30 <HAL_RCC_ClockConfig+0x1b8>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 030f 	and.w	r3, r3, #15
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d90c      	bls.n	8001bb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9a:	4b65      	ldr	r3, [pc, #404]	@ (8001d30 <HAL_RCC_ClockConfig+0x1b8>)
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba2:	4b63      	ldr	r3, [pc, #396]	@ (8001d30 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d001      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0b8      	b.n	8001d26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d020      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d005      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bcc:	4b59      	ldr	r3, [pc, #356]	@ (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	4a58      	ldr	r2, [pc, #352]	@ (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001bd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0308 	and.w	r3, r3, #8
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d005      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001be4:	4b53      	ldr	r3, [pc, #332]	@ (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	4a52      	ldr	r2, [pc, #328]	@ (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001bee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf0:	4b50      	ldr	r3, [pc, #320]	@ (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	494d      	ldr	r1, [pc, #308]	@ (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d044      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d107      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c16:	4b47      	ldr	r3, [pc, #284]	@ (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d119      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e07f      	b.n	8001d26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d003      	beq.n	8001c36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c32:	2b03      	cmp	r3, #3
 8001c34:	d107      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c36:	4b3f      	ldr	r3, [pc, #252]	@ (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d109      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e06f      	b.n	8001d26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c46:	4b3b      	ldr	r3, [pc, #236]	@ (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e067      	b.n	8001d26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c56:	4b37      	ldr	r3, [pc, #220]	@ (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f023 0203 	bic.w	r2, r3, #3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	4934      	ldr	r1, [pc, #208]	@ (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c68:	f7ff fc6a 	bl	8001540 <HAL_GetTick>
 8001c6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6e:	e00a      	b.n	8001c86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c70:	f7ff fc66 	bl	8001540 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e04f      	b.n	8001d26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c86:	4b2b      	ldr	r3, [pc, #172]	@ (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 020c 	and.w	r2, r3, #12
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d1eb      	bne.n	8001c70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c98:	4b25      	ldr	r3, [pc, #148]	@ (8001d30 <HAL_RCC_ClockConfig+0x1b8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 030f 	and.w	r3, r3, #15
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d20c      	bcs.n	8001cc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca6:	4b22      	ldr	r3, [pc, #136]	@ (8001d30 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cae:	4b20      	ldr	r3, [pc, #128]	@ (8001d30 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d001      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e032      	b.n	8001d26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d008      	beq.n	8001cde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ccc:	4b19      	ldr	r3, [pc, #100]	@ (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	4916      	ldr	r1, [pc, #88]	@ (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d009      	beq.n	8001cfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cea:	4b12      	ldr	r3, [pc, #72]	@ (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	490e      	ldr	r1, [pc, #56]	@ (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cfe:	f000 f821 	bl	8001d44 <HAL_RCC_GetSysClockFreq>
 8001d02:	4602      	mov	r2, r0
 8001d04:	4b0b      	ldr	r3, [pc, #44]	@ (8001d34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	091b      	lsrs	r3, r3, #4
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	490a      	ldr	r1, [pc, #40]	@ (8001d38 <HAL_RCC_ClockConfig+0x1c0>)
 8001d10:	5ccb      	ldrb	r3, [r1, r3]
 8001d12:	fa22 f303 	lsr.w	r3, r2, r3
 8001d16:	4a09      	ldr	r2, [pc, #36]	@ (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001d18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d1a:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <HAL_RCC_ClockConfig+0x1c8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fbca 	bl	80014b8 <HAL_InitTick>

  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40023c00 	.word	0x40023c00
 8001d34:	40023800 	.word	0x40023800
 8001d38:	08003908 	.word	0x08003908
 8001d3c:	20000018 	.word	0x20000018
 8001d40:	2000001c 	.word	0x2000001c

08001d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d48:	b0ae      	sub	sp, #184	@ 0xb8
 8001d4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d6a:	4bcb      	ldr	r3, [pc, #812]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
 8001d72:	2b0c      	cmp	r3, #12
 8001d74:	f200 8204 	bhi.w	8002180 <HAL_RCC_GetSysClockFreq+0x43c>
 8001d78:	a201      	add	r2, pc, #4	@ (adr r2, 8001d80 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7e:	bf00      	nop
 8001d80:	08001db5 	.word	0x08001db5
 8001d84:	08002181 	.word	0x08002181
 8001d88:	08002181 	.word	0x08002181
 8001d8c:	08002181 	.word	0x08002181
 8001d90:	08001dbd 	.word	0x08001dbd
 8001d94:	08002181 	.word	0x08002181
 8001d98:	08002181 	.word	0x08002181
 8001d9c:	08002181 	.word	0x08002181
 8001da0:	08001dc5 	.word	0x08001dc5
 8001da4:	08002181 	.word	0x08002181
 8001da8:	08002181 	.word	0x08002181
 8001dac:	08002181 	.word	0x08002181
 8001db0:	08001fb5 	.word	0x08001fb5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001db4:	4bb9      	ldr	r3, [pc, #740]	@ (800209c <HAL_RCC_GetSysClockFreq+0x358>)
 8001db6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001dba:	e1e5      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dbc:	4bb7      	ldr	r3, [pc, #732]	@ (800209c <HAL_RCC_GetSysClockFreq+0x358>)
 8001dbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001dc2:	e1e1      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dc4:	4bb4      	ldr	r3, [pc, #720]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001dcc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dd0:	4bb1      	ldr	r3, [pc, #708]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d071      	beq.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ddc:	4bae      	ldr	r3, [pc, #696]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	099b      	lsrs	r3, r3, #6
 8001de2:	2200      	movs	r2, #0
 8001de4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001de8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001dec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001df4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001dfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001e02:	4622      	mov	r2, r4
 8001e04:	462b      	mov	r3, r5
 8001e06:	f04f 0000 	mov.w	r0, #0
 8001e0a:	f04f 0100 	mov.w	r1, #0
 8001e0e:	0159      	lsls	r1, r3, #5
 8001e10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e14:	0150      	lsls	r0, r2, #5
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4621      	mov	r1, r4
 8001e1c:	1a51      	subs	r1, r2, r1
 8001e1e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001e20:	4629      	mov	r1, r5
 8001e22:	eb63 0301 	sbc.w	r3, r3, r1
 8001e26:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	f04f 0300 	mov.w	r3, #0
 8001e30:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001e34:	4649      	mov	r1, r9
 8001e36:	018b      	lsls	r3, r1, #6
 8001e38:	4641      	mov	r1, r8
 8001e3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e3e:	4641      	mov	r1, r8
 8001e40:	018a      	lsls	r2, r1, #6
 8001e42:	4641      	mov	r1, r8
 8001e44:	1a51      	subs	r1, r2, r1
 8001e46:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001e48:	4649      	mov	r1, r9
 8001e4a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	f04f 0300 	mov.w	r3, #0
 8001e58:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001e5c:	4649      	mov	r1, r9
 8001e5e:	00cb      	lsls	r3, r1, #3
 8001e60:	4641      	mov	r1, r8
 8001e62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e66:	4641      	mov	r1, r8
 8001e68:	00ca      	lsls	r2, r1, #3
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4603      	mov	r3, r0
 8001e70:	4622      	mov	r2, r4
 8001e72:	189b      	adds	r3, r3, r2
 8001e74:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e76:	462b      	mov	r3, r5
 8001e78:	460a      	mov	r2, r1
 8001e7a:	eb42 0303 	adc.w	r3, r2, r3
 8001e7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e8c:	4629      	mov	r1, r5
 8001e8e:	028b      	lsls	r3, r1, #10
 8001e90:	4621      	mov	r1, r4
 8001e92:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e96:	4621      	mov	r1, r4
 8001e98:	028a      	lsls	r2, r1, #10
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001ea8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001eac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001eb0:	f7fe f9a8 	bl	8000204 <__aeabi_uldivmod>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4613      	mov	r3, r2
 8001eba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001ebe:	e067      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ec0:	4b75      	ldr	r3, [pc, #468]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	099b      	lsrs	r3, r3, #6
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001ecc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001ed0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ed8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001eda:	2300      	movs	r3, #0
 8001edc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001ede:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001ee2:	4622      	mov	r2, r4
 8001ee4:	462b      	mov	r3, r5
 8001ee6:	f04f 0000 	mov.w	r0, #0
 8001eea:	f04f 0100 	mov.w	r1, #0
 8001eee:	0159      	lsls	r1, r3, #5
 8001ef0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ef4:	0150      	lsls	r0, r2, #5
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	4621      	mov	r1, r4
 8001efc:	1a51      	subs	r1, r2, r1
 8001efe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001f00:	4629      	mov	r1, r5
 8001f02:	eb63 0301 	sbc.w	r3, r3, r1
 8001f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	f04f 0300 	mov.w	r3, #0
 8001f10:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001f14:	4649      	mov	r1, r9
 8001f16:	018b      	lsls	r3, r1, #6
 8001f18:	4641      	mov	r1, r8
 8001f1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f1e:	4641      	mov	r1, r8
 8001f20:	018a      	lsls	r2, r1, #6
 8001f22:	4641      	mov	r1, r8
 8001f24:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f28:	4649      	mov	r1, r9
 8001f2a:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f3a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f42:	4692      	mov	sl, r2
 8001f44:	469b      	mov	fp, r3
 8001f46:	4623      	mov	r3, r4
 8001f48:	eb1a 0303 	adds.w	r3, sl, r3
 8001f4c:	623b      	str	r3, [r7, #32]
 8001f4e:	462b      	mov	r3, r5
 8001f50:	eb4b 0303 	adc.w	r3, fp, r3
 8001f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f56:	f04f 0200 	mov.w	r2, #0
 8001f5a:	f04f 0300 	mov.w	r3, #0
 8001f5e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001f62:	4629      	mov	r1, r5
 8001f64:	028b      	lsls	r3, r1, #10
 8001f66:	4621      	mov	r1, r4
 8001f68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f6c:	4621      	mov	r1, r4
 8001f6e:	028a      	lsls	r2, r1, #10
 8001f70:	4610      	mov	r0, r2
 8001f72:	4619      	mov	r1, r3
 8001f74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f78:	2200      	movs	r2, #0
 8001f7a:	673b      	str	r3, [r7, #112]	@ 0x70
 8001f7c:	677a      	str	r2, [r7, #116]	@ 0x74
 8001f7e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001f82:	f7fe f93f 	bl	8000204 <__aeabi_uldivmod>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f90:	4b41      	ldr	r3, [pc, #260]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	0c1b      	lsrs	r3, r3, #16
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8001fa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001fa6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001fb2:	e0e9      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fb4:	4b38      	ldr	r3, [pc, #224]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fc0:	4b35      	ldr	r3, [pc, #212]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d069      	beq.n	80020a0 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fcc:	4b32      	ldr	r3, [pc, #200]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	099b      	lsrs	r3, r3, #6
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001fd6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001fd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fde:	663b      	str	r3, [r7, #96]	@ 0x60
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	667b      	str	r3, [r7, #100]	@ 0x64
 8001fe4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001fe8:	4622      	mov	r2, r4
 8001fea:	462b      	mov	r3, r5
 8001fec:	f04f 0000 	mov.w	r0, #0
 8001ff0:	f04f 0100 	mov.w	r1, #0
 8001ff4:	0159      	lsls	r1, r3, #5
 8001ff6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ffa:	0150      	lsls	r0, r2, #5
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4621      	mov	r1, r4
 8002002:	1a51      	subs	r1, r2, r1
 8002004:	61b9      	str	r1, [r7, #24]
 8002006:	4629      	mov	r1, r5
 8002008:	eb63 0301 	sbc.w	r3, r3, r1
 800200c:	61fb      	str	r3, [r7, #28]
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	f04f 0300 	mov.w	r3, #0
 8002016:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800201a:	4659      	mov	r1, fp
 800201c:	018b      	lsls	r3, r1, #6
 800201e:	4651      	mov	r1, sl
 8002020:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002024:	4651      	mov	r1, sl
 8002026:	018a      	lsls	r2, r1, #6
 8002028:	4651      	mov	r1, sl
 800202a:	ebb2 0801 	subs.w	r8, r2, r1
 800202e:	4659      	mov	r1, fp
 8002030:	eb63 0901 	sbc.w	r9, r3, r1
 8002034:	f04f 0200 	mov.w	r2, #0
 8002038:	f04f 0300 	mov.w	r3, #0
 800203c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002040:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002044:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002048:	4690      	mov	r8, r2
 800204a:	4699      	mov	r9, r3
 800204c:	4623      	mov	r3, r4
 800204e:	eb18 0303 	adds.w	r3, r8, r3
 8002052:	613b      	str	r3, [r7, #16]
 8002054:	462b      	mov	r3, r5
 8002056:	eb49 0303 	adc.w	r3, r9, r3
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	f04f 0300 	mov.w	r3, #0
 8002064:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002068:	4629      	mov	r1, r5
 800206a:	028b      	lsls	r3, r1, #10
 800206c:	4621      	mov	r1, r4
 800206e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002072:	4621      	mov	r1, r4
 8002074:	028a      	lsls	r2, r1, #10
 8002076:	4610      	mov	r0, r2
 8002078:	4619      	mov	r1, r3
 800207a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800207e:	2200      	movs	r2, #0
 8002080:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002082:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002084:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002088:	f7fe f8bc 	bl	8000204 <__aeabi_uldivmod>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4613      	mov	r3, r2
 8002092:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002096:	e063      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x41c>
 8002098:	40023800 	.word	0x40023800
 800209c:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020a0:	4b3d      	ldr	r3, [pc, #244]	@ (8002198 <HAL_RCC_GetSysClockFreq+0x454>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	099b      	lsrs	r3, r3, #6
 80020a6:	2200      	movs	r2, #0
 80020a8:	4618      	mov	r0, r3
 80020aa:	4611      	mov	r1, r2
 80020ac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80020b2:	2300      	movs	r3, #0
 80020b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80020b6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80020ba:	4642      	mov	r2, r8
 80020bc:	464b      	mov	r3, r9
 80020be:	f04f 0000 	mov.w	r0, #0
 80020c2:	f04f 0100 	mov.w	r1, #0
 80020c6:	0159      	lsls	r1, r3, #5
 80020c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020cc:	0150      	lsls	r0, r2, #5
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	4641      	mov	r1, r8
 80020d4:	1a51      	subs	r1, r2, r1
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	4649      	mov	r1, r9
 80020da:	eb63 0301 	sbc.w	r3, r3, r1
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80020ec:	4659      	mov	r1, fp
 80020ee:	018b      	lsls	r3, r1, #6
 80020f0:	4651      	mov	r1, sl
 80020f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020f6:	4651      	mov	r1, sl
 80020f8:	018a      	lsls	r2, r1, #6
 80020fa:	4651      	mov	r1, sl
 80020fc:	1a54      	subs	r4, r2, r1
 80020fe:	4659      	mov	r1, fp
 8002100:	eb63 0501 	sbc.w	r5, r3, r1
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	f04f 0300 	mov.w	r3, #0
 800210c:	00eb      	lsls	r3, r5, #3
 800210e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002112:	00e2      	lsls	r2, r4, #3
 8002114:	4614      	mov	r4, r2
 8002116:	461d      	mov	r5, r3
 8002118:	4643      	mov	r3, r8
 800211a:	18e3      	adds	r3, r4, r3
 800211c:	603b      	str	r3, [r7, #0]
 800211e:	464b      	mov	r3, r9
 8002120:	eb45 0303 	adc.w	r3, r5, r3
 8002124:	607b      	str	r3, [r7, #4]
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	f04f 0300 	mov.w	r3, #0
 800212e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002132:	4629      	mov	r1, r5
 8002134:	028b      	lsls	r3, r1, #10
 8002136:	4621      	mov	r1, r4
 8002138:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800213c:	4621      	mov	r1, r4
 800213e:	028a      	lsls	r2, r1, #10
 8002140:	4610      	mov	r0, r2
 8002142:	4619      	mov	r1, r3
 8002144:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002148:	2200      	movs	r2, #0
 800214a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800214c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800214e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002152:	f7fe f857 	bl	8000204 <__aeabi_uldivmod>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4613      	mov	r3, r2
 800215c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002160:	4b0d      	ldr	r3, [pc, #52]	@ (8002198 <HAL_RCC_GetSysClockFreq+0x454>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	0f1b      	lsrs	r3, r3, #28
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800216e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002172:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002176:	fbb2 f3f3 	udiv	r3, r2, r3
 800217a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800217e:	e003      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002180:	4b06      	ldr	r3, [pc, #24]	@ (800219c <HAL_RCC_GetSysClockFreq+0x458>)
 8002182:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002186:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002188:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800218c:	4618      	mov	r0, r3
 800218e:	37b8      	adds	r7, #184	@ 0xb8
 8002190:	46bd      	mov	sp, r7
 8002192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002196:	bf00      	nop
 8002198:	40023800 	.word	0x40023800
 800219c:	00f42400 	.word	0x00f42400

080021a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e28d      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 8083 	beq.w	80022c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80021c0:	4b94      	ldr	r3, [pc, #592]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 030c 	and.w	r3, r3, #12
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d019      	beq.n	8002200 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021cc:	4b91      	ldr	r3, [pc, #580]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	d106      	bne.n	80021e6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021d8:	4b8e      	ldr	r3, [pc, #568]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021e4:	d00c      	beq.n	8002200 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021e6:	4b8b      	ldr	r3, [pc, #556]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021ee:	2b0c      	cmp	r3, #12
 80021f0:	d112      	bne.n	8002218 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021f2:	4b88      	ldr	r3, [pc, #544]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021fe:	d10b      	bne.n	8002218 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002200:	4b84      	ldr	r3, [pc, #528]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d05b      	beq.n	80022c4 <HAL_RCC_OscConfig+0x124>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d157      	bne.n	80022c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e25a      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002220:	d106      	bne.n	8002230 <HAL_RCC_OscConfig+0x90>
 8002222:	4b7c      	ldr	r3, [pc, #496]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a7b      	ldr	r2, [pc, #492]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 8002228:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	e01d      	b.n	800226c <HAL_RCC_OscConfig+0xcc>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0xb4>
 800223a:	4b76      	ldr	r3, [pc, #472]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a75      	ldr	r2, [pc, #468]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 8002240:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	4b73      	ldr	r3, [pc, #460]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a72      	ldr	r2, [pc, #456]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 800224c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e00b      	b.n	800226c <HAL_RCC_OscConfig+0xcc>
 8002254:	4b6f      	ldr	r3, [pc, #444]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a6e      	ldr	r2, [pc, #440]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 800225a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	4b6c      	ldr	r3, [pc, #432]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a6b      	ldr	r2, [pc, #428]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 8002266:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800226a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d013      	beq.n	800229c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002274:	f7ff f964 	bl	8001540 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800227c:	f7ff f960 	bl	8001540 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b64      	cmp	r3, #100	@ 0x64
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e21f      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228e:	4b61      	ldr	r3, [pc, #388]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f0      	beq.n	800227c <HAL_RCC_OscConfig+0xdc>
 800229a:	e014      	b.n	80022c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7ff f950 	bl	8001540 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022a4:	f7ff f94c 	bl	8001540 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b64      	cmp	r3, #100	@ 0x64
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e20b      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b6:	4b57      	ldr	r3, [pc, #348]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x104>
 80022c2:	e000      	b.n	80022c6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d06f      	beq.n	80023b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80022d2:	4b50      	ldr	r3, [pc, #320]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 030c 	and.w	r3, r3, #12
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d017      	beq.n	800230e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80022de:	4b4d      	ldr	r3, [pc, #308]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d105      	bne.n	80022f6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80022ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00b      	beq.n	800230e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022f6:	4b47      	ldr	r3, [pc, #284]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80022fe:	2b0c      	cmp	r3, #12
 8002300:	d11c      	bne.n	800233c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002302:	4b44      	ldr	r3, [pc, #272]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d116      	bne.n	800233c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800230e:	4b41      	ldr	r3, [pc, #260]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d005      	beq.n	8002326 <HAL_RCC_OscConfig+0x186>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d001      	beq.n	8002326 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e1d3      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002326:	4b3b      	ldr	r3, [pc, #236]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4937      	ldr	r1, [pc, #220]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 8002336:	4313      	orrs	r3, r2
 8002338:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233a:	e03a      	b.n	80023b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d020      	beq.n	8002386 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002344:	4b34      	ldr	r3, [pc, #208]	@ (8002418 <HAL_RCC_OscConfig+0x278>)
 8002346:	2201      	movs	r2, #1
 8002348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234a:	f7ff f8f9 	bl	8001540 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002352:	f7ff f8f5 	bl	8001540 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e1b4      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002364:	4b2b      	ldr	r3, [pc, #172]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0f0      	beq.n	8002352 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002370:	4b28      	ldr	r3, [pc, #160]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	4925      	ldr	r1, [pc, #148]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 8002380:	4313      	orrs	r3, r2
 8002382:	600b      	str	r3, [r1, #0]
 8002384:	e015      	b.n	80023b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002386:	4b24      	ldr	r3, [pc, #144]	@ (8002418 <HAL_RCC_OscConfig+0x278>)
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238c:	f7ff f8d8 	bl	8001540 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002394:	f7ff f8d4 	bl	8001540 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e193      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f0      	bne.n	8002394 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d036      	beq.n	800242c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d016      	beq.n	80023f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023c6:	4b15      	ldr	r3, [pc, #84]	@ (800241c <HAL_RCC_OscConfig+0x27c>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023cc:	f7ff f8b8 	bl	8001540 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023d4:	f7ff f8b4 	bl	8001540 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e173      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002414 <HAL_RCC_OscConfig+0x274>)
 80023e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0f0      	beq.n	80023d4 <HAL_RCC_OscConfig+0x234>
 80023f2:	e01b      	b.n	800242c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023f4:	4b09      	ldr	r3, [pc, #36]	@ (800241c <HAL_RCC_OscConfig+0x27c>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fa:	f7ff f8a1 	bl	8001540 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002400:	e00e      	b.n	8002420 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002402:	f7ff f89d 	bl	8001540 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d907      	bls.n	8002420 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e15c      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
 8002414:	40023800 	.word	0x40023800
 8002418:	42470000 	.word	0x42470000
 800241c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002420:	4b8a      	ldr	r3, [pc, #552]	@ (800264c <HAL_RCC_OscConfig+0x4ac>)
 8002422:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1ea      	bne.n	8002402 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 8097 	beq.w	8002568 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800243a:	2300      	movs	r3, #0
 800243c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800243e:	4b83      	ldr	r3, [pc, #524]	@ (800264c <HAL_RCC_OscConfig+0x4ac>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10f      	bne.n	800246a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	4b7f      	ldr	r3, [pc, #508]	@ (800264c <HAL_RCC_OscConfig+0x4ac>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002452:	4a7e      	ldr	r2, [pc, #504]	@ (800264c <HAL_RCC_OscConfig+0x4ac>)
 8002454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002458:	6413      	str	r3, [r2, #64]	@ 0x40
 800245a:	4b7c      	ldr	r3, [pc, #496]	@ (800264c <HAL_RCC_OscConfig+0x4ac>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002462:	60bb      	str	r3, [r7, #8]
 8002464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002466:	2301      	movs	r3, #1
 8002468:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246a:	4b79      	ldr	r3, [pc, #484]	@ (8002650 <HAL_RCC_OscConfig+0x4b0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002472:	2b00      	cmp	r3, #0
 8002474:	d118      	bne.n	80024a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002476:	4b76      	ldr	r3, [pc, #472]	@ (8002650 <HAL_RCC_OscConfig+0x4b0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a75      	ldr	r2, [pc, #468]	@ (8002650 <HAL_RCC_OscConfig+0x4b0>)
 800247c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002482:	f7ff f85d 	bl	8001540 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800248a:	f7ff f859 	bl	8001540 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e118      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249c:	4b6c      	ldr	r3, [pc, #432]	@ (8002650 <HAL_RCC_OscConfig+0x4b0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0f0      	beq.n	800248a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d106      	bne.n	80024be <HAL_RCC_OscConfig+0x31e>
 80024b0:	4b66      	ldr	r3, [pc, #408]	@ (800264c <HAL_RCC_OscConfig+0x4ac>)
 80024b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024b4:	4a65      	ldr	r2, [pc, #404]	@ (800264c <HAL_RCC_OscConfig+0x4ac>)
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80024bc:	e01c      	b.n	80024f8 <HAL_RCC_OscConfig+0x358>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2b05      	cmp	r3, #5
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x340>
 80024c6:	4b61      	ldr	r3, [pc, #388]	@ (800264c <HAL_RCC_OscConfig+0x4ac>)
 80024c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ca:	4a60      	ldr	r2, [pc, #384]	@ (800264c <HAL_RCC_OscConfig+0x4ac>)
 80024cc:	f043 0304 	orr.w	r3, r3, #4
 80024d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80024d2:	4b5e      	ldr	r3, [pc, #376]	@ (800264c <HAL_RCC_OscConfig+0x4ac>)
 80024d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024d6:	4a5d      	ldr	r2, [pc, #372]	@ (800264c <HAL_RCC_OscConfig+0x4ac>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80024de:	e00b      	b.n	80024f8 <HAL_RCC_OscConfig+0x358>
 80024e0:	4b5a      	ldr	r3, [pc, #360]	@ (800264c <HAL_RCC_OscConfig+0x4ac>)
 80024e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024e4:	4a59      	ldr	r2, [pc, #356]	@ (800264c <HAL_RCC_OscConfig+0x4ac>)
 80024e6:	f023 0301 	bic.w	r3, r3, #1
 80024ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80024ec:	4b57      	ldr	r3, [pc, #348]	@ (800264c <HAL_RCC_OscConfig+0x4ac>)
 80024ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f0:	4a56      	ldr	r2, [pc, #344]	@ (800264c <HAL_RCC_OscConfig+0x4ac>)
 80024f2:	f023 0304 	bic.w	r3, r3, #4
 80024f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d015      	beq.n	800252c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002500:	f7ff f81e 	bl	8001540 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002506:	e00a      	b.n	800251e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002508:	f7ff f81a 	bl	8001540 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002516:	4293      	cmp	r3, r2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e0d7      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800251e:	4b4b      	ldr	r3, [pc, #300]	@ (800264c <HAL_RCC_OscConfig+0x4ac>)
 8002520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0ee      	beq.n	8002508 <HAL_RCC_OscConfig+0x368>
 800252a:	e014      	b.n	8002556 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252c:	f7ff f808 	bl	8001540 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002532:	e00a      	b.n	800254a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002534:	f7ff f804 	bl	8001540 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002542:	4293      	cmp	r3, r2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e0c1      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800254a:	4b40      	ldr	r3, [pc, #256]	@ (800264c <HAL_RCC_OscConfig+0x4ac>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1ee      	bne.n	8002534 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002556:	7dfb      	ldrb	r3, [r7, #23]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d105      	bne.n	8002568 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800255c:	4b3b      	ldr	r3, [pc, #236]	@ (800264c <HAL_RCC_OscConfig+0x4ac>)
 800255e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002560:	4a3a      	ldr	r2, [pc, #232]	@ (800264c <HAL_RCC_OscConfig+0x4ac>)
 8002562:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002566:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 80ad 	beq.w	80026cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002572:	4b36      	ldr	r3, [pc, #216]	@ (800264c <HAL_RCC_OscConfig+0x4ac>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 030c 	and.w	r3, r3, #12
 800257a:	2b08      	cmp	r3, #8
 800257c:	d060      	beq.n	8002640 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d145      	bne.n	8002612 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002586:	4b33      	ldr	r3, [pc, #204]	@ (8002654 <HAL_RCC_OscConfig+0x4b4>)
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7fe ffd8 	bl	8001540 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002594:	f7fe ffd4 	bl	8001540 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e093      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a6:	4b29      	ldr	r3, [pc, #164]	@ (800264c <HAL_RCC_OscConfig+0x4ac>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69da      	ldr	r2, [r3, #28]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c0:	019b      	lsls	r3, r3, #6
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c8:	085b      	lsrs	r3, r3, #1
 80025ca:	3b01      	subs	r3, #1
 80025cc:	041b      	lsls	r3, r3, #16
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d4:	061b      	lsls	r3, r3, #24
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025dc:	071b      	lsls	r3, r3, #28
 80025de:	491b      	ldr	r1, [pc, #108]	@ (800264c <HAL_RCC_OscConfig+0x4ac>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002654 <HAL_RCC_OscConfig+0x4b4>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ea:	f7fe ffa9 	bl	8001540 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f2:	f7fe ffa5 	bl	8001540 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e064      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002604:	4b11      	ldr	r3, [pc, #68]	@ (800264c <HAL_RCC_OscConfig+0x4ac>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0f0      	beq.n	80025f2 <HAL_RCC_OscConfig+0x452>
 8002610:	e05c      	b.n	80026cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002612:	4b10      	ldr	r3, [pc, #64]	@ (8002654 <HAL_RCC_OscConfig+0x4b4>)
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002618:	f7fe ff92 	bl	8001540 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002620:	f7fe ff8e 	bl	8001540 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e04d      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002632:	4b06      	ldr	r3, [pc, #24]	@ (800264c <HAL_RCC_OscConfig+0x4ac>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0x480>
 800263e:	e045      	b.n	80026cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d107      	bne.n	8002658 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e040      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
 800264c:	40023800 	.word	0x40023800
 8002650:	40007000 	.word	0x40007000
 8002654:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002658:	4b1f      	ldr	r3, [pc, #124]	@ (80026d8 <HAL_RCC_OscConfig+0x538>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d030      	beq.n	80026c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002670:	429a      	cmp	r2, r3
 8002672:	d129      	bne.n	80026c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267e:	429a      	cmp	r2, r3
 8002680:	d122      	bne.n	80026c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002688:	4013      	ands	r3, r2
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800268e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002690:	4293      	cmp	r3, r2
 8002692:	d119      	bne.n	80026c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800269e:	085b      	lsrs	r3, r3, #1
 80026a0:	3b01      	subs	r3, #1
 80026a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d10f      	bne.n	80026c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d107      	bne.n	80026c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d001      	beq.n	80026cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40023800 	.word	0x40023800

080026dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e041      	b.n	8002772 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d106      	bne.n	8002708 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7fe fb9c 	bl	8000e40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3304      	adds	r3, #4
 8002718:	4619      	mov	r1, r3
 800271a:	4610      	mov	r0, r2
 800271c:	f000 f950 	bl	80029c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b084      	sub	sp, #16
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d020      	beq.n	80027de <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d01b      	beq.n	80027de <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f06f 0202 	mvn.w	r2, #2
 80027ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f8dc 	bl	8002982 <HAL_TIM_IC_CaptureCallback>
 80027ca:	e005      	b.n	80027d8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f8ce 	bl	800296e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f8df 	bl	8002996 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d020      	beq.n	800282a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d01b      	beq.n	800282a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f06f 0204 	mvn.w	r2, #4
 80027fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f8b6 	bl	8002982 <HAL_TIM_IC_CaptureCallback>
 8002816:	e005      	b.n	8002824 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f8a8 	bl	800296e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f8b9 	bl	8002996 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	2b00      	cmp	r3, #0
 8002832:	d020      	beq.n	8002876 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d01b      	beq.n	8002876 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f06f 0208 	mvn.w	r2, #8
 8002846:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2204      	movs	r2, #4
 800284c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f890 	bl	8002982 <HAL_TIM_IC_CaptureCallback>
 8002862:	e005      	b.n	8002870 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f882 	bl	800296e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f893 	bl	8002996 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	f003 0310 	and.w	r3, r3, #16
 800287c:	2b00      	cmp	r3, #0
 800287e:	d020      	beq.n	80028c2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f003 0310 	and.w	r3, r3, #16
 8002886:	2b00      	cmp	r3, #0
 8002888:	d01b      	beq.n	80028c2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f06f 0210 	mvn.w	r2, #16
 8002892:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2208      	movs	r2, #8
 8002898:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f86a 	bl	8002982 <HAL_TIM_IC_CaptureCallback>
 80028ae:	e005      	b.n	80028bc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f85c 	bl	800296e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f86d 	bl	8002996 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00c      	beq.n	80028e6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d007      	beq.n	80028e6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f06f 0201 	mvn.w	r2, #1
 80028de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f83a 	bl	800295a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00c      	beq.n	800290a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d007      	beq.n	800290a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f98d 	bl	8002c24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00c      	beq.n	800292e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800291a:	2b00      	cmp	r3, #0
 800291c:	d007      	beq.n	800292e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f83e 	bl	80029aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	f003 0320 	and.w	r3, r3, #32
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00c      	beq.n	8002952 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f003 0320 	and.w	r3, r3, #32
 800293e:	2b00      	cmp	r3, #0
 8002940:	d007      	beq.n	8002952 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f06f 0220 	mvn.w	r2, #32
 800294a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f95f 	bl	8002c10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002952:	bf00      	nop
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
	...

080029c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a46      	ldr	r2, [pc, #280]	@ (8002aec <TIM_Base_SetConfig+0x12c>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d013      	beq.n	8002a00 <TIM_Base_SetConfig+0x40>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029de:	d00f      	beq.n	8002a00 <TIM_Base_SetConfig+0x40>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a43      	ldr	r2, [pc, #268]	@ (8002af0 <TIM_Base_SetConfig+0x130>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d00b      	beq.n	8002a00 <TIM_Base_SetConfig+0x40>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a42      	ldr	r2, [pc, #264]	@ (8002af4 <TIM_Base_SetConfig+0x134>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d007      	beq.n	8002a00 <TIM_Base_SetConfig+0x40>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a41      	ldr	r2, [pc, #260]	@ (8002af8 <TIM_Base_SetConfig+0x138>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d003      	beq.n	8002a00 <TIM_Base_SetConfig+0x40>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a40      	ldr	r2, [pc, #256]	@ (8002afc <TIM_Base_SetConfig+0x13c>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d108      	bne.n	8002a12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a35      	ldr	r2, [pc, #212]	@ (8002aec <TIM_Base_SetConfig+0x12c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d02b      	beq.n	8002a72 <TIM_Base_SetConfig+0xb2>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a20:	d027      	beq.n	8002a72 <TIM_Base_SetConfig+0xb2>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a32      	ldr	r2, [pc, #200]	@ (8002af0 <TIM_Base_SetConfig+0x130>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d023      	beq.n	8002a72 <TIM_Base_SetConfig+0xb2>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a31      	ldr	r2, [pc, #196]	@ (8002af4 <TIM_Base_SetConfig+0x134>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d01f      	beq.n	8002a72 <TIM_Base_SetConfig+0xb2>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a30      	ldr	r2, [pc, #192]	@ (8002af8 <TIM_Base_SetConfig+0x138>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d01b      	beq.n	8002a72 <TIM_Base_SetConfig+0xb2>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a2f      	ldr	r2, [pc, #188]	@ (8002afc <TIM_Base_SetConfig+0x13c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d017      	beq.n	8002a72 <TIM_Base_SetConfig+0xb2>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a2e      	ldr	r2, [pc, #184]	@ (8002b00 <TIM_Base_SetConfig+0x140>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d013      	beq.n	8002a72 <TIM_Base_SetConfig+0xb2>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a2d      	ldr	r2, [pc, #180]	@ (8002b04 <TIM_Base_SetConfig+0x144>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d00f      	beq.n	8002a72 <TIM_Base_SetConfig+0xb2>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a2c      	ldr	r2, [pc, #176]	@ (8002b08 <TIM_Base_SetConfig+0x148>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d00b      	beq.n	8002a72 <TIM_Base_SetConfig+0xb2>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a2b      	ldr	r2, [pc, #172]	@ (8002b0c <TIM_Base_SetConfig+0x14c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d007      	beq.n	8002a72 <TIM_Base_SetConfig+0xb2>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a2a      	ldr	r2, [pc, #168]	@ (8002b10 <TIM_Base_SetConfig+0x150>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d003      	beq.n	8002a72 <TIM_Base_SetConfig+0xb2>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a29      	ldr	r2, [pc, #164]	@ (8002b14 <TIM_Base_SetConfig+0x154>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d108      	bne.n	8002a84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a10      	ldr	r2, [pc, #64]	@ (8002aec <TIM_Base_SetConfig+0x12c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d003      	beq.n	8002ab8 <TIM_Base_SetConfig+0xf8>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a12      	ldr	r2, [pc, #72]	@ (8002afc <TIM_Base_SetConfig+0x13c>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d103      	bne.n	8002ac0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	691a      	ldr	r2, [r3, #16]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d105      	bne.n	8002ade <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	f023 0201 	bic.w	r2, r3, #1
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	611a      	str	r2, [r3, #16]
  }
}
 8002ade:	bf00      	nop
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40010000 	.word	0x40010000
 8002af0:	40000400 	.word	0x40000400
 8002af4:	40000800 	.word	0x40000800
 8002af8:	40000c00 	.word	0x40000c00
 8002afc:	40010400 	.word	0x40010400
 8002b00:	40014000 	.word	0x40014000
 8002b04:	40014400 	.word	0x40014400
 8002b08:	40014800 	.word	0x40014800
 8002b0c:	40001800 	.word	0x40001800
 8002b10:	40001c00 	.word	0x40001c00
 8002b14:	40002000 	.word	0x40002000

08002b18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d101      	bne.n	8002b30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e05a      	b.n	8002be6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a21      	ldr	r2, [pc, #132]	@ (8002bf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d022      	beq.n	8002bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b7c:	d01d      	beq.n	8002bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a1d      	ldr	r2, [pc, #116]	@ (8002bf8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d018      	beq.n	8002bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8002bfc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d013      	beq.n	8002bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a1a      	ldr	r2, [pc, #104]	@ (8002c00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d00e      	beq.n	8002bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a18      	ldr	r2, [pc, #96]	@ (8002c04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d009      	beq.n	8002bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a17      	ldr	r2, [pc, #92]	@ (8002c08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d004      	beq.n	8002bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a15      	ldr	r2, [pc, #84]	@ (8002c0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40010000 	.word	0x40010000
 8002bf8:	40000400 	.word	0x40000400
 8002bfc:	40000800 	.word	0x40000800
 8002c00:	40000c00 	.word	0x40000c00
 8002c04:	40010400 	.word	0x40010400
 8002c08:	40014000 	.word	0x40014000
 8002c0c:	40001800 	.word	0x40001800

08002c10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b08b      	sub	sp, #44	@ 0x2c
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	fa93 f3a3 	rbit	r3, r3
 8002c52:	613b      	str	r3, [r7, #16]
  return result;
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8002c5e:	2320      	movs	r3, #32
 8002c60:	e003      	b.n	8002c6a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	fab3 f383 	clz	r3, r3
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	2103      	movs	r1, #3
 8002c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	401a      	ands	r2, r3
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	fa93 f3a3 	rbit	r3, r3
 8002c80:	61fb      	str	r3, [r7, #28]
  return result;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002c8c:	2320      	movs	r3, #32
 8002c8e:	e003      	b.n	8002c98 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c92:	fab3 f383 	clz	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	601a      	str	r2, [r3, #0]
}
 8002ca6:	bf00      	nop
 8002ca8:	372c      	adds	r7, #44	@ 0x2c
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b085      	sub	sp, #20
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	60f8      	str	r0, [r7, #12]
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	605a      	str	r2, [r3, #4]
}
 8002cd6:	bf00      	nop
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b08b      	sub	sp, #44	@ 0x2c
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	fa93 f3a3 	rbit	r3, r3
 8002cfc:	613b      	str	r3, [r7, #16]
  return result;
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002d08:	2320      	movs	r3, #32
 8002d0a:	e003      	b.n	8002d14 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	2103      	movs	r1, #3
 8002d18:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	401a      	ands	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	fa93 f3a3 	rbit	r3, r3
 8002d2a:	61fb      	str	r3, [r7, #28]
  return result;
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002d36:	2320      	movs	r3, #32
 8002d38:	e003      	b.n	8002d42 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3c:	fab3 f383 	clz	r3, r3
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002d50:	bf00      	nop
 8002d52:	372c      	adds	r7, #44	@ 0x2c
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b08b      	sub	sp, #44	@ 0x2c
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	fa93 f3a3 	rbit	r3, r3
 8002d76:	613b      	str	r3, [r7, #16]
  return result;
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002d82:	2320      	movs	r3, #32
 8002d84:	e003      	b.n	8002d8e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	fab3 f383 	clz	r3, r3
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	2103      	movs	r1, #3
 8002d92:	fa01 f303 	lsl.w	r3, r1, r3
 8002d96:	43db      	mvns	r3, r3
 8002d98:	401a      	ands	r2, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	fa93 f3a3 	rbit	r3, r3
 8002da4:	61fb      	str	r3, [r7, #28]
  return result;
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002db0:	2320      	movs	r3, #32
 8002db2:	e003      	b.n	8002dbc <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db6:	fab3 f383 	clz	r3, r3
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	60da      	str	r2, [r3, #12]
}
 8002dca:	bf00      	nop
 8002dcc:	372c      	adds	r7, #44	@ 0x2c
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b08b      	sub	sp, #44	@ 0x2c
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	60f8      	str	r0, [r7, #12]
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a1a      	ldr	r2, [r3, #32]
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	fa93 f3a3 	rbit	r3, r3
 8002df0:	613b      	str	r3, [r7, #16]
  return result;
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002dfc:	2320      	movs	r3, #32
 8002dfe:	e003      	b.n	8002e08 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	fab3 f383 	clz	r3, r3
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	210f      	movs	r1, #15
 8002e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	401a      	ands	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	fa93 f3a3 	rbit	r3, r3
 8002e1e:	61fb      	str	r3, [r7, #28]
  return result;
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002e2a:	2320      	movs	r3, #32
 8002e2c:	e003      	b.n	8002e36 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e30:	fab3 f383 	clz	r3, r3
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002e44:	bf00      	nop
 8002e46:	372c      	adds	r7, #44	@ 0x2c
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b08b      	sub	sp, #44	@ 0x2c
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	0a1b      	lsrs	r3, r3, #8
 8002e64:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	fa93 f3a3 	rbit	r3, r3
 8002e6c:	613b      	str	r3, [r7, #16]
  return result;
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002e78:	2320      	movs	r3, #32
 8002e7a:	e003      	b.n	8002e84 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	fab3 f383 	clz	r3, r3
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	210f      	movs	r1, #15
 8002e88:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	401a      	ands	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	0a1b      	lsrs	r3, r3, #8
 8002e94:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	fa93 f3a3 	rbit	r3, r3
 8002e9c:	61fb      	str	r3, [r7, #28]
  return result;
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002ea8:	2320      	movs	r3, #32
 8002eaa:	e003      	b.n	8002eb4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eae:	fab3 f383 	clz	r3, r3
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002ec2:	bf00      	nop
 8002ec4:	372c      	adds	r7, #44	@ 0x2c
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b08a      	sub	sp, #40	@ 0x28
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	fa93 f3a3 	rbit	r3, r3
 8002eec:	617b      	str	r3, [r7, #20]
  return result;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <LL_GPIO_Init+0x2e>
    return 32U;
 8002ef8:	2320      	movs	r3, #32
 8002efa:	e003      	b.n	8002f04 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	fab3 f383 	clz	r3, r3
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002f06:	e057      	b.n	8002fb8 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f10:	fa01 f303 	lsl.w	r3, r1, r3
 8002f14:	4013      	ands	r3, r2
 8002f16:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d049      	beq.n	8002fb2 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d003      	beq.n	8002f2e <LL_GPIO_Init+0x60>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d10d      	bne.n	8002f4a <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	461a      	mov	r2, r3
 8002f34:	6a39      	ldr	r1, [r7, #32]
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff fed3 	bl	8002ce2 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	461a      	mov	r2, r3
 8002f42:	6a39      	ldr	r1, [r7, #32]
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7ff feb4 	bl	8002cb2 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	6a39      	ldr	r1, [r7, #32]
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff ff02 	bl	8002d5c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d121      	bne.n	8002fa4 <LL_GPIO_Init+0xd6>
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	fa93 f3a3 	rbit	r3, r3
 8002f6a:	60bb      	str	r3, [r7, #8]
  return result;
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <LL_GPIO_Init+0xac>
    return 32U;
 8002f76:	2320      	movs	r3, #32
 8002f78:	e003      	b.n	8002f82 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	fab3 f383 	clz	r3, r3
 8002f80:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002f82:	2b07      	cmp	r3, #7
 8002f84:	d807      	bhi.n	8002f96 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	6a39      	ldr	r1, [r7, #32]
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7ff ff21 	bl	8002dd6 <LL_GPIO_SetAFPin_0_7>
 8002f94:	e006      	b.n	8002fa4 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	6a39      	ldr	r1, [r7, #32]
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff ff56 	bl	8002e50 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	6a39      	ldr	r1, [r7, #32]
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7ff fe43 	bl	8002c38 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1a0      	bne.n	8002f08 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3728      	adds	r7, #40	@ 0x28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002fd4:	4b04      	ldr	r3, [pc, #16]	@ (8002fe8 <LL_RCC_GetSysClkSource+0x18>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 030c 	and.w	r3, r3, #12
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40023800 	.word	0x40023800

08002fec <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002ff0:	4b04      	ldr	r3, [pc, #16]	@ (8003004 <LL_RCC_GetAHBPrescaler+0x18>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	40023800 	.word	0x40023800

08003008 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800300c:	4b04      	ldr	r3, [pc, #16]	@ (8003020 <LL_RCC_GetAPB1Prescaler+0x18>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8003014:	4618      	mov	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	40023800 	.word	0x40023800

08003024 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003028:	4b04      	ldr	r3, [pc, #16]	@ (800303c <LL_RCC_GetAPB2Prescaler+0x18>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003030:	4618      	mov	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40023800 	.word	0x40023800

08003040 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003044:	4b04      	ldr	r3, [pc, #16]	@ (8003058 <LL_RCC_PLL_GetMainSource+0x18>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 800304c:	4618      	mov	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40023800 	.word	0x40023800

0800305c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003060:	4b04      	ldr	r3, [pc, #16]	@ (8003074 <LL_RCC_PLL_GetN+0x18>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	099b      	lsrs	r3, r3, #6
 8003066:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800306a:	4618      	mov	r0, r3
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	40023800 	.word	0x40023800

08003078 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800307c:	4b04      	ldr	r3, [pc, #16]	@ (8003090 <LL_RCC_PLL_GetP+0x18>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003084:	4618      	mov	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	40023800 	.word	0x40023800

08003094 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003098:	4b04      	ldr	r3, [pc, #16]	@ (80030ac <LL_RCC_PLL_GetR+0x18>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	40023800 	.word	0x40023800

080030b0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80030b4:	4b04      	ldr	r3, [pc, #16]	@ (80030c8 <LL_RCC_PLL_GetDivider+0x18>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80030bc:	4618      	mov	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40023800 	.word	0x40023800

080030cc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80030d4:	f000 f820 	bl	8003118 <RCC_GetSystemClockFreq>
 80030d8:	4602      	mov	r2, r0
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 f85a 	bl	800319c <RCC_GetHCLKClockFreq>
 80030e8:	4602      	mov	r2, r0
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 f868 	bl	80031c8 <RCC_GetPCLK1ClockFreq>
 80030f8:	4602      	mov	r2, r0
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	4618      	mov	r0, r3
 8003104:	f000 f874 	bl	80031f0 <RCC_GetPCLK2ClockFreq>
 8003108:	4602      	mov	r2, r0
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	60da      	str	r2, [r3, #12]
}
 800310e:	bf00      	nop
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003122:	f7ff ff55 	bl	8002fd0 <LL_RCC_GetSysClkSource>
 8003126:	4603      	mov	r3, r0
 8003128:	2b0c      	cmp	r3, #12
 800312a:	d82d      	bhi.n	8003188 <RCC_GetSystemClockFreq+0x70>
 800312c:	a201      	add	r2, pc, #4	@ (adr r2, 8003134 <RCC_GetSystemClockFreq+0x1c>)
 800312e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003132:	bf00      	nop
 8003134:	08003169 	.word	0x08003169
 8003138:	08003189 	.word	0x08003189
 800313c:	08003189 	.word	0x08003189
 8003140:	08003189 	.word	0x08003189
 8003144:	0800316f 	.word	0x0800316f
 8003148:	08003189 	.word	0x08003189
 800314c:	08003189 	.word	0x08003189
 8003150:	08003189 	.word	0x08003189
 8003154:	08003175 	.word	0x08003175
 8003158:	08003189 	.word	0x08003189
 800315c:	08003189 	.word	0x08003189
 8003160:	08003189 	.word	0x08003189
 8003164:	0800317f 	.word	0x0800317f
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003168:	4b0b      	ldr	r3, [pc, #44]	@ (8003198 <RCC_GetSystemClockFreq+0x80>)
 800316a:	607b      	str	r3, [r7, #4]
      break;
 800316c:	e00f      	b.n	800318e <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800316e:	4b0a      	ldr	r3, [pc, #40]	@ (8003198 <RCC_GetSystemClockFreq+0x80>)
 8003170:	607b      	str	r3, [r7, #4]
      break;
 8003172:	e00c      	b.n	800318e <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003174:	2008      	movs	r0, #8
 8003176:	f000 f84f 	bl	8003218 <RCC_PLL_GetFreqDomain_SYS>
 800317a:	6078      	str	r0, [r7, #4]
      break;
 800317c:	e007      	b.n	800318e <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 800317e:	200c      	movs	r0, #12
 8003180:	f000 f84a 	bl	8003218 <RCC_PLL_GetFreqDomain_SYS>
 8003184:	6078      	str	r0, [r7, #4]
      break;
 8003186:	e002      	b.n	800318e <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003188:	4b03      	ldr	r3, [pc, #12]	@ (8003198 <RCC_GetSystemClockFreq+0x80>)
 800318a:	607b      	str	r3, [r7, #4]
      break;
 800318c:	bf00      	nop
  }

  return frequency;
 800318e:	687b      	ldr	r3, [r7, #4]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	00f42400 	.word	0x00f42400

0800319c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80031a4:	f7ff ff22 	bl	8002fec <LL_RCC_GetAHBPrescaler>
 80031a8:	4603      	mov	r3, r0
 80031aa:	091b      	lsrs	r3, r3, #4
 80031ac:	f003 030f 	and.w	r3, r3, #15
 80031b0:	4a04      	ldr	r2, [pc, #16]	@ (80031c4 <RCC_GetHCLKClockFreq+0x28>)
 80031b2:	5cd3      	ldrb	r3, [r2, r3]
 80031b4:	461a      	mov	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	40d3      	lsrs	r3, r2
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	08003908 	.word	0x08003908

080031c8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80031d0:	f7ff ff1a 	bl	8003008 <LL_RCC_GetAPB1Prescaler>
 80031d4:	4603      	mov	r3, r0
 80031d6:	0a9b      	lsrs	r3, r3, #10
 80031d8:	4a04      	ldr	r2, [pc, #16]	@ (80031ec <RCC_GetPCLK1ClockFreq+0x24>)
 80031da:	5cd3      	ldrb	r3, [r2, r3]
 80031dc:	461a      	mov	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	40d3      	lsrs	r3, r2
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	08003918 	.word	0x08003918

080031f0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80031f8:	f7ff ff14 	bl	8003024 <LL_RCC_GetAPB2Prescaler>
 80031fc:	4603      	mov	r3, r0
 80031fe:	0b5b      	lsrs	r3, r3, #13
 8003200:	4a04      	ldr	r2, [pc, #16]	@ (8003214 <RCC_GetPCLK2ClockFreq+0x24>)
 8003202:	5cd3      	ldrb	r3, [r2, r3]
 8003204:	461a      	mov	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	40d3      	lsrs	r3, r2
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	08003918 	.word	0x08003918

08003218 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003218:	b590      	push	{r4, r7, lr}
 800321a:	b087      	sub	sp, #28
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	2300      	movs	r3, #0
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	2300      	movs	r3, #0
 800322a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800322c:	f7ff ff08 	bl	8003040 <LL_RCC_PLL_GetMainSource>
 8003230:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d004      	beq.n	8003242 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800323e:	d003      	beq.n	8003248 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003240:	e005      	b.n	800324e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003242:	4b1c      	ldr	r3, [pc, #112]	@ (80032b4 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8003244:	617b      	str	r3, [r7, #20]
      break;
 8003246:	e005      	b.n	8003254 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003248:	4b1a      	ldr	r3, [pc, #104]	@ (80032b4 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 800324a:	617b      	str	r3, [r7, #20]
      break;
 800324c:	e002      	b.n	8003254 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800324e:	4b19      	ldr	r3, [pc, #100]	@ (80032b4 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8003250:	617b      	str	r3, [r7, #20]
      break;
 8003252:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b08      	cmp	r3, #8
 8003258:	d114      	bne.n	8003284 <RCC_PLL_GetFreqDomain_SYS+0x6c>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800325a:	f7ff ff29 	bl	80030b0 <LL_RCC_PLL_GetDivider>
 800325e:	4602      	mov	r2, r0
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	fbb3 f4f2 	udiv	r4, r3, r2
 8003266:	f7ff fef9 	bl	800305c <LL_RCC_PLL_GetN>
 800326a:	4603      	mov	r3, r0
 800326c:	fb03 f404 	mul.w	r4, r3, r4
 8003270:	f7ff ff02 	bl	8003078 <LL_RCC_PLL_GetP>
 8003274:	4603      	mov	r3, r0
 8003276:	0c1b      	lsrs	r3, r3, #16
 8003278:	3301      	adds	r3, #1
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	fbb4 f3f3 	udiv	r3, r4, r3
 8003280:	613b      	str	r3, [r7, #16]
 8003282:	e011      	b.n	80032a8 <RCC_PLL_GetFreqDomain_SYS+0x90>
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003284:	f7ff ff14 	bl	80030b0 <LL_RCC_PLL_GetDivider>
 8003288:	4602      	mov	r2, r0
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	fbb3 f4f2 	udiv	r4, r3, r2
 8003290:	f7ff fee4 	bl	800305c <LL_RCC_PLL_GetN>
 8003294:	4603      	mov	r3, r0
 8003296:	fb03 f404 	mul.w	r4, r3, r4
 800329a:	f7ff fefb 	bl	8003094 <LL_RCC_PLL_GetR>
 800329e:	4603      	mov	r3, r0
 80032a0:	0f1b      	lsrs	r3, r3, #28
 80032a2:	fbb4 f3f3 	udiv	r3, r4, r3
 80032a6:	613b      	str	r3, [r7, #16]
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80032a8:	693b      	ldr	r3, [r7, #16]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	371c      	adds	r7, #28
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd90      	pop	{r4, r7, pc}
 80032b2:	bf00      	nop
 80032b4:	00f42400 	.word	0x00f42400

080032b8 <LL_USART_IsEnabled>:
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032cc:	bf0c      	ite	eq
 80032ce:	2301      	moveq	r3, #1
 80032d0:	2300      	movne	r3, #0
 80032d2:	b2db      	uxtb	r3, r3
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <LL_USART_SetStopBitsLength>:
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	431a      	orrs	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	611a      	str	r2, [r3, #16]
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <LL_USART_SetHWFlowCtrl>:
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	615a      	str	r2, [r3, #20]
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <LL_USART_SetBaudRate>:
{
 800332c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003330:	b0c0      	sub	sp, #256	@ 0x100
 8003332:	af00      	add	r7, sp, #0
 8003334:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003338:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 800333c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8003340:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003348:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800334c:	f040 810c 	bne.w	8003568 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003350:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003354:	2200      	movs	r2, #0
 8003356:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800335a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800335e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003362:	4622      	mov	r2, r4
 8003364:	462b      	mov	r3, r5
 8003366:	1891      	adds	r1, r2, r2
 8003368:	6639      	str	r1, [r7, #96]	@ 0x60
 800336a:	415b      	adcs	r3, r3
 800336c:	667b      	str	r3, [r7, #100]	@ 0x64
 800336e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8003372:	4621      	mov	r1, r4
 8003374:	eb12 0801 	adds.w	r8, r2, r1
 8003378:	4629      	mov	r1, r5
 800337a:	eb43 0901 	adc.w	r9, r3, r1
 800337e:	f04f 0200 	mov.w	r2, #0
 8003382:	f04f 0300 	mov.w	r3, #0
 8003386:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800338a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800338e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003392:	4690      	mov	r8, r2
 8003394:	4699      	mov	r9, r3
 8003396:	4623      	mov	r3, r4
 8003398:	eb18 0303 	adds.w	r3, r8, r3
 800339c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80033a0:	462b      	mov	r3, r5
 80033a2:	eb49 0303 	adc.w	r3, r9, r3
 80033a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80033aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80033ae:	2200      	movs	r2, #0
 80033b0:	469a      	mov	sl, r3
 80033b2:	4693      	mov	fp, r2
 80033b4:	eb1a 030a 	adds.w	r3, sl, sl
 80033b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80033ba:	eb4b 030b 	adc.w	r3, fp, fp
 80033be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80033c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80033c8:	f7fc ff1c 	bl	8000204 <__aeabi_uldivmod>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4b64      	ldr	r3, [pc, #400]	@ (8003564 <LL_USART_SetBaudRate+0x238>)
 80033d2:	fba3 2302 	umull	r2, r3, r3, r2
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	b29b      	uxth	r3, r3
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	b29c      	uxth	r4, r3
 80033de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80033e2:	2200      	movs	r2, #0
 80033e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80033e8:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80033ec:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 80033f0:	4642      	mov	r2, r8
 80033f2:	464b      	mov	r3, r9
 80033f4:	1891      	adds	r1, r2, r2
 80033f6:	6539      	str	r1, [r7, #80]	@ 0x50
 80033f8:	415b      	adcs	r3, r3
 80033fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80033fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003400:	4641      	mov	r1, r8
 8003402:	1851      	adds	r1, r2, r1
 8003404:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003406:	4649      	mov	r1, r9
 8003408:	414b      	adcs	r3, r1
 800340a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8003418:	4659      	mov	r1, fp
 800341a:	00cb      	lsls	r3, r1, #3
 800341c:	4651      	mov	r1, sl
 800341e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003422:	4651      	mov	r1, sl
 8003424:	00ca      	lsls	r2, r1, #3
 8003426:	4610      	mov	r0, r2
 8003428:	4619      	mov	r1, r3
 800342a:	4603      	mov	r3, r0
 800342c:	4642      	mov	r2, r8
 800342e:	189b      	adds	r3, r3, r2
 8003430:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003434:	464b      	mov	r3, r9
 8003436:	460a      	mov	r2, r1
 8003438:	eb42 0303 	adc.w	r3, r2, r3
 800343c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003440:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003444:	2200      	movs	r2, #0
 8003446:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800344a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800344e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003452:	460b      	mov	r3, r1
 8003454:	18db      	adds	r3, r3, r3
 8003456:	643b      	str	r3, [r7, #64]	@ 0x40
 8003458:	4613      	mov	r3, r2
 800345a:	eb42 0303 	adc.w	r3, r2, r3
 800345e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003460:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003464:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8003468:	f7fc fecc 	bl	8000204 <__aeabi_uldivmod>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4611      	mov	r1, r2
 8003472:	4b3c      	ldr	r3, [pc, #240]	@ (8003564 <LL_USART_SetBaudRate+0x238>)
 8003474:	fba3 2301 	umull	r2, r3, r3, r1
 8003478:	095b      	lsrs	r3, r3, #5
 800347a:	2264      	movs	r2, #100	@ 0x64
 800347c:	fb02 f303 	mul.w	r3, r2, r3
 8003480:	1acb      	subs	r3, r1, r3
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003488:	4b36      	ldr	r3, [pc, #216]	@ (8003564 <LL_USART_SetBaudRate+0x238>)
 800348a:	fba3 2302 	umull	r2, r3, r3, r2
 800348e:	095b      	lsrs	r3, r3, #5
 8003490:	b29b      	uxth	r3, r3
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	b29b      	uxth	r3, r3
 8003496:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800349a:	b29b      	uxth	r3, r3
 800349c:	4423      	add	r3, r4
 800349e:	b29c      	uxth	r4, r3
 80034a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80034a4:	2200      	movs	r2, #0
 80034a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034aa:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80034ae:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 80034b2:	4642      	mov	r2, r8
 80034b4:	464b      	mov	r3, r9
 80034b6:	1891      	adds	r1, r2, r2
 80034b8:	63b9      	str	r1, [r7, #56]	@ 0x38
 80034ba:	415b      	adcs	r3, r3
 80034bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034be:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80034c2:	4641      	mov	r1, r8
 80034c4:	1851      	adds	r1, r2, r1
 80034c6:	6339      	str	r1, [r7, #48]	@ 0x30
 80034c8:	4649      	mov	r1, r9
 80034ca:	414b      	adcs	r3, r1
 80034cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	f04f 0300 	mov.w	r3, #0
 80034d6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80034da:	4659      	mov	r1, fp
 80034dc:	00cb      	lsls	r3, r1, #3
 80034de:	4651      	mov	r1, sl
 80034e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034e4:	4651      	mov	r1, sl
 80034e6:	00ca      	lsls	r2, r1, #3
 80034e8:	4610      	mov	r0, r2
 80034ea:	4619      	mov	r1, r3
 80034ec:	4603      	mov	r3, r0
 80034ee:	4642      	mov	r2, r8
 80034f0:	189b      	adds	r3, r3, r2
 80034f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034f6:	464b      	mov	r3, r9
 80034f8:	460a      	mov	r2, r1
 80034fa:	eb42 0303 	adc.w	r3, r2, r3
 80034fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003502:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003506:	2200      	movs	r2, #0
 8003508:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800350c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8003510:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003514:	460b      	mov	r3, r1
 8003516:	18db      	adds	r3, r3, r3
 8003518:	62bb      	str	r3, [r7, #40]	@ 0x28
 800351a:	4613      	mov	r3, r2
 800351c:	eb42 0303 	adc.w	r3, r2, r3
 8003520:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003522:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003526:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800352a:	f7fc fe6b 	bl	8000204 <__aeabi_uldivmod>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4b0c      	ldr	r3, [pc, #48]	@ (8003564 <LL_USART_SetBaudRate+0x238>)
 8003534:	fba3 1302 	umull	r1, r3, r3, r2
 8003538:	095b      	lsrs	r3, r3, #5
 800353a:	2164      	movs	r1, #100	@ 0x64
 800353c:	fb01 f303 	mul.w	r3, r1, r3
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	3332      	adds	r3, #50	@ 0x32
 8003546:	4a07      	ldr	r2, [pc, #28]	@ (8003564 <LL_USART_SetBaudRate+0x238>)
 8003548:	fba2 2303 	umull	r2, r3, r2, r3
 800354c:	095b      	lsrs	r3, r3, #5
 800354e:	b29b      	uxth	r3, r3
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	b29b      	uxth	r3, r3
 8003556:	4423      	add	r3, r4
 8003558:	b29b      	uxth	r3, r3
 800355a:	461a      	mov	r2, r3
 800355c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003560:	609a      	str	r2, [r3, #8]
}
 8003562:	e108      	b.n	8003776 <LL_USART_SetBaudRate+0x44a>
 8003564:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003568:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800356c:	2200      	movs	r2, #0
 800356e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003572:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003576:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800357a:	4642      	mov	r2, r8
 800357c:	464b      	mov	r3, r9
 800357e:	1891      	adds	r1, r2, r2
 8003580:	6239      	str	r1, [r7, #32]
 8003582:	415b      	adcs	r3, r3
 8003584:	627b      	str	r3, [r7, #36]	@ 0x24
 8003586:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800358a:	4641      	mov	r1, r8
 800358c:	1854      	adds	r4, r2, r1
 800358e:	4649      	mov	r1, r9
 8003590:	eb43 0501 	adc.w	r5, r3, r1
 8003594:	f04f 0200 	mov.w	r2, #0
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	00eb      	lsls	r3, r5, #3
 800359e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035a2:	00e2      	lsls	r2, r4, #3
 80035a4:	4614      	mov	r4, r2
 80035a6:	461d      	mov	r5, r3
 80035a8:	4643      	mov	r3, r8
 80035aa:	18e3      	adds	r3, r4, r3
 80035ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80035b0:	464b      	mov	r3, r9
 80035b2:	eb45 0303 	adc.w	r3, r5, r3
 80035b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80035ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80035be:	2200      	movs	r2, #0
 80035c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80035c4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80035d4:	4629      	mov	r1, r5
 80035d6:	008b      	lsls	r3, r1, #2
 80035d8:	4621      	mov	r1, r4
 80035da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035de:	4621      	mov	r1, r4
 80035e0:	008a      	lsls	r2, r1, #2
 80035e2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80035e6:	f7fc fe0d 	bl	8000204 <__aeabi_uldivmod>
 80035ea:	4602      	mov	r2, r0
 80035ec:	460b      	mov	r3, r1
 80035ee:	4b65      	ldr	r3, [pc, #404]	@ (8003784 <LL_USART_SetBaudRate+0x458>)
 80035f0:	fba3 2302 	umull	r2, r3, r3, r2
 80035f4:	095b      	lsrs	r3, r3, #5
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	011b      	lsls	r3, r3, #4
 80035fa:	b29c      	uxth	r4, r3
 80035fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003600:	2200      	movs	r2, #0
 8003602:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003606:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800360a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800360e:	4642      	mov	r2, r8
 8003610:	464b      	mov	r3, r9
 8003612:	1891      	adds	r1, r2, r2
 8003614:	61b9      	str	r1, [r7, #24]
 8003616:	415b      	adcs	r3, r3
 8003618:	61fb      	str	r3, [r7, #28]
 800361a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800361e:	4641      	mov	r1, r8
 8003620:	1851      	adds	r1, r2, r1
 8003622:	6139      	str	r1, [r7, #16]
 8003624:	4649      	mov	r1, r9
 8003626:	414b      	adcs	r3, r1
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003636:	4659      	mov	r1, fp
 8003638:	00cb      	lsls	r3, r1, #3
 800363a:	4651      	mov	r1, sl
 800363c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003640:	4651      	mov	r1, sl
 8003642:	00ca      	lsls	r2, r1, #3
 8003644:	4610      	mov	r0, r2
 8003646:	4619      	mov	r1, r3
 8003648:	4603      	mov	r3, r0
 800364a:	4642      	mov	r2, r8
 800364c:	189b      	adds	r3, r3, r2
 800364e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003652:	464b      	mov	r3, r9
 8003654:	460a      	mov	r2, r1
 8003656:	eb42 0303 	adc.w	r3, r2, r3
 800365a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800365e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003662:	2200      	movs	r2, #0
 8003664:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003668:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8003678:	4649      	mov	r1, r9
 800367a:	008b      	lsls	r3, r1, #2
 800367c:	4641      	mov	r1, r8
 800367e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003682:	4641      	mov	r1, r8
 8003684:	008a      	lsls	r2, r1, #2
 8003686:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800368a:	f7fc fdbb 	bl	8000204 <__aeabi_uldivmod>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	4611      	mov	r1, r2
 8003694:	4b3b      	ldr	r3, [pc, #236]	@ (8003784 <LL_USART_SetBaudRate+0x458>)
 8003696:	fba3 2301 	umull	r2, r3, r3, r1
 800369a:	095b      	lsrs	r3, r3, #5
 800369c:	2264      	movs	r2, #100	@ 0x64
 800369e:	fb02 f303 	mul.w	r3, r2, r3
 80036a2:	1acb      	subs	r3, r1, r3
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	3332      	adds	r3, #50	@ 0x32
 80036a8:	4a36      	ldr	r2, [pc, #216]	@ (8003784 <LL_USART_SetBaudRate+0x458>)
 80036aa:	fba2 2303 	umull	r2, r3, r2, r3
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	4423      	add	r3, r4
 80036ba:	b29c      	uxth	r4, r3
 80036bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80036c0:	2200      	movs	r2, #0
 80036c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80036c4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80036c6:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80036ca:	4642      	mov	r2, r8
 80036cc:	464b      	mov	r3, r9
 80036ce:	1891      	adds	r1, r2, r2
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	415b      	adcs	r3, r3
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036da:	4641      	mov	r1, r8
 80036dc:	1851      	adds	r1, r2, r1
 80036de:	6039      	str	r1, [r7, #0]
 80036e0:	4649      	mov	r1, r9
 80036e2:	414b      	adcs	r3, r1
 80036e4:	607b      	str	r3, [r7, #4]
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036f2:	4659      	mov	r1, fp
 80036f4:	00cb      	lsls	r3, r1, #3
 80036f6:	4651      	mov	r1, sl
 80036f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036fc:	4651      	mov	r1, sl
 80036fe:	00ca      	lsls	r2, r1, #3
 8003700:	4610      	mov	r0, r2
 8003702:	4619      	mov	r1, r3
 8003704:	4603      	mov	r3, r0
 8003706:	4642      	mov	r2, r8
 8003708:	189b      	adds	r3, r3, r2
 800370a:	673b      	str	r3, [r7, #112]	@ 0x70
 800370c:	464b      	mov	r3, r9
 800370e:	460a      	mov	r2, r1
 8003710:	eb42 0303 	adc.w	r3, r2, r3
 8003714:	677b      	str	r3, [r7, #116]	@ 0x74
 8003716:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800371a:	2200      	movs	r2, #0
 800371c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800371e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003720:	f04f 0200 	mov.w	r2, #0
 8003724:	f04f 0300 	mov.w	r3, #0
 8003728:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 800372c:	4649      	mov	r1, r9
 800372e:	008b      	lsls	r3, r1, #2
 8003730:	4641      	mov	r1, r8
 8003732:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003736:	4641      	mov	r1, r8
 8003738:	008a      	lsls	r2, r1, #2
 800373a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800373e:	f7fc fd61 	bl	8000204 <__aeabi_uldivmod>
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	4b0f      	ldr	r3, [pc, #60]	@ (8003784 <LL_USART_SetBaudRate+0x458>)
 8003748:	fba3 1302 	umull	r1, r3, r3, r2
 800374c:	095b      	lsrs	r3, r3, #5
 800374e:	2164      	movs	r1, #100	@ 0x64
 8003750:	fb01 f303 	mul.w	r3, r1, r3
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	3332      	adds	r3, #50	@ 0x32
 800375a:	4a0a      	ldr	r2, [pc, #40]	@ (8003784 <LL_USART_SetBaudRate+0x458>)
 800375c:	fba2 2303 	umull	r2, r3, r2, r3
 8003760:	095b      	lsrs	r3, r3, #5
 8003762:	b29b      	uxth	r3, r3
 8003764:	f003 030f 	and.w	r3, r3, #15
 8003768:	b29b      	uxth	r3, r3
 800376a:	4423      	add	r3, r4
 800376c:	b29b      	uxth	r3, r3
 800376e:	461a      	mov	r2, r3
 8003770:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003774:	609a      	str	r2, [r3, #8]
}
 8003776:	bf00      	nop
 8003778:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800377c:	46bd      	mov	sp, r7
 800377e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003782:	bf00      	nop
 8003784:	51eb851f 	.word	0x51eb851f

08003788 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b088      	sub	sp, #32
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003796:	2300      	movs	r3, #0
 8003798:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7ff fd8c 	bl	80032b8 <LL_USART_IsEnabled>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d15e      	bne.n	8003864 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80037ae:	f023 030c 	bic.w	r3, r3, #12
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	6851      	ldr	r1, [r2, #4]
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	68d2      	ldr	r2, [r2, #12]
 80037ba:	4311      	orrs	r1, r2
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	6912      	ldr	r2, [r2, #16]
 80037c0:	4311      	orrs	r1, r2
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	6992      	ldr	r2, [r2, #24]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	431a      	orrs	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	4619      	mov	r1, r3
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7ff fd83 	bl	80032e0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	4619      	mov	r1, r3
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff fd90 	bl	8003306 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80037e6:	f107 0308 	add.w	r3, r7, #8
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff fc6e 	bl	80030cc <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a1f      	ldr	r2, [pc, #124]	@ (8003870 <LL_USART_Init+0xe8>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d102      	bne.n	80037fe <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	61bb      	str	r3, [r7, #24]
 80037fc:	e021      	b.n	8003842 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a1c      	ldr	r2, [pc, #112]	@ (8003874 <LL_USART_Init+0xec>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d102      	bne.n	800380c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	61bb      	str	r3, [r7, #24]
 800380a:	e01a      	b.n	8003842 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a1a      	ldr	r2, [pc, #104]	@ (8003878 <LL_USART_Init+0xf0>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d102      	bne.n	800381a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	61bb      	str	r3, [r7, #24]
 8003818:	e013      	b.n	8003842 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a17      	ldr	r2, [pc, #92]	@ (800387c <LL_USART_Init+0xf4>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d102      	bne.n	8003828 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	61bb      	str	r3, [r7, #24]
 8003826:	e00c      	b.n	8003842 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a15      	ldr	r2, [pc, #84]	@ (8003880 <LL_USART_Init+0xf8>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d102      	bne.n	8003836 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	61bb      	str	r3, [r7, #24]
 8003834:	e005      	b.n	8003842 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a12      	ldr	r2, [pc, #72]	@ (8003884 <LL_USART_Init+0xfc>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d101      	bne.n	8003842 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00d      	beq.n	8003864 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d009      	beq.n	8003864 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8003850:	2300      	movs	r3, #0
 8003852:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800385c:	69b9      	ldr	r1, [r7, #24]
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7ff fd64 	bl	800332c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003864:	7ffb      	ldrb	r3, [r7, #31]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3720      	adds	r7, #32
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40011000 	.word	0x40011000
 8003874:	40004400 	.word	0x40004400
 8003878:	40004800 	.word	0x40004800
 800387c:	40011400 	.word	0x40011400
 8003880:	40004c00 	.word	0x40004c00
 8003884:	40005000 	.word	0x40005000

08003888 <memset>:
 8003888:	4402      	add	r2, r0
 800388a:	4603      	mov	r3, r0
 800388c:	4293      	cmp	r3, r2
 800388e:	d100      	bne.n	8003892 <memset+0xa>
 8003890:	4770      	bx	lr
 8003892:	f803 1b01 	strb.w	r1, [r3], #1
 8003896:	e7f9      	b.n	800388c <memset+0x4>

08003898 <__libc_init_array>:
 8003898:	b570      	push	{r4, r5, r6, lr}
 800389a:	4d0d      	ldr	r5, [pc, #52]	@ (80038d0 <__libc_init_array+0x38>)
 800389c:	4c0d      	ldr	r4, [pc, #52]	@ (80038d4 <__libc_init_array+0x3c>)
 800389e:	1b64      	subs	r4, r4, r5
 80038a0:	10a4      	asrs	r4, r4, #2
 80038a2:	2600      	movs	r6, #0
 80038a4:	42a6      	cmp	r6, r4
 80038a6:	d109      	bne.n	80038bc <__libc_init_array+0x24>
 80038a8:	4d0b      	ldr	r5, [pc, #44]	@ (80038d8 <__libc_init_array+0x40>)
 80038aa:	4c0c      	ldr	r4, [pc, #48]	@ (80038dc <__libc_init_array+0x44>)
 80038ac:	f000 f818 	bl	80038e0 <_init>
 80038b0:	1b64      	subs	r4, r4, r5
 80038b2:	10a4      	asrs	r4, r4, #2
 80038b4:	2600      	movs	r6, #0
 80038b6:	42a6      	cmp	r6, r4
 80038b8:	d105      	bne.n	80038c6 <__libc_init_array+0x2e>
 80038ba:	bd70      	pop	{r4, r5, r6, pc}
 80038bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80038c0:	4798      	blx	r3
 80038c2:	3601      	adds	r6, #1
 80038c4:	e7ee      	b.n	80038a4 <__libc_init_array+0xc>
 80038c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ca:	4798      	blx	r3
 80038cc:	3601      	adds	r6, #1
 80038ce:	e7f2      	b.n	80038b6 <__libc_init_array+0x1e>
 80038d0:	08003930 	.word	0x08003930
 80038d4:	08003930 	.word	0x08003930
 80038d8:	08003930 	.word	0x08003930
 80038dc:	08003934 	.word	0x08003934

080038e0 <_init>:
 80038e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e2:	bf00      	nop
 80038e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038e6:	bc08      	pop	{r3}
 80038e8:	469e      	mov	lr, r3
 80038ea:	4770      	bx	lr

080038ec <_fini>:
 80038ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ee:	bf00      	nop
 80038f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038f2:	bc08      	pop	{r3}
 80038f4:	469e      	mov	lr, r3
 80038f6:	4770      	bx	lr
