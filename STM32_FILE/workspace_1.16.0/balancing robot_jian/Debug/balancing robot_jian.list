
balancing robot_jian.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e40  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08007008  08007008  00008008  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070b0  080070b0  0000908c  2**0
                  CONTENTS
  4 .ARM          00000008  080070b0  080070b0  000080b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070b8  080070b8  0000908c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070b8  080070b8  000080b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070bc  080070bc  000080bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  080070c0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  2000008c  0800714c  0000908c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  0800714c  00009460  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113ff  00000000  00000000  000090bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c65  00000000  00000000  0001a4bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  0001d120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb2  00000000  00000000  0001e168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024040  00000000  00000000  0001ee1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000162c9  00000000  00000000  00042e5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dded5  00000000  00000000  00059123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136ff8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004938  00000000  00000000  0013703c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0013b974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000008c 	.word	0x2000008c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006ff0 	.word	0x08006ff0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000090 	.word	0x20000090
 8000204:	08006ff0 	.word	0x08006ff0

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2f>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000abc:	bf24      	itt	cs
 8000abe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ac2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ac6:	d90d      	bls.n	8000ae4 <__aeabi_d2f+0x30>
 8000ac8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000acc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ad8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000adc:	bf08      	it	eq
 8000ade:	f020 0001 	biceq.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ae8:	d121      	bne.n	8000b2e <__aeabi_d2f+0x7a>
 8000aea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aee:	bfbc      	itt	lt
 8000af0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af4:	4770      	bxlt	lr
 8000af6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000afa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afe:	f1c2 0218 	rsb	r2, r2, #24
 8000b02:	f1c2 0c20 	rsb	ip, r2, #32
 8000b06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0e:	bf18      	it	ne
 8000b10:	f040 0001 	orrne.w	r0, r0, #1
 8000b14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b20:	ea40 000c 	orr.w	r0, r0, ip
 8000b24:	fa23 f302 	lsr.w	r3, r3, r2
 8000b28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b2c:	e7cc      	b.n	8000ac8 <__aeabi_d2f+0x14>
 8000b2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b32:	d107      	bne.n	8000b44 <__aeabi_d2f+0x90>
 8000b34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b38:	bf1e      	ittt	ne
 8000b3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b42:	4770      	bxne	lr
 8000b44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop

08000b54 <__aeabi_uldivmod>:
 8000b54:	b953      	cbnz	r3, 8000b6c <__aeabi_uldivmod+0x18>
 8000b56:	b94a      	cbnz	r2, 8000b6c <__aeabi_uldivmod+0x18>
 8000b58:	2900      	cmp	r1, #0
 8000b5a:	bf08      	it	eq
 8000b5c:	2800      	cmpeq	r0, #0
 8000b5e:	bf1c      	itt	ne
 8000b60:	f04f 31ff 	movne.w	r1, #4294967295
 8000b64:	f04f 30ff 	movne.w	r0, #4294967295
 8000b68:	f000 b96a 	b.w	8000e40 <__aeabi_idiv0>
 8000b6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b74:	f000 f806 	bl	8000b84 <__udivmoddi4>
 8000b78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b80:	b004      	add	sp, #16
 8000b82:	4770      	bx	lr

08000b84 <__udivmoddi4>:
 8000b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b88:	9d08      	ldr	r5, [sp, #32]
 8000b8a:	460c      	mov	r4, r1
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d14e      	bne.n	8000c2e <__udivmoddi4+0xaa>
 8000b90:	4694      	mov	ip, r2
 8000b92:	458c      	cmp	ip, r1
 8000b94:	4686      	mov	lr, r0
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	d962      	bls.n	8000c62 <__udivmoddi4+0xde>
 8000b9c:	b14a      	cbz	r2, 8000bb2 <__udivmoddi4+0x2e>
 8000b9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ba2:	4091      	lsls	r1, r2
 8000ba4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ba8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bac:	4319      	orrs	r1, r3
 8000bae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bb2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb6:	fa1f f68c 	uxth.w	r6, ip
 8000bba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000bc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bca:	fb04 f106 	mul.w	r1, r4, r6
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	d90a      	bls.n	8000be8 <__udivmoddi4+0x64>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bda:	f080 8112 	bcs.w	8000e02 <__udivmoddi4+0x27e>
 8000bde:	4299      	cmp	r1, r3
 8000be0:	f240 810f 	bls.w	8000e02 <__udivmoddi4+0x27e>
 8000be4:	3c02      	subs	r4, #2
 8000be6:	4463      	add	r3, ip
 8000be8:	1a59      	subs	r1, r3, r1
 8000bea:	fa1f f38e 	uxth.w	r3, lr
 8000bee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf2:	fb07 1110 	mls	r1, r7, r0, r1
 8000bf6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfa:	fb00 f606 	mul.w	r6, r0, r6
 8000bfe:	429e      	cmp	r6, r3
 8000c00:	d90a      	bls.n	8000c18 <__udivmoddi4+0x94>
 8000c02:	eb1c 0303 	adds.w	r3, ip, r3
 8000c06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c0a:	f080 80fc 	bcs.w	8000e06 <__udivmoddi4+0x282>
 8000c0e:	429e      	cmp	r6, r3
 8000c10:	f240 80f9 	bls.w	8000e06 <__udivmoddi4+0x282>
 8000c14:	4463      	add	r3, ip
 8000c16:	3802      	subs	r0, #2
 8000c18:	1b9b      	subs	r3, r3, r6
 8000c1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c1e:	2100      	movs	r1, #0
 8000c20:	b11d      	cbz	r5, 8000c2a <__udivmoddi4+0xa6>
 8000c22:	40d3      	lsrs	r3, r2
 8000c24:	2200      	movs	r2, #0
 8000c26:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d905      	bls.n	8000c3e <__udivmoddi4+0xba>
 8000c32:	b10d      	cbz	r5, 8000c38 <__udivmoddi4+0xb4>
 8000c34:	e9c5 0100 	strd	r0, r1, [r5]
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4608      	mov	r0, r1
 8000c3c:	e7f5      	b.n	8000c2a <__udivmoddi4+0xa6>
 8000c3e:	fab3 f183 	clz	r1, r3
 8000c42:	2900      	cmp	r1, #0
 8000c44:	d146      	bne.n	8000cd4 <__udivmoddi4+0x150>
 8000c46:	42a3      	cmp	r3, r4
 8000c48:	d302      	bcc.n	8000c50 <__udivmoddi4+0xcc>
 8000c4a:	4290      	cmp	r0, r2
 8000c4c:	f0c0 80f0 	bcc.w	8000e30 <__udivmoddi4+0x2ac>
 8000c50:	1a86      	subs	r6, r0, r2
 8000c52:	eb64 0303 	sbc.w	r3, r4, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	2d00      	cmp	r5, #0
 8000c5a:	d0e6      	beq.n	8000c2a <__udivmoddi4+0xa6>
 8000c5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c60:	e7e3      	b.n	8000c2a <__udivmoddi4+0xa6>
 8000c62:	2a00      	cmp	r2, #0
 8000c64:	f040 8090 	bne.w	8000d88 <__udivmoddi4+0x204>
 8000c68:	eba1 040c 	sub.w	r4, r1, ip
 8000c6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c70:	fa1f f78c 	uxth.w	r7, ip
 8000c74:	2101      	movs	r1, #1
 8000c76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c86:	fb07 f006 	mul.w	r0, r7, r6
 8000c8a:	4298      	cmp	r0, r3
 8000c8c:	d908      	bls.n	8000ca0 <__udivmoddi4+0x11c>
 8000c8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0x11a>
 8000c98:	4298      	cmp	r0, r3
 8000c9a:	f200 80cd 	bhi.w	8000e38 <__udivmoddi4+0x2b4>
 8000c9e:	4626      	mov	r6, r4
 8000ca0:	1a1c      	subs	r4, r3, r0
 8000ca2:	fa1f f38e 	uxth.w	r3, lr
 8000ca6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000caa:	fb08 4410 	mls	r4, r8, r0, r4
 8000cae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cb2:	fb00 f707 	mul.w	r7, r0, r7
 8000cb6:	429f      	cmp	r7, r3
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x148>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x146>
 8000cc4:	429f      	cmp	r7, r3
 8000cc6:	f200 80b0 	bhi.w	8000e2a <__udivmoddi4+0x2a6>
 8000cca:	4620      	mov	r0, r4
 8000ccc:	1bdb      	subs	r3, r3, r7
 8000cce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd2:	e7a5      	b.n	8000c20 <__udivmoddi4+0x9c>
 8000cd4:	f1c1 0620 	rsb	r6, r1, #32
 8000cd8:	408b      	lsls	r3, r1
 8000cda:	fa22 f706 	lsr.w	r7, r2, r6
 8000cde:	431f      	orrs	r7, r3
 8000ce0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ce8:	ea43 030c 	orr.w	r3, r3, ip
 8000cec:	40f4      	lsrs	r4, r6
 8000cee:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf2:	0c38      	lsrs	r0, r7, #16
 8000cf4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cf8:	fbb4 fef0 	udiv	lr, r4, r0
 8000cfc:	fa1f fc87 	uxth.w	ip, r7
 8000d00:	fb00 441e 	mls	r4, r0, lr, r4
 8000d04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d08:	fb0e f90c 	mul.w	r9, lr, ip
 8000d0c:	45a1      	cmp	r9, r4
 8000d0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x1a6>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d1a:	f080 8084 	bcs.w	8000e26 <__udivmoddi4+0x2a2>
 8000d1e:	45a1      	cmp	r9, r4
 8000d20:	f240 8081 	bls.w	8000e26 <__udivmoddi4+0x2a2>
 8000d24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d28:	443c      	add	r4, r7
 8000d2a:	eba4 0409 	sub.w	r4, r4, r9
 8000d2e:	fa1f f983 	uxth.w	r9, r3
 8000d32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d36:	fb00 4413 	mls	r4, r0, r3, r4
 8000d3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d42:	45a4      	cmp	ip, r4
 8000d44:	d907      	bls.n	8000d56 <__udivmoddi4+0x1d2>
 8000d46:	193c      	adds	r4, r7, r4
 8000d48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d4c:	d267      	bcs.n	8000e1e <__udivmoddi4+0x29a>
 8000d4e:	45a4      	cmp	ip, r4
 8000d50:	d965      	bls.n	8000e1e <__udivmoddi4+0x29a>
 8000d52:	3b02      	subs	r3, #2
 8000d54:	443c      	add	r4, r7
 8000d56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d5e:	eba4 040c 	sub.w	r4, r4, ip
 8000d62:	429c      	cmp	r4, r3
 8000d64:	46ce      	mov	lr, r9
 8000d66:	469c      	mov	ip, r3
 8000d68:	d351      	bcc.n	8000e0e <__udivmoddi4+0x28a>
 8000d6a:	d04e      	beq.n	8000e0a <__udivmoddi4+0x286>
 8000d6c:	b155      	cbz	r5, 8000d84 <__udivmoddi4+0x200>
 8000d6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d72:	eb64 040c 	sbc.w	r4, r4, ip
 8000d76:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7a:	40cb      	lsrs	r3, r1
 8000d7c:	431e      	orrs	r6, r3
 8000d7e:	40cc      	lsrs	r4, r1
 8000d80:	e9c5 6400 	strd	r6, r4, [r5]
 8000d84:	2100      	movs	r1, #0
 8000d86:	e750      	b.n	8000c2a <__udivmoddi4+0xa6>
 8000d88:	f1c2 0320 	rsb	r3, r2, #32
 8000d8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d94:	fa24 f303 	lsr.w	r3, r4, r3
 8000d98:	4094      	lsls	r4, r2
 8000d9a:	430c      	orrs	r4, r1
 8000d9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3110 	mls	r1, r8, r0, r3
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db6:	fb00 f107 	mul.w	r1, r0, r7
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x24c>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dc6:	d22c      	bcs.n	8000e22 <__udivmoddi4+0x29e>
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d92a      	bls.n	8000e22 <__udivmoddi4+0x29e>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	4463      	add	r3, ip
 8000dd0:	1a5b      	subs	r3, r3, r1
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000ddc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de0:	fb01 f307 	mul.w	r3, r1, r7
 8000de4:	42a3      	cmp	r3, r4
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x276>
 8000de8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000df0:	d213      	bcs.n	8000e1a <__udivmoddi4+0x296>
 8000df2:	42a3      	cmp	r3, r4
 8000df4:	d911      	bls.n	8000e1a <__udivmoddi4+0x296>
 8000df6:	3902      	subs	r1, #2
 8000df8:	4464      	add	r4, ip
 8000dfa:	1ae4      	subs	r4, r4, r3
 8000dfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e00:	e739      	b.n	8000c76 <__udivmoddi4+0xf2>
 8000e02:	4604      	mov	r4, r0
 8000e04:	e6f0      	b.n	8000be8 <__udivmoddi4+0x64>
 8000e06:	4608      	mov	r0, r1
 8000e08:	e706      	b.n	8000c18 <__udivmoddi4+0x94>
 8000e0a:	45c8      	cmp	r8, r9
 8000e0c:	d2ae      	bcs.n	8000d6c <__udivmoddi4+0x1e8>
 8000e0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e16:	3801      	subs	r0, #1
 8000e18:	e7a8      	b.n	8000d6c <__udivmoddi4+0x1e8>
 8000e1a:	4631      	mov	r1, r6
 8000e1c:	e7ed      	b.n	8000dfa <__udivmoddi4+0x276>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	e799      	b.n	8000d56 <__udivmoddi4+0x1d2>
 8000e22:	4630      	mov	r0, r6
 8000e24:	e7d4      	b.n	8000dd0 <__udivmoddi4+0x24c>
 8000e26:	46d6      	mov	lr, sl
 8000e28:	e77f      	b.n	8000d2a <__udivmoddi4+0x1a6>
 8000e2a:	4463      	add	r3, ip
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	e74d      	b.n	8000ccc <__udivmoddi4+0x148>
 8000e30:	4606      	mov	r6, r0
 8000e32:	4623      	mov	r3, r4
 8000e34:	4608      	mov	r0, r1
 8000e36:	e70f      	b.n	8000c58 <__udivmoddi4+0xd4>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	e730      	b.n	8000ca0 <__udivmoddi4+0x11c>
 8000e3e:	bf00      	nop

08000e40 <__aeabi_idiv0>:
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop

08000e44 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e56:	4b33      	ldr	r3, [pc, #204]	@ (8000f24 <MX_ADC1_Init+0xe0>)
 8000e58:	4a33      	ldr	r2, [pc, #204]	@ (8000f28 <MX_ADC1_Init+0xe4>)
 8000e5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e5c:	4b31      	ldr	r3, [pc, #196]	@ (8000f24 <MX_ADC1_Init+0xe0>)
 8000e5e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e64:	4b2f      	ldr	r3, [pc, #188]	@ (8000f24 <MX_ADC1_Init+0xe0>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e6a:	4b2e      	ldr	r3, [pc, #184]	@ (8000f24 <MX_ADC1_Init+0xe0>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e70:	4b2c      	ldr	r3, [pc, #176]	@ (8000f24 <MX_ADC1_Init+0xe0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e76:	4b2b      	ldr	r3, [pc, #172]	@ (8000f24 <MX_ADC1_Init+0xe0>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e7e:	4b29      	ldr	r3, [pc, #164]	@ (8000f24 <MX_ADC1_Init+0xe0>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e84:	4b27      	ldr	r3, [pc, #156]	@ (8000f24 <MX_ADC1_Init+0xe0>)
 8000e86:	4a29      	ldr	r2, [pc, #164]	@ (8000f2c <MX_ADC1_Init+0xe8>)
 8000e88:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e8a:	4b26      	ldr	r3, [pc, #152]	@ (8000f24 <MX_ADC1_Init+0xe0>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000e90:	4b24      	ldr	r3, [pc, #144]	@ (8000f24 <MX_ADC1_Init+0xe0>)
 8000e92:	2204      	movs	r2, #4
 8000e94:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e96:	4b23      	ldr	r3, [pc, #140]	@ (8000f24 <MX_ADC1_Init+0xe0>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e9e:	4b21      	ldr	r3, [pc, #132]	@ (8000f24 <MX_ADC1_Init+0xe0>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ea4:	481f      	ldr	r0, [pc, #124]	@ (8000f24 <MX_ADC1_Init+0xe0>)
 8000ea6:	f001 fb35 	bl	8002514 <HAL_ADC_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000eb0:	f000 ff62 	bl	8001d78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4817      	ldr	r0, [pc, #92]	@ (8000f24 <MX_ADC1_Init+0xe0>)
 8000ec6:	f001 fc97 	bl	80027f8 <HAL_ADC_ConfigChannel>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ed0:	f000 ff52 	bl	8001d78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed8:	463b      	mov	r3, r7
 8000eda:	4619      	mov	r1, r3
 8000edc:	4811      	ldr	r0, [pc, #68]	@ (8000f24 <MX_ADC1_Init+0xe0>)
 8000ede:	f001 fc8b 	bl	80027f8 <HAL_ADC_ConfigChannel>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000ee8:	f000 ff46 	bl	8001d78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8000eec:	2303      	movs	r3, #3
 8000eee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	480b      	ldr	r0, [pc, #44]	@ (8000f24 <MX_ADC1_Init+0xe0>)
 8000ef6:	f001 fc7f 	bl	80027f8 <HAL_ADC_ConfigChannel>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8000f00:	f000 ff3a 	bl	8001d78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 8000f04:	2304      	movs	r3, #4
 8000f06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f08:	463b      	mov	r3, r7
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4805      	ldr	r0, [pc, #20]	@ (8000f24 <MX_ADC1_Init+0xe0>)
 8000f0e:	f001 fc73 	bl	80027f8 <HAL_ADC_ConfigChannel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000f18:	f000 ff2e 	bl	8001d78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f1c:	bf00      	nop
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	200000a8 	.word	0x200000a8
 8000f28:	40012000 	.word	0x40012000
 8000f2c:	0f000001 	.word	0x0f000001

08000f30 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	@ 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a33      	ldr	r2, [pc, #204]	@ (800101c <HAL_ADC_MspInit+0xec>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d15f      	bne.n	8001012 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	4b32      	ldr	r3, [pc, #200]	@ (8001020 <HAL_ADC_MspInit+0xf0>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5a:	4a31      	ldr	r2, [pc, #196]	@ (8001020 <HAL_ADC_MspInit+0xf0>)
 8000f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f62:	4b2f      	ldr	r3, [pc, #188]	@ (8001020 <HAL_ADC_MspInit+0xf0>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b2b      	ldr	r3, [pc, #172]	@ (8001020 <HAL_ADC_MspInit+0xf0>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	4a2a      	ldr	r2, [pc, #168]	@ (8001020 <HAL_ADC_MspInit+0xf0>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7e:	4b28      	ldr	r3, [pc, #160]	@ (8001020 <HAL_ADC_MspInit+0xf0>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000f8a:	230f      	movs	r3, #15
 8000f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4821      	ldr	r0, [pc, #132]	@ (8001024 <HAL_ADC_MspInit+0xf4>)
 8000f9e:	f002 fa5f 	bl	8003460 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000fa2:	4b21      	ldr	r3, [pc, #132]	@ (8001028 <HAL_ADC_MspInit+0xf8>)
 8000fa4:	4a21      	ldr	r2, [pc, #132]	@ (800102c <HAL_ADC_MspInit+0xfc>)
 8000fa6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8001028 <HAL_ADC_MspInit+0xf8>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fae:	4b1e      	ldr	r3, [pc, #120]	@ (8001028 <HAL_ADC_MspInit+0xf8>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8001028 <HAL_ADC_MspInit+0xf8>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fba:	4b1b      	ldr	r3, [pc, #108]	@ (8001028 <HAL_ADC_MspInit+0xf8>)
 8000fbc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fc0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fc2:	4b19      	ldr	r3, [pc, #100]	@ (8001028 <HAL_ADC_MspInit+0xf8>)
 8000fc4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fc8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fca:	4b17      	ldr	r3, [pc, #92]	@ (8001028 <HAL_ADC_MspInit+0xf8>)
 8000fcc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fd0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fd2:	4b15      	ldr	r3, [pc, #84]	@ (8001028 <HAL_ADC_MspInit+0xf8>)
 8000fd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fd8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fda:	4b13      	ldr	r3, [pc, #76]	@ (8001028 <HAL_ADC_MspInit+0xf8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <HAL_ADC_MspInit+0xf8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fe6:	4810      	ldr	r0, [pc, #64]	@ (8001028 <HAL_ADC_MspInit+0xf8>)
 8000fe8:	f001 ff50 	bl	8002e8c <HAL_DMA_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000ff2:	f000 fec1 	bl	8001d78 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a0b      	ldr	r2, [pc, #44]	@ (8001028 <HAL_ADC_MspInit+0xf8>)
 8000ffa:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ffc:	4a0a      	ldr	r2, [pc, #40]	@ (8001028 <HAL_ADC_MspInit+0xf8>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2100      	movs	r1, #0
 8001006:	2012      	movs	r0, #18
 8001008:	f001 ff09 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800100c:	2012      	movs	r0, #18
 800100e:	f001 ff22 	bl	8002e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001012:	bf00      	nop
 8001014:	3728      	adds	r7, #40	@ 0x28
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40012000 	.word	0x40012000
 8001020:	40023800 	.word	0x40023800
 8001024:	40020000 	.word	0x40020000
 8001028:	200000f0 	.word	0x200000f0
 800102c:	40026410 	.word	0x40026410

08001030 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <MX_DMA_Init+0x3c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	4a0b      	ldr	r2, [pc, #44]	@ (800106c <MX_DMA_Init+0x3c>)
 8001040:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001044:	6313      	str	r3, [r2, #48]	@ 0x30
 8001046:	4b09      	ldr	r3, [pc, #36]	@ (800106c <MX_DMA_Init+0x3c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	2038      	movs	r0, #56	@ 0x38
 8001058:	f001 fee1 	bl	8002e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800105c:	2038      	movs	r0, #56	@ 0x38
 800105e:	f001 fefa 	bl	8002e56 <HAL_NVIC_EnableIRQ>

}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800

08001070 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	@ 0x28
 8001074:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
 8001084:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	4b27      	ldr	r3, [pc, #156]	@ (8001128 <MX_GPIO_Init+0xb8>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4a26      	ldr	r2, [pc, #152]	@ (8001128 <MX_GPIO_Init+0xb8>)
 8001090:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b24      	ldr	r3, [pc, #144]	@ (8001128 <MX_GPIO_Init+0xb8>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b20      	ldr	r3, [pc, #128]	@ (8001128 <MX_GPIO_Init+0xb8>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001128 <MX_GPIO_Init+0xb8>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001128 <MX_GPIO_Init+0xb8>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	4b19      	ldr	r3, [pc, #100]	@ (8001128 <MX_GPIO_Init+0xb8>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	4a18      	ldr	r2, [pc, #96]	@ (8001128 <MX_GPIO_Init+0xb8>)
 80010c8:	f043 0304 	orr.w	r3, r3, #4
 80010cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ce:	4b16      	ldr	r3, [pc, #88]	@ (8001128 <MX_GPIO_Init+0xb8>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <MX_GPIO_Init+0xb8>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	4a11      	ldr	r2, [pc, #68]	@ (8001128 <MX_GPIO_Init+0xb8>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001128 <MX_GPIO_Init+0xb8>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80010fc:	480b      	ldr	r0, [pc, #44]	@ (800112c <MX_GPIO_Init+0xbc>)
 80010fe:	f002 fb43 	bl	8003788 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001102:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001108:	2301      	movs	r3, #1
 800110a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	4804      	ldr	r0, [pc, #16]	@ (800112c <MX_GPIO_Init+0xbc>)
 800111c:	f002 f9a0 	bl	8003460 <HAL_GPIO_Init>

}
 8001120:	bf00      	nop
 8001122:	3728      	adds	r7, #40	@ 0x28
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40023800 	.word	0x40023800
 800112c:	40020800 	.word	0x40020800

08001130 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001134:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <MX_I2C1_Init+0x50>)
 8001136:	4a13      	ldr	r2, [pc, #76]	@ (8001184 <MX_I2C1_Init+0x54>)
 8001138:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800113a:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <MX_I2C1_Init+0x50>)
 800113c:	4a12      	ldr	r2, [pc, #72]	@ (8001188 <MX_I2C1_Init+0x58>)
 800113e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001140:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <MX_I2C1_Init+0x50>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001146:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <MX_I2C1_Init+0x50>)
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800114c:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <MX_I2C1_Init+0x50>)
 800114e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001152:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001154:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <MX_I2C1_Init+0x50>)
 8001156:	2200      	movs	r2, #0
 8001158:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800115a:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <MX_I2C1_Init+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001160:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <MX_I2C1_Init+0x50>)
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001166:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <MX_I2C1_Init+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800116c:	4804      	ldr	r0, [pc, #16]	@ (8001180 <MX_I2C1_Init+0x50>)
 800116e:	f002 fb25 	bl	80037bc <HAL_I2C_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001178:	f000 fdfe 	bl	8001d78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000150 	.word	0x20000150
 8001184:	40005400 	.word	0x40005400
 8001188:	000186a0 	.word	0x000186a0

0800118c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	@ 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a19      	ldr	r2, [pc, #100]	@ (8001210 <HAL_I2C_MspInit+0x84>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d12b      	bne.n	8001206 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	4b18      	ldr	r3, [pc, #96]	@ (8001214 <HAL_I2C_MspInit+0x88>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	4a17      	ldr	r2, [pc, #92]	@ (8001214 <HAL_I2C_MspInit+0x88>)
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011be:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <HAL_I2C_MspInit+0x88>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011ca:	23c0      	movs	r3, #192	@ 0xc0
 80011cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ce:	2312      	movs	r3, #18
 80011d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011da:	2304      	movs	r3, #4
 80011dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4619      	mov	r1, r3
 80011e4:	480c      	ldr	r0, [pc, #48]	@ (8001218 <HAL_I2C_MspInit+0x8c>)
 80011e6:	f002 f93b 	bl	8003460 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <HAL_I2C_MspInit+0x88>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f2:	4a08      	ldr	r2, [pc, #32]	@ (8001214 <HAL_I2C_MspInit+0x88>)
 80011f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011fa:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <HAL_I2C_MspInit+0x88>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001206:	bf00      	nop
 8001208:	3728      	adds	r7, #40	@ 0x28
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40005400 	.word	0x40005400
 8001214:	40023800 	.word	0x40023800
 8001218:	40020400 	.word	0x40020400

0800121c <non_linear_response>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

float non_linear_response(float angle)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	ed87 0a01 	vstr	s0, [r7, #4]
    float abs_angle = fabs(angle);
 8001226:	edd7 7a01 	vldr	s15, [r7, #4]
 800122a:	eef0 7ae7 	vabs.f32	s15, s15
 800122e:	edc7 7a05 	vstr	s15, [r7, #20]
    float sign = (angle >= 0) ? 1.0f : -1.0f;
 8001232:	edd7 7a01 	vldr	s15, [r7, #4]
 8001236:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800123a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800123e:	db02      	blt.n	8001246 <non_linear_response+0x2a>
 8001240:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001244:	e000      	b.n	8001248 <non_linear_response+0x2c>
 8001246:	4b2c      	ldr	r3, [pc, #176]	@ (80012f8 <non_linear_response+0xdc>)
 8001248:	613b      	str	r3, [r7, #16]

    if (abs_angle <= ANGLE_THRESHOLD)
 800124a:	edd7 7a05 	vldr	s15, [r7, #20]
 800124e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	d80a      	bhi.n	800126e <non_linear_response+0x52>
    {
        return sign * (abs_angle * 0.8f);
 8001258:	edd7 7a05 	vldr	s15, [r7, #20]
 800125c:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80012fc <non_linear_response+0xe0>
 8001260:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001264:	edd7 7a04 	vldr	s15, [r7, #16]
 8001268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800126c:	e03e      	b.n	80012ec <non_linear_response+0xd0>
    }
    else
    {
        float normalized = (abs_angle - ANGLE_THRESHOLD) / (MAX_RESPONSE_ANGLE - ANGLE_THRESHOLD);
 800126e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001272:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8001300 <non_linear_response+0xe4>
 8001276:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800127a:	edc7 7a03 	vstr	s15, [r7, #12]
        float response = ANGLE_THRESHOLD + (MAX_RESPONSE_ANGLE - ANGLE_THRESHOLD) *
                         (1 - expf(-1.5 * normalized));
 800127e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001282:	eebf 7a08 	vmov.f32	s14, #248	@ 0xbfc00000 -1.5
 8001286:	ee67 7a87 	vmul.f32	s15, s15, s14
 800128a:	eeb0 0a67 	vmov.f32	s0, s15
 800128e:	f005 fabb 	bl	8006808 <expf>
 8001292:	eef0 7a40 	vmov.f32	s15, s0
 8001296:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800129a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800129e:	ee17 0a90 	vmov	r0, s15
 80012a2:	f7ff f915 	bl	80004d0 <__aeabi_f2d>
        float response = ANGLE_THRESHOLD + (MAX_RESPONSE_ANGLE - ANGLE_THRESHOLD) *
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	4b16      	ldr	r3, [pc, #88]	@ (8001304 <non_linear_response+0xe8>)
 80012ac:	f7ff f968 	bl	8000580 <__aeabi_dmul>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	f04f 0300 	mov.w	r3, #0
 80012c0:	f7fe ffa8 	bl	8000214 <__adddf3>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f7ff fbf2 	bl	8000ab4 <__aeabi_d2f>
 80012d0:	4603      	mov	r3, r0
 80012d2:	60bb      	str	r3, [r7, #8]
        return sign * fminf(response, MAX_RESPONSE_ANGLE);
 80012d4:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8001300 <non_linear_response+0xe4>
 80012d8:	ed97 0a02 	vldr	s0, [r7, #8]
 80012dc:	f005 faf1 	bl	80068c2 <fminf>
 80012e0:	eeb0 7a40 	vmov.f32	s14, s0
 80012e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80012e8:	ee67 7a27 	vmul.f32	s15, s14, s15
    }
}
 80012ec:	eeb0 0a67 	vmov.f32	s0, s15
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	bf800000 	.word	0xbf800000
 80012fc:	3f4ccccd 	.word	0x3f4ccccd
 8001300:	42340000 	.word	0x42340000
 8001304:	40468000 	.word	0x40468000

08001308 <calculate_pid>:

float calculate_pid(float setpoint, float measured_value)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0
 800130e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001312:	edc7 0a00 	vstr	s1, [r7]
    float error = setpoint - measured_value;
 8001316:	ed97 7a01 	vldr	s14, [r7, #4]
 800131a:	edd7 7a00 	vldr	s15, [r7]
 800131e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001322:	edc7 7a06 	vstr	s15, [r7, #24]
    float non_linear_error = non_linear_response(error);
 8001326:	ed97 0a06 	vldr	s0, [r7, #24]
 800132a:	f7ff ff77 	bl	800121c <non_linear_response>
 800132e:	ed87 0a05 	vstr	s0, [r7, #20]

    integral += non_linear_error * dt;
 8001332:	4b53      	ldr	r3, [pc, #332]	@ (8001480 <calculate_pid+0x178>)
 8001334:	ed93 7a00 	vldr	s14, [r3]
 8001338:	edd7 7a05 	vldr	s15, [r7, #20]
 800133c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001340:	4b50      	ldr	r3, [pc, #320]	@ (8001484 <calculate_pid+0x17c>)
 8001342:	edd3 7a00 	vldr	s15, [r3]
 8001346:	ee77 7a27 	vadd.f32	s15, s14, s15
 800134a:	4b4e      	ldr	r3, [pc, #312]	@ (8001484 <calculate_pid+0x17c>)
 800134c:	edc3 7a00 	vstr	s15, [r3]
    integral = fmaxf(fminf(integral, INTEGRAL_MAX), INTEGRAL_MIN);
 8001350:	4b4c      	ldr	r3, [pc, #304]	@ (8001484 <calculate_pid+0x17c>)
 8001352:	edd3 7a00 	vldr	s15, [r3]
 8001356:	eddf 0a4c 	vldr	s1, [pc, #304]	@ 8001488 <calculate_pid+0x180>
 800135a:	eeb0 0a67 	vmov.f32	s0, s15
 800135e:	f005 fab0 	bl	80068c2 <fminf>
 8001362:	eef0 7a40 	vmov.f32	s15, s0
 8001366:	eddf 0a49 	vldr	s1, [pc, #292]	@ 800148c <calculate_pid+0x184>
 800136a:	eeb0 0a67 	vmov.f32	s0, s15
 800136e:	f005 fa8b 	bl	8006888 <fmaxf>
 8001372:	eef0 7a40 	vmov.f32	s15, s0
 8001376:	4b43      	ldr	r3, [pc, #268]	@ (8001484 <calculate_pid+0x17c>)
 8001378:	edc3 7a00 	vstr	s15, [r3]

    float derivative = (non_linear_error - prev_error) / dt;
 800137c:	4b44      	ldr	r3, [pc, #272]	@ (8001490 <calculate_pid+0x188>)
 800137e:	edd3 7a00 	vldr	s15, [r3]
 8001382:	ed97 7a05 	vldr	s14, [r7, #20]
 8001386:	ee77 6a67 	vsub.f32	s13, s14, s15
 800138a:	4b3d      	ldr	r3, [pc, #244]	@ (8001480 <calculate_pid+0x178>)
 800138c:	ed93 7a00 	vldr	s14, [r3]
 8001390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001394:	edc7 7a04 	vstr	s15, [r7, #16]
    float filtered_derivative = 0.7f * derivative + 0.3f * prev_derivative;
 8001398:	edd7 7a04 	vldr	s15, [r7, #16]
 800139c:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001494 <calculate_pid+0x18c>
 80013a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013a4:	4b3c      	ldr	r3, [pc, #240]	@ (8001498 <calculate_pid+0x190>)
 80013a6:	edd3 7a00 	vldr	s15, [r3]
 80013aa:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 800149c <calculate_pid+0x194>
 80013ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80013b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b6:	edc7 7a03 	vstr	s15, [r7, #12]

    float output = Kp * non_linear_error + Ki * integral + Kd * filtered_derivative;
 80013ba:	4b39      	ldr	r3, [pc, #228]	@ (80014a0 <calculate_pid+0x198>)
 80013bc:	ed93 7a00 	vldr	s14, [r3]
 80013c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80013c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013c8:	4b36      	ldr	r3, [pc, #216]	@ (80014a4 <calculate_pid+0x19c>)
 80013ca:	edd3 6a00 	vldr	s13, [r3]
 80013ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001484 <calculate_pid+0x17c>)
 80013d0:	edd3 7a00 	vldr	s15, [r3]
 80013d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013dc:	4b32      	ldr	r3, [pc, #200]	@ (80014a8 <calculate_pid+0x1a0>)
 80013de:	edd3 6a00 	vldr	s13, [r3]
 80013e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80013e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ee:	edc7 7a07 	vstr	s15, [r7, #28]

    if (fabs(error) > 0.2f)
 80013f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80013f6:	eef0 7ae7 	vabs.f32	s15, s15
 80013fa:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80014ac <calculate_pid+0x1a4>
 80013fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001406:	dd2c      	ble.n	8001462 <calculate_pid+0x15a>
    {
        float min_output = MIN_MOTOR_OUTPUT * (fminf(fabs(error), 1.0f) / 1.0f);
 8001408:	edd7 7a06 	vldr	s15, [r7, #24]
 800140c:	eef0 7ae7 	vabs.f32	s15, s15
 8001410:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001414:	eeb0 0a67 	vmov.f32	s0, s15
 8001418:	f005 fa53 	bl	80068c2 <fminf>
 800141c:	eef0 7a40 	vmov.f32	s15, s0
 8001420:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80014b0 <calculate_pid+0x1a8>
 8001424:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001428:	edc7 7a02 	vstr	s15, [r7, #8]
        if (fabs(output) < min_output)
 800142c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001430:	eef0 7ae7 	vabs.f32	s15, s15
 8001434:	ed97 7a02 	vldr	s14, [r7, #8]
 8001438:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800143c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001440:	dd0f      	ble.n	8001462 <calculate_pid+0x15a>
        {
            output = (output >= 0) ? min_output : -min_output;
 8001442:	edd7 7a07 	vldr	s15, [r7, #28]
 8001446:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800144a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144e:	db02      	blt.n	8001456 <calculate_pid+0x14e>
 8001450:	edd7 7a02 	vldr	s15, [r7, #8]
 8001454:	e003      	b.n	800145e <calculate_pid+0x156>
 8001456:	edd7 7a02 	vldr	s15, [r7, #8]
 800145a:	eef1 7a67 	vneg.f32	s15, s15
 800145e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
    }

    prev_error = non_linear_error;
 8001462:	4a0b      	ldr	r2, [pc, #44]	@ (8001490 <calculate_pid+0x188>)
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	6013      	str	r3, [r2, #0]
    prev_derivative = filtered_derivative;
 8001468:	4a0b      	ldr	r2, [pc, #44]	@ (8001498 <calculate_pid+0x190>)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6013      	str	r3, [r2, #0]

    return output;  // Return the calculated output
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	ee07 3a90 	vmov	s15, r3
}
 8001474:	eeb0 0a67 	vmov.f32	s0, s15
 8001478:	3720      	adds	r7, #32
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000028 	.word	0x20000028
 8001484:	200001e0 	.word	0x200001e0
 8001488:	43480000 	.word	0x43480000
 800148c:	c3480000 	.word	0xc3480000
 8001490:	200001e4 	.word	0x200001e4
 8001494:	3f333333 	.word	0x3f333333
 8001498:	200001e8 	.word	0x200001e8
 800149c:	3e99999a 	.word	0x3e99999a
 80014a0:	2000001c 	.word	0x2000001c
 80014a4:	20000020 	.word	0x20000020
 80014a8:	20000024 	.word	0x20000024
 80014ac:	3e4ccccd 	.word	0x3e4ccccd
 80014b0:	42a00000 	.word	0x42a00000

080014b4 <Kalman_Filter>:

void Kalman_Filter(float new_angle, float new_rate)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	@ 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80014be:	edc7 0a00 	vstr	s1, [r7]
    angle_xz_kalman += (new_rate - bias) * dt;
 80014c2:	4b69      	ldr	r3, [pc, #420]	@ (8001668 <Kalman_Filter+0x1b4>)
 80014c4:	edd3 7a00 	vldr	s15, [r3]
 80014c8:	ed97 7a00 	vldr	s14, [r7]
 80014cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014d0:	4b66      	ldr	r3, [pc, #408]	@ (800166c <Kalman_Filter+0x1b8>)
 80014d2:	edd3 7a00 	vldr	s15, [r3]
 80014d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014da:	4b65      	ldr	r3, [pc, #404]	@ (8001670 <Kalman_Filter+0x1bc>)
 80014dc:	edd3 7a00 	vldr	s15, [r3]
 80014e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e4:	4b62      	ldr	r3, [pc, #392]	@ (8001670 <Kalman_Filter+0x1bc>)
 80014e6:	edc3 7a00 	vstr	s15, [r3]

    P[0][0] += Q_angle;
 80014ea:	4b62      	ldr	r3, [pc, #392]	@ (8001674 <Kalman_Filter+0x1c0>)
 80014ec:	ed93 7a00 	vldr	s14, [r3]
 80014f0:	4b61      	ldr	r3, [pc, #388]	@ (8001678 <Kalman_Filter+0x1c4>)
 80014f2:	edd3 7a00 	vldr	s15, [r3]
 80014f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014fa:	4b5e      	ldr	r3, [pc, #376]	@ (8001674 <Kalman_Filter+0x1c0>)
 80014fc:	edc3 7a00 	vstr	s15, [r3]
    P[0][1] -= P[0][1] * dt;
 8001500:	4b5c      	ldr	r3, [pc, #368]	@ (8001674 <Kalman_Filter+0x1c0>)
 8001502:	ed93 7a01 	vldr	s14, [r3, #4]
 8001506:	4b5b      	ldr	r3, [pc, #364]	@ (8001674 <Kalman_Filter+0x1c0>)
 8001508:	edd3 6a01 	vldr	s13, [r3, #4]
 800150c:	4b57      	ldr	r3, [pc, #348]	@ (800166c <Kalman_Filter+0x1b8>)
 800150e:	edd3 7a00 	vldr	s15, [r3]
 8001512:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001516:	ee77 7a67 	vsub.f32	s15, s14, s15
 800151a:	4b56      	ldr	r3, [pc, #344]	@ (8001674 <Kalman_Filter+0x1c0>)
 800151c:	edc3 7a01 	vstr	s15, [r3, #4]
    P[1][0] -= P[1][0] * dt;
 8001520:	4b54      	ldr	r3, [pc, #336]	@ (8001674 <Kalman_Filter+0x1c0>)
 8001522:	ed93 7a02 	vldr	s14, [r3, #8]
 8001526:	4b53      	ldr	r3, [pc, #332]	@ (8001674 <Kalman_Filter+0x1c0>)
 8001528:	edd3 6a02 	vldr	s13, [r3, #8]
 800152c:	4b4f      	ldr	r3, [pc, #316]	@ (800166c <Kalman_Filter+0x1b8>)
 800152e:	edd3 7a00 	vldr	s15, [r3]
 8001532:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001536:	ee77 7a67 	vsub.f32	s15, s14, s15
 800153a:	4b4e      	ldr	r3, [pc, #312]	@ (8001674 <Kalman_Filter+0x1c0>)
 800153c:	edc3 7a02 	vstr	s15, [r3, #8]
    P[1][1] += Q_gyro * dt;
 8001540:	4b4c      	ldr	r3, [pc, #304]	@ (8001674 <Kalman_Filter+0x1c0>)
 8001542:	ed93 7a03 	vldr	s14, [r3, #12]
 8001546:	4b4d      	ldr	r3, [pc, #308]	@ (800167c <Kalman_Filter+0x1c8>)
 8001548:	edd3 6a00 	vldr	s13, [r3]
 800154c:	4b47      	ldr	r3, [pc, #284]	@ (800166c <Kalman_Filter+0x1b8>)
 800154e:	edd3 7a00 	vldr	s15, [r3]
 8001552:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800155a:	4b46      	ldr	r3, [pc, #280]	@ (8001674 <Kalman_Filter+0x1c0>)
 800155c:	edc3 7a03 	vstr	s15, [r3, #12]

    float y = new_angle - angle_xz_kalman;
 8001560:	4b43      	ldr	r3, [pc, #268]	@ (8001670 <Kalman_Filter+0x1bc>)
 8001562:	edd3 7a00 	vldr	s15, [r3]
 8001566:	ed97 7a01 	vldr	s14, [r7, #4]
 800156a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800156e:	edc7 7a07 	vstr	s15, [r7, #28]
    float S = P[0][0] + R_angle;
 8001572:	4b40      	ldr	r3, [pc, #256]	@ (8001674 <Kalman_Filter+0x1c0>)
 8001574:	ed93 7a00 	vldr	s14, [r3]
 8001578:	4b41      	ldr	r3, [pc, #260]	@ (8001680 <Kalman_Filter+0x1cc>)
 800157a:	edd3 7a00 	vldr	s15, [r3]
 800157e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001582:	edc7 7a06 	vstr	s15, [r7, #24]
    float K[2];
    K[0] = P[0][0] / S;
 8001586:	4b3b      	ldr	r3, [pc, #236]	@ (8001674 <Kalman_Filter+0x1c0>)
 8001588:	edd3 6a00 	vldr	s13, [r3]
 800158c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001590:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001594:	edc7 7a03 	vstr	s15, [r7, #12]
    K[1] = P[1][0] / S;
 8001598:	4b36      	ldr	r3, [pc, #216]	@ (8001674 <Kalman_Filter+0x1c0>)
 800159a:	edd3 6a02 	vldr	s13, [r3, #8]
 800159e:	ed97 7a06 	vldr	s14, [r7, #24]
 80015a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015a6:	edc7 7a04 	vstr	s15, [r7, #16]

    angle_xz_kalman += K[0] * y;
 80015aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80015ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80015b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001670 <Kalman_Filter+0x1bc>)
 80015b8:	edd3 7a00 	vldr	s15, [r3]
 80015bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001670 <Kalman_Filter+0x1bc>)
 80015c2:	edc3 7a00 	vstr	s15, [r3]
    bias += K[1] * y;
 80015c6:	ed97 7a04 	vldr	s14, [r7, #16]
 80015ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80015ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015d2:	4b25      	ldr	r3, [pc, #148]	@ (8001668 <Kalman_Filter+0x1b4>)
 80015d4:	edd3 7a00 	vldr	s15, [r3]
 80015d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015dc:	4b22      	ldr	r3, [pc, #136]	@ (8001668 <Kalman_Filter+0x1b4>)
 80015de:	edc3 7a00 	vstr	s15, [r3]

    float P00_temp = P[0][0];
 80015e2:	4b24      	ldr	r3, [pc, #144]	@ (8001674 <Kalman_Filter+0x1c0>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	617b      	str	r3, [r7, #20]
    P[0][0] -= K[0] * P00_temp;
 80015e8:	4b22      	ldr	r3, [pc, #136]	@ (8001674 <Kalman_Filter+0x1c0>)
 80015ea:	ed93 7a00 	vldr	s14, [r3]
 80015ee:	edd7 6a03 	vldr	s13, [r7, #12]
 80015f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80015f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001674 <Kalman_Filter+0x1c0>)
 8001600:	edc3 7a00 	vstr	s15, [r3]
    P[0][1] -= K[0] * P[0][1];
 8001604:	4b1b      	ldr	r3, [pc, #108]	@ (8001674 <Kalman_Filter+0x1c0>)
 8001606:	ed93 7a01 	vldr	s14, [r3, #4]
 800160a:	edd7 6a03 	vldr	s13, [r7, #12]
 800160e:	4b19      	ldr	r3, [pc, #100]	@ (8001674 <Kalman_Filter+0x1c0>)
 8001610:	edd3 7a01 	vldr	s15, [r3, #4]
 8001614:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001618:	ee77 7a67 	vsub.f32	s15, s14, s15
 800161c:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <Kalman_Filter+0x1c0>)
 800161e:	edc3 7a01 	vstr	s15, [r3, #4]
    P[1][0] -= K[1] * P00_temp;
 8001622:	4b14      	ldr	r3, [pc, #80]	@ (8001674 <Kalman_Filter+0x1c0>)
 8001624:	ed93 7a02 	vldr	s14, [r3, #8]
 8001628:	edd7 6a04 	vldr	s13, [r7, #16]
 800162c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001630:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001634:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001638:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <Kalman_Filter+0x1c0>)
 800163a:	edc3 7a02 	vstr	s15, [r3, #8]
    P[1][1] -= K[1] * P[0][1];
 800163e:	4b0d      	ldr	r3, [pc, #52]	@ (8001674 <Kalman_Filter+0x1c0>)
 8001640:	ed93 7a03 	vldr	s14, [r3, #12]
 8001644:	edd7 6a04 	vldr	s13, [r7, #16]
 8001648:	4b0a      	ldr	r3, [pc, #40]	@ (8001674 <Kalman_Filter+0x1c0>)
 800164a:	edd3 7a01 	vldr	s15, [r3, #4]
 800164e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001656:	4b07      	ldr	r3, [pc, #28]	@ (8001674 <Kalman_Filter+0x1c0>)
 8001658:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800165c:	bf00      	nop
 800165e:	3724      	adds	r7, #36	@ 0x24
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	200001bc 	.word	0x200001bc
 800166c:	20000028 	.word	0x20000028
 8001670:	200001b8 	.word	0x200001b8
 8001674:	2000000c 	.word	0x2000000c
 8001678:	20000000 	.word	0x20000000
 800167c:	20000004 	.word	0x20000004
 8001680:	20000008 	.word	0x20000008
 8001684:	00000000 	.word	0x00000000

08001688 <Update_Angle>:

void Update_Angle(void)
{
 8001688:	b5b0      	push	{r4, r5, r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
    angle_xz += Gx * (1.0 / 1000.0);
 800168e:	4b26      	ldr	r3, [pc, #152]	@ (8001728 <Update_Angle+0xa0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe ff1c 	bl	80004d0 <__aeabi_f2d>
 8001698:	4604      	mov	r4, r0
 800169a:	460d      	mov	r5, r1
 800169c:	4b23      	ldr	r3, [pc, #140]	@ (800172c <Update_Angle+0xa4>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe ff15 	bl	80004d0 <__aeabi_f2d>
 80016a6:	a31e      	add	r3, pc, #120	@ (adr r3, 8001720 <Update_Angle+0x98>)
 80016a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ac:	f7fe ff68 	bl	8000580 <__aeabi_dmul>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4620      	mov	r0, r4
 80016b6:	4629      	mov	r1, r5
 80016b8:	f7fe fdac 	bl	8000214 <__adddf3>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	f7ff f9f6 	bl	8000ab4 <__aeabi_d2f>
 80016c8:	4603      	mov	r3, r0
 80016ca:	4a17      	ldr	r2, [pc, #92]	@ (8001728 <Update_Angle+0xa0>)
 80016cc:	6013      	str	r3, [r2, #0]
    float angle_xz_acc = Calculate_XZ_Angle(Ax, Az);
 80016ce:	4b18      	ldr	r3, [pc, #96]	@ (8001730 <Update_Angle+0xa8>)
 80016d0:	edd3 7a00 	vldr	s15, [r3]
 80016d4:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <Update_Angle+0xac>)
 80016d6:	ed93 7a00 	vldr	s14, [r3]
 80016da:	eef0 0a47 	vmov.f32	s1, s14
 80016de:	eeb0 0a67 	vmov.f32	s0, s15
 80016e2:	f000 f981 	bl	80019e8 <Calculate_XZ_Angle>
 80016e6:	ed87 0a01 	vstr	s0, [r7, #4]
    angle_xz_filtered = alpha * angle_xz_filtered + (1 - alpha) * angle_xz_acc;
 80016ea:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001738 <Update_Angle+0xb0>
 80016ee:	4b13      	ldr	r3, [pc, #76]	@ (800173c <Update_Angle+0xb4>)
 80016f0:	edd3 7a00 	vldr	s15, [r3]
 80016f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016f8:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8001738 <Update_Angle+0xb0>
 80016fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001700:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001704:	edd7 7a01 	vldr	s15, [r7, #4]
 8001708:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800170c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001710:	4b0a      	ldr	r3, [pc, #40]	@ (800173c <Update_Angle+0xb4>)
 8001712:	edc3 7a00 	vstr	s15, [r3]
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bdb0      	pop	{r4, r5, r7, pc}
 800171e:	bf00      	nop
 8001720:	d2f1a9fc 	.word	0xd2f1a9fc
 8001724:	3f50624d 	.word	0x3f50624d
 8001728:	200001d8 	.word	0x200001d8
 800172c:	200001cc 	.word	0x200001cc
 8001730:	200001c0 	.word	0x200001c0
 8001734:	200001c8 	.word	0x200001c8
 8001738:	3f7ae148 	.word	0x3f7ae148
 800173c:	200001b4 	.word	0x200001b4

08001740 <MPU6050_Init>:

void MPU6050_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af04      	add	r7, sp, #16
  uint8_t check;
  uint8_t Data;

  HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_WHO_AM_I_REG, 1, &check, 1, 1000);
 8001746:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800174a:	9302      	str	r3, [sp, #8]
 800174c:	2301      	movs	r3, #1
 800174e:	9301      	str	r3, [sp, #4]
 8001750:	1dfb      	adds	r3, r7, #7
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	2301      	movs	r3, #1
 8001756:	2275      	movs	r2, #117	@ 0x75
 8001758:	21d0      	movs	r1, #208	@ 0xd0
 800175a:	4823      	ldr	r0, [pc, #140]	@ (80017e8 <MPU6050_Init+0xa8>)
 800175c:	f002 fa6c 	bl	8003c38 <HAL_I2C_Mem_Read>

  if (check == 104)
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	2b68      	cmp	r3, #104	@ 0x68
 8001764:	d13b      	bne.n	80017de <MPU6050_Init+0x9e>
  {
    Data = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 800176a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800176e:	9302      	str	r3, [sp, #8]
 8001770:	2301      	movs	r3, #1
 8001772:	9301      	str	r3, [sp, #4]
 8001774:	1dbb      	adds	r3, r7, #6
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	2301      	movs	r3, #1
 800177a:	226b      	movs	r2, #107	@ 0x6b
 800177c:	21d0      	movs	r1, #208	@ 0xd0
 800177e:	481a      	ldr	r0, [pc, #104]	@ (80017e8 <MPU6050_Init+0xa8>)
 8001780:	f002 f960 	bl	8003a44 <HAL_I2C_Mem_Write>

    Data = 0x07;
 8001784:	2307      	movs	r3, #7
 8001786:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8001788:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800178c:	9302      	str	r3, [sp, #8]
 800178e:	2301      	movs	r3, #1
 8001790:	9301      	str	r3, [sp, #4]
 8001792:	1dbb      	adds	r3, r7, #6
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	2301      	movs	r3, #1
 8001798:	2219      	movs	r2, #25
 800179a:	21d0      	movs	r1, #208	@ 0xd0
 800179c:	4812      	ldr	r0, [pc, #72]	@ (80017e8 <MPU6050_Init+0xa8>)
 800179e:	f002 f951 	bl	8003a44 <HAL_I2C_Mem_Write>

    Data = 0x00;
 80017a2:	2300      	movs	r3, #0
 80017a4:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80017a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017aa:	9302      	str	r3, [sp, #8]
 80017ac:	2301      	movs	r3, #1
 80017ae:	9301      	str	r3, [sp, #4]
 80017b0:	1dbb      	adds	r3, r7, #6
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	2301      	movs	r3, #1
 80017b6:	221c      	movs	r2, #28
 80017b8:	21d0      	movs	r1, #208	@ 0xd0
 80017ba:	480b      	ldr	r0, [pc, #44]	@ (80017e8 <MPU6050_Init+0xa8>)
 80017bc:	f002 f942 	bl	8003a44 <HAL_I2C_Mem_Write>

    Data = 0x00;
 80017c0:	2300      	movs	r3, #0
 80017c2:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80017c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017c8:	9302      	str	r3, [sp, #8]
 80017ca:	2301      	movs	r3, #1
 80017cc:	9301      	str	r3, [sp, #4]
 80017ce:	1dbb      	adds	r3, r7, #6
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	2301      	movs	r3, #1
 80017d4:	221b      	movs	r2, #27
 80017d6:	21d0      	movs	r1, #208	@ 0xd0
 80017d8:	4803      	ldr	r0, [pc, #12]	@ (80017e8 <MPU6050_Init+0xa8>)
 80017da:	f002 f933 	bl	8003a44 <HAL_I2C_Mem_Write>
  }
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000150 	.word	0x20000150

080017ec <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af04      	add	r7, sp, #16
  uint8_t Rec_Data[6];

  HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80017f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017f6:	9302      	str	r3, [sp, #8]
 80017f8:	2306      	movs	r3, #6
 80017fa:	9301      	str	r3, [sp, #4]
 80017fc:	463b      	mov	r3, r7
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	2301      	movs	r3, #1
 8001802:	223b      	movs	r2, #59	@ 0x3b
 8001804:	21d0      	movs	r1, #208	@ 0xd0
 8001806:	482f      	ldr	r0, [pc, #188]	@ (80018c4 <MPU6050_Read_Accel+0xd8>)
 8001808:	f002 fa16 	bl	8003c38 <HAL_I2C_Mem_Read>

  Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800180c:	783b      	ldrb	r3, [r7, #0]
 800180e:	021b      	lsls	r3, r3, #8
 8001810:	b21a      	sxth	r2, r3
 8001812:	787b      	ldrb	r3, [r7, #1]
 8001814:	b21b      	sxth	r3, r3
 8001816:	4313      	orrs	r3, r2
 8001818:	b21a      	sxth	r2, r3
 800181a:	4b2b      	ldr	r3, [pc, #172]	@ (80018c8 <MPU6050_Read_Accel+0xdc>)
 800181c:	801a      	strh	r2, [r3, #0]
  Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800181e:	78bb      	ldrb	r3, [r7, #2]
 8001820:	021b      	lsls	r3, r3, #8
 8001822:	b21a      	sxth	r2, r3
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	b21b      	sxth	r3, r3
 8001828:	4313      	orrs	r3, r2
 800182a:	b21a      	sxth	r2, r3
 800182c:	4b27      	ldr	r3, [pc, #156]	@ (80018cc <MPU6050_Read_Accel+0xe0>)
 800182e:	801a      	strh	r2, [r3, #0]
  Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001830:	793b      	ldrb	r3, [r7, #4]
 8001832:	021b      	lsls	r3, r3, #8
 8001834:	b21a      	sxth	r2, r3
 8001836:	797b      	ldrb	r3, [r7, #5]
 8001838:	b21b      	sxth	r3, r3
 800183a:	4313      	orrs	r3, r2
 800183c:	b21a      	sxth	r2, r3
 800183e:	4b24      	ldr	r3, [pc, #144]	@ (80018d0 <MPU6050_Read_Accel+0xe4>)
 8001840:	801a      	strh	r2, [r3, #0]

  Ax = Accel_X_RAW / 16384.0;
 8001842:	4b21      	ldr	r3, [pc, #132]	@ (80018c8 <MPU6050_Read_Accel+0xdc>)
 8001844:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fe2f 	bl	80004ac <__aeabi_i2d>
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	4b20      	ldr	r3, [pc, #128]	@ (80018d4 <MPU6050_Read_Accel+0xe8>)
 8001854:	f7fe ffbe 	bl	80007d4 <__aeabi_ddiv>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	f7ff f928 	bl	8000ab4 <__aeabi_d2f>
 8001864:	4603      	mov	r3, r0
 8001866:	4a1c      	ldr	r2, [pc, #112]	@ (80018d8 <MPU6050_Read_Accel+0xec>)
 8001868:	6013      	str	r3, [r2, #0]
  Ay = Accel_Y_RAW / 16384.0;
 800186a:	4b18      	ldr	r3, [pc, #96]	@ (80018cc <MPU6050_Read_Accel+0xe0>)
 800186c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001870:	4618      	mov	r0, r3
 8001872:	f7fe fe1b 	bl	80004ac <__aeabi_i2d>
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	4b16      	ldr	r3, [pc, #88]	@ (80018d4 <MPU6050_Read_Accel+0xe8>)
 800187c:	f7fe ffaa 	bl	80007d4 <__aeabi_ddiv>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4610      	mov	r0, r2
 8001886:	4619      	mov	r1, r3
 8001888:	f7ff f914 	bl	8000ab4 <__aeabi_d2f>
 800188c:	4603      	mov	r3, r0
 800188e:	4a13      	ldr	r2, [pc, #76]	@ (80018dc <MPU6050_Read_Accel+0xf0>)
 8001890:	6013      	str	r3, [r2, #0]
  Az = Accel_Z_RAW / 16384.0;
 8001892:	4b0f      	ldr	r3, [pc, #60]	@ (80018d0 <MPU6050_Read_Accel+0xe4>)
 8001894:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fe07 	bl	80004ac <__aeabi_i2d>
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <MPU6050_Read_Accel+0xe8>)
 80018a4:	f7fe ff96 	bl	80007d4 <__aeabi_ddiv>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4610      	mov	r0, r2
 80018ae:	4619      	mov	r1, r3
 80018b0:	f7ff f900 	bl	8000ab4 <__aeabi_d2f>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4a0a      	ldr	r2, [pc, #40]	@ (80018e0 <MPU6050_Read_Accel+0xf4>)
 80018b8:	6013      	str	r3, [r2, #0]
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000150 	.word	0x20000150
 80018c8:	200001f8 	.word	0x200001f8
 80018cc:	200001fa 	.word	0x200001fa
 80018d0:	200001fc 	.word	0x200001fc
 80018d4:	40d00000 	.word	0x40d00000
 80018d8:	200001c0 	.word	0x200001c0
 80018dc:	200001c4 	.word	0x200001c4
 80018e0:	200001c8 	.word	0x200001c8
 80018e4:	00000000 	.word	0x00000000

080018e8 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af04      	add	r7, sp, #16
  uint8_t Rec_Data[6];

  HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80018ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018f2:	9302      	str	r3, [sp, #8]
 80018f4:	2306      	movs	r3, #6
 80018f6:	9301      	str	r3, [sp, #4]
 80018f8:	463b      	mov	r3, r7
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	2301      	movs	r3, #1
 80018fe:	2243      	movs	r2, #67	@ 0x43
 8001900:	21d0      	movs	r1, #208	@ 0xd0
 8001902:	4831      	ldr	r0, [pc, #196]	@ (80019c8 <MPU6050_Read_Gyro+0xe0>)
 8001904:	f002 f998 	bl	8003c38 <HAL_I2C_Mem_Read>

  Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001908:	783b      	ldrb	r3, [r7, #0]
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	b21a      	sxth	r2, r3
 800190e:	787b      	ldrb	r3, [r7, #1]
 8001910:	b21b      	sxth	r3, r3
 8001912:	4313      	orrs	r3, r2
 8001914:	b21a      	sxth	r2, r3
 8001916:	4b2d      	ldr	r3, [pc, #180]	@ (80019cc <MPU6050_Read_Gyro+0xe4>)
 8001918:	801a      	strh	r2, [r3, #0]
  Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800191a:	78bb      	ldrb	r3, [r7, #2]
 800191c:	021b      	lsls	r3, r3, #8
 800191e:	b21a      	sxth	r2, r3
 8001920:	78fb      	ldrb	r3, [r7, #3]
 8001922:	b21b      	sxth	r3, r3
 8001924:	4313      	orrs	r3, r2
 8001926:	b21a      	sxth	r2, r3
 8001928:	4b29      	ldr	r3, [pc, #164]	@ (80019d0 <MPU6050_Read_Gyro+0xe8>)
 800192a:	801a      	strh	r2, [r3, #0]
  Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800192c:	793b      	ldrb	r3, [r7, #4]
 800192e:	021b      	lsls	r3, r3, #8
 8001930:	b21a      	sxth	r2, r3
 8001932:	797b      	ldrb	r3, [r7, #5]
 8001934:	b21b      	sxth	r3, r3
 8001936:	4313      	orrs	r3, r2
 8001938:	b21a      	sxth	r2, r3
 800193a:	4b26      	ldr	r3, [pc, #152]	@ (80019d4 <MPU6050_Read_Gyro+0xec>)
 800193c:	801a      	strh	r2, [r3, #0]

  Gx = Gyro_X_RAW / 131.0;
 800193e:	4b23      	ldr	r3, [pc, #140]	@ (80019cc <MPU6050_Read_Gyro+0xe4>)
 8001940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fdb1 	bl	80004ac <__aeabi_i2d>
 800194a:	a31d      	add	r3, pc, #116	@ (adr r3, 80019c0 <MPU6050_Read_Gyro+0xd8>)
 800194c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001950:	f7fe ff40 	bl	80007d4 <__aeabi_ddiv>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4610      	mov	r0, r2
 800195a:	4619      	mov	r1, r3
 800195c:	f7ff f8aa 	bl	8000ab4 <__aeabi_d2f>
 8001960:	4603      	mov	r3, r0
 8001962:	4a1d      	ldr	r2, [pc, #116]	@ (80019d8 <MPU6050_Read_Gyro+0xf0>)
 8001964:	6013      	str	r3, [r2, #0]
  Gy = Gyro_Y_RAW / 131.0;
 8001966:	4b1a      	ldr	r3, [pc, #104]	@ (80019d0 <MPU6050_Read_Gyro+0xe8>)
 8001968:	f9b3 3000 	ldrsh.w	r3, [r3]
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fd9d 	bl	80004ac <__aeabi_i2d>
 8001972:	a313      	add	r3, pc, #76	@ (adr r3, 80019c0 <MPU6050_Read_Gyro+0xd8>)
 8001974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001978:	f7fe ff2c 	bl	80007d4 <__aeabi_ddiv>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4610      	mov	r0, r2
 8001982:	4619      	mov	r1, r3
 8001984:	f7ff f896 	bl	8000ab4 <__aeabi_d2f>
 8001988:	4603      	mov	r3, r0
 800198a:	4a14      	ldr	r2, [pc, #80]	@ (80019dc <MPU6050_Read_Gyro+0xf4>)
 800198c:	6013      	str	r3, [r2, #0]
  Gz = Gyro_Z_RAW / 131.0;
 800198e:	4b11      	ldr	r3, [pc, #68]	@ (80019d4 <MPU6050_Read_Gyro+0xec>)
 8001990:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fd89 	bl	80004ac <__aeabi_i2d>
 800199a:	a309      	add	r3, pc, #36	@ (adr r3, 80019c0 <MPU6050_Read_Gyro+0xd8>)
 800199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a0:	f7fe ff18 	bl	80007d4 <__aeabi_ddiv>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	f7ff f882 	bl	8000ab4 <__aeabi_d2f>
 80019b0:	4603      	mov	r3, r0
 80019b2:	4a0b      	ldr	r2, [pc, #44]	@ (80019e0 <MPU6050_Read_Gyro+0xf8>)
 80019b4:	6013      	str	r3, [r2, #0]
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	00000000 	.word	0x00000000
 80019c4:	40606000 	.word	0x40606000
 80019c8:	20000150 	.word	0x20000150
 80019cc:	200001fe 	.word	0x200001fe
 80019d0:	20000200 	.word	0x20000200
 80019d4:	20000202 	.word	0x20000202
 80019d8:	200001cc 	.word	0x200001cc
 80019dc:	200001d0 	.word	0x200001d0
 80019e0:	200001d4 	.word	0x200001d4
 80019e4:	00000000 	.word	0x00000000

080019e8 <Calculate_XZ_Angle>:

float Calculate_XZ_Angle(float Gx, float Gz)
{
 80019e8:	b5b0      	push	{r4, r5, r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	ed87 0a01 	vstr	s0, [r7, #4]
 80019f2:	edc7 0a00 	vstr	s1, [r7]
  return atan2(Gx, Gz) * 180 / 3.14159265;
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7fe fd6a 	bl	80004d0 <__aeabi_f2d>
 80019fc:	4604      	mov	r4, r0
 80019fe:	460d      	mov	r5, r1
 8001a00:	6838      	ldr	r0, [r7, #0]
 8001a02:	f7fe fd65 	bl	80004d0 <__aeabi_f2d>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	ec43 2b11 	vmov	d1, r2, r3
 8001a0e:	ec45 4b10 	vmov	d0, r4, r5
 8001a12:	f004 fef7 	bl	8006804 <atan2>
 8001a16:	ec51 0b10 	vmov	r0, r1, d0
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	4b10      	ldr	r3, [pc, #64]	@ (8001a60 <Calculate_XZ_Angle+0x78>)
 8001a20:	f7fe fdae 	bl	8000580 <__aeabi_dmul>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4610      	mov	r0, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	a30a      	add	r3, pc, #40	@ (adr r3, 8001a58 <Calculate_XZ_Angle+0x70>)
 8001a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a32:	f7fe fecf 	bl	80007d4 <__aeabi_ddiv>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f7ff f839 	bl	8000ab4 <__aeabi_d2f>
 8001a42:	4603      	mov	r3, r0
 8001a44:	ee07 3a90 	vmov	s15, r3
}
 8001a48:	eeb0 0a67 	vmov.f32	s0, s15
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bdb0      	pop	{r4, r5, r7, pc}
 8001a52:	bf00      	nop
 8001a54:	f3af 8000 	nop.w
 8001a58:	53c8d4f1 	.word	0x53c8d4f1
 8001a5c:	400921fb 	.word	0x400921fb
 8001a60:	40668000 	.word	0x40668000

08001a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a6a:	f000 fce1 	bl	8002430 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a6e:	f000 f8e5 	bl	8001c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a72:	f7ff fafd 	bl	8001070 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a76:	f7ff fadb 	bl	8001030 <MX_DMA_Init>
  MX_TIM1_Init();
 8001a7a:	f000 fa3d 	bl	8001ef8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001a7e:	f000 facb 	bl	8002018 <MX_TIM3_Init>
  MX_TIM6_Init();
 8001a82:	f000 fb1d 	bl	80020c0 <MX_TIM6_Init>
  MX_I2C1_Init();
 8001a86:	f7ff fb53 	bl	8001130 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001a8a:	f7ff f9db 	bl	8000e44 <MX_ADC1_Init>
  MX_TIM8_Init();
 8001a8e:	f000 fb4d 	bl	800212c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a92:	2100      	movs	r1, #0
 8001a94:	4857      	ldr	r0, [pc, #348]	@ (8001bf4 <main+0x190>)
 8001a96:	f003 fde7 	bl	8005668 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001a9a:	2104      	movs	r1, #4
 8001a9c:	4855      	ldr	r0, [pc, #340]	@ (8001bf4 <main+0x190>)
 8001a9e:	f003 fde3 	bl	8005668 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001aa2:	213c      	movs	r1, #60	@ 0x3c
 8001aa4:	4854      	ldr	r0, [pc, #336]	@ (8001bf8 <main+0x194>)
 8001aa6:	f003 ff4d 	bl	8005944 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8001aaa:	4854      	ldr	r0, [pc, #336]	@ (8001bfc <main+0x198>)
 8001aac:	f003 fd1c 	bl	80054e8 <HAL_TIM_Base_Start_IT>

  MPU6050_Init();
 8001ab0:	f7ff fe46 	bl	8001740 <MPU6050_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    {
      MPU6050_Read_Accel();
 8001ab4:	f7ff fe9a 	bl	80017ec <MPU6050_Read_Accel>
      MPU6050_Read_Gyro();
 8001ab8:	f7ff ff16 	bl	80018e8 <MPU6050_Read_Gyro>

      angle_xz = Calculate_XZ_Angle(Gx, Gz);
 8001abc:	4b50      	ldr	r3, [pc, #320]	@ (8001c00 <main+0x19c>)
 8001abe:	edd3 7a00 	vldr	s15, [r3]
 8001ac2:	4b50      	ldr	r3, [pc, #320]	@ (8001c04 <main+0x1a0>)
 8001ac4:	ed93 7a00 	vldr	s14, [r3]
 8001ac8:	eef0 0a47 	vmov.f32	s1, s14
 8001acc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad0:	f7ff ff8a 	bl	80019e8 <Calculate_XZ_Angle>
 8001ad4:	eef0 7a40 	vmov.f32	s15, s0
 8001ad8:	4b4b      	ldr	r3, [pc, #300]	@ (8001c08 <main+0x1a4>)
 8001ada:	edc3 7a00 	vstr	s15, [r3]
      Update_Angle();
 8001ade:	f7ff fdd3 	bl	8001688 <Update_Angle>
      Kalman_Filter(angle_xz, Gx);
 8001ae2:	4b49      	ldr	r3, [pc, #292]	@ (8001c08 <main+0x1a4>)
 8001ae4:	edd3 7a00 	vldr	s15, [r3]
 8001ae8:	4b45      	ldr	r3, [pc, #276]	@ (8001c00 <main+0x19c>)
 8001aea:	ed93 7a00 	vldr	s14, [r3]
 8001aee:	eef0 0a47 	vmov.f32	s1, s14
 8001af2:	eeb0 0a67 	vmov.f32	s0, s15
 8001af6:	f7ff fcdd 	bl	80014b4 <Kalman_Filter>

      filtered_angle = angle_xz_filtered+chg;
 8001afa:	4b44      	ldr	r3, [pc, #272]	@ (8001c0c <main+0x1a8>)
 8001afc:	ed93 7a00 	vldr	s14, [r3]
 8001b00:	4b43      	ldr	r3, [pc, #268]	@ (8001c10 <main+0x1ac>)
 8001b02:	edd3 7a00 	vldr	s15, [r3]
 8001b06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b0a:	4b42      	ldr	r3, [pc, #264]	@ (8001c14 <main+0x1b0>)
 8001b0c:	edc3 7a00 	vstr	s15, [r3]
      encoder_value = TIM3->CNT;
 8001b10:	4b41      	ldr	r3, [pc, #260]	@ (8001c18 <main+0x1b4>)
 8001b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b41      	ldr	r3, [pc, #260]	@ (8001c1c <main+0x1b8>)
 8001b18:	601a      	str	r2, [r3, #0]

      float setpoint = 0;
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	607b      	str	r3, [r7, #4]
      pid_output = calculate_pid(setpoint, filtered_angle);
 8001b20:	4b3c      	ldr	r3, [pc, #240]	@ (8001c14 <main+0x1b0>)
 8001b22:	edd3 7a00 	vldr	s15, [r3]
 8001b26:	eef0 0a67 	vmov.f32	s1, s15
 8001b2a:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b2e:	f7ff fbeb 	bl	8001308 <calculate_pid>
 8001b32:	eef0 7a40 	vmov.f32	s15, s0
 8001b36:	4b3a      	ldr	r3, [pc, #232]	@ (8001c20 <main+0x1bc>)
 8001b38:	edc3 7a00 	vstr	s15, [r3]

      pid_output = fmaxf(fminf(pid_output, MAX_MOTOR_OUTPUT), -MAX_MOTOR_OUTPUT);
 8001b3c:	4b38      	ldr	r3, [pc, #224]	@ (8001c20 <main+0x1bc>)
 8001b3e:	edd3 7a00 	vldr	s15, [r3]
 8001b42:	eddf 0a38 	vldr	s1, [pc, #224]	@ 8001c24 <main+0x1c0>
 8001b46:	eeb0 0a67 	vmov.f32	s0, s15
 8001b4a:	f004 feba 	bl	80068c2 <fminf>
 8001b4e:	eef0 7a40 	vmov.f32	s15, s0
 8001b52:	eddf 0a35 	vldr	s1, [pc, #212]	@ 8001c28 <main+0x1c4>
 8001b56:	eeb0 0a67 	vmov.f32	s0, s15
 8001b5a:	f004 fe95 	bl	8006888 <fmaxf>
 8001b5e:	eef0 7a40 	vmov.f32	s15, s0
 8001b62:	4b2f      	ldr	r3, [pc, #188]	@ (8001c20 <main+0x1bc>)
 8001b64:	edc3 7a00 	vstr	s15, [r3]
      motor_value = fabsf(pid_output);
 8001b68:	4b2d      	ldr	r3, [pc, #180]	@ (8001c20 <main+0x1bc>)
 8001b6a:	edd3 7a00 	vldr	s15, [r3]
 8001b6e:	eef0 7ae7 	vabs.f32	s15, s15
 8001b72:	4b2e      	ldr	r3, [pc, #184]	@ (8001c2c <main+0x1c8>)
 8001b74:	edc3 7a00 	vstr	s15, [r3]

      if (pid_output >= 0)
 8001b78:	4b29      	ldr	r3, [pc, #164]	@ (8001c20 <main+0x1bc>)
 8001b7a:	edd3 7a00 	vldr	s15, [r3]
 8001b7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b86:	db0c      	blt.n	8001ba2 <main+0x13e>
      {
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, SET);
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b8e:	4828      	ldr	r0, [pc, #160]	@ (8001c30 <main+0x1cc>)
 8001b90:	f001 fdfa 	bl	8003788 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, SET);
 8001b94:	2201      	movs	r2, #1
 8001b96:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b9a:	4825      	ldr	r0, [pc, #148]	@ (8001c30 <main+0x1cc>)
 8001b9c:	f001 fdf4 	bl	8003788 <HAL_GPIO_WritePin>
 8001ba0:	e00b      	b.n	8001bba <main+0x156>
      }
      else
      {
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RESET);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ba8:	4821      	ldr	r0, [pc, #132]	@ (8001c30 <main+0x1cc>)
 8001baa:	f001 fded 	bl	8003788 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, RESET);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bb4:	481e      	ldr	r0, [pc, #120]	@ (8001c30 <main+0x1cc>)
 8001bb6:	f001 fde7 	bl	8003788 <HAL_GPIO_WritePin>
      }

      TIM1->CCR1 = motor_value;
 8001bba:	4b1c      	ldr	r3, [pc, #112]	@ (8001c2c <main+0x1c8>)
 8001bbc:	edd3 7a00 	vldr	s15, [r3]
 8001bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c34 <main+0x1d0>)
 8001bc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bc6:	ee17 2a90 	vmov	r2, s15
 8001bca:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM1->CCR2 = motor_value;
 8001bcc:	4b17      	ldr	r3, [pc, #92]	@ (8001c2c <main+0x1c8>)
 8001bce:	edd3 7a00 	vldr	s15, [r3]
 8001bd2:	4b18      	ldr	r3, [pc, #96]	@ (8001c34 <main+0x1d0>)
 8001bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bd8:	ee17 2a90 	vmov	r2, s15
 8001bdc:	639a      	str	r2, [r3, #56]	@ 0x38

      a = filtered_angle * 10;
 8001bde:	4b0d      	ldr	r3, [pc, #52]	@ (8001c14 <main+0x1b0>)
 8001be0:	edd3 7a00 	vldr	s15, [r3]
 8001be4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001be8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bec:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <main+0x1d4>)
 8001bee:	edc3 7a00 	vstr	s15, [r3]
    {
 8001bf2:	e75f      	b.n	8001ab4 <main+0x50>
 8001bf4:	20000204 	.word	0x20000204
 8001bf8:	2000024c 	.word	0x2000024c
 8001bfc:	20000294 	.word	0x20000294
 8001c00:	200001cc 	.word	0x200001cc
 8001c04:	200001d4 	.word	0x200001d4
 8001c08:	200001d8 	.word	0x200001d8
 8001c0c:	200001b4 	.word	0x200001b4
 8001c10:	2000002c 	.word	0x2000002c
 8001c14:	200001dc 	.word	0x200001dc
 8001c18:	40000400 	.word	0x40000400
 8001c1c:	200001a4 	.word	0x200001a4
 8001c20:	200001f4 	.word	0x200001f4
 8001c24:	43e10000 	.word	0x43e10000
 8001c28:	c3e10000 	.word	0xc3e10000
 8001c2c:	200001ec 	.word	0x200001ec
 8001c30:	40020800 	.word	0x40020800
 8001c34:	40010000 	.word	0x40010000
 8001c38:	200001f0 	.word	0x200001f0

08001c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b094      	sub	sp, #80	@ 0x50
 8001c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c42:	f107 031c 	add.w	r3, r7, #28
 8001c46:	2234      	movs	r2, #52	@ 0x34
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f004 fda8 	bl	80067a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c50:	f107 0308 	add.w	r3, r7, #8
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c60:	2300      	movs	r3, #0
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	4b2c      	ldr	r3, [pc, #176]	@ (8001d18 <SystemClock_Config+0xdc>)
 8001c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c68:	4a2b      	ldr	r2, [pc, #172]	@ (8001d18 <SystemClock_Config+0xdc>)
 8001c6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c70:	4b29      	ldr	r3, [pc, #164]	@ (8001d18 <SystemClock_Config+0xdc>)
 8001c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	4b26      	ldr	r3, [pc, #152]	@ (8001d1c <SystemClock_Config+0xe0>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a25      	ldr	r2, [pc, #148]	@ (8001d1c <SystemClock_Config+0xe0>)
 8001c86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	4b23      	ldr	r3, [pc, #140]	@ (8001d1c <SystemClock_Config+0xe0>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c9c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ca0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ca6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001caa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001cac:	2308      	movs	r3, #8
 8001cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001cb0:	23b4      	movs	r3, #180	@ 0xb4
 8001cb2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cc0:	f107 031c 	add.w	r3, r7, #28
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f003 f921 	bl	8004f0c <HAL_RCC_OscConfig>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001cd0:	f000 f852 	bl	8001d78 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001cd4:	f002 fd96 	bl	8004804 <HAL_PWREx_EnableOverDrive>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001cde:	f000 f84b 	bl	8001d78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8001ce2:	230f      	movs	r3, #15
 8001ce4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cee:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001cf2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cf8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cfa:	f107 0308 	add.w	r3, r7, #8
 8001cfe:	2105      	movs	r1, #5
 8001d00:	4618      	mov	r0, r3
 8001d02:	f002 fdcf 	bl	80048a4 <HAL_RCC_ClockConfig>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001d0c:	f000 f834 	bl	8001d78 <Error_Handler>
  }
}
 8001d10:	bf00      	nop
 8001d12:	3750      	adds	r7, #80	@ 0x50
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40007000 	.word	0x40007000

08001d20 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
   if(htim->Instance == TIM6)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a0e      	ldr	r2, [pc, #56]	@ (8001d68 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d114      	bne.n	8001d5c <HAL_TIM_PeriodElapsedCallback+0x3c>
   {
      encoder_arr[count] = encoder_value;
 8001d32:	4b0e      	ldr	r3, [pc, #56]	@ (8001d6c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a0e      	ldr	r2, [pc, #56]	@ (8001d70 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	490e      	ldr	r1, [pc, #56]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      count++;
 8001d40:	4b0a      	ldr	r3, [pc, #40]	@ (8001d6c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	3301      	adds	r3, #1
 8001d46:	4a09      	ldr	r2, [pc, #36]	@ (8001d6c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001d48:	6013      	str	r3, [r2, #0]
      count = count % 2;
 8001d4a:	4b08      	ldr	r3, [pc, #32]	@ (8001d6c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	bfb8      	it	lt
 8001d56:	425b      	neglt	r3, r3
 8001d58:	4a04      	ldr	r2, [pc, #16]	@ (8001d6c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001d5a:	6013      	str	r3, [r2, #0]
   }
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	40001000 	.word	0x40001000
 8001d6c:	200001a8 	.word	0x200001a8
 8001d70:	200001a4 	.word	0x200001a4
 8001d74:	200001ac 	.word	0x200001ac

08001d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d7c:	b672      	cpsid	i
}
 8001d7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d80:	bf00      	nop
 8001d82:	e7fd      	b.n	8001d80 <Error_Handler+0x8>

08001d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	607b      	str	r3, [r7, #4]
 8001d8e:	4b10      	ldr	r3, [pc, #64]	@ (8001dd0 <HAL_MspInit+0x4c>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d92:	4a0f      	ldr	r2, [pc, #60]	@ (8001dd0 <HAL_MspInit+0x4c>)
 8001d94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd0 <HAL_MspInit+0x4c>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001da2:	607b      	str	r3, [r7, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	603b      	str	r3, [r7, #0]
 8001daa:	4b09      	ldr	r3, [pc, #36]	@ (8001dd0 <HAL_MspInit+0x4c>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dae:	4a08      	ldr	r2, [pc, #32]	@ (8001dd0 <HAL_MspInit+0x4c>)
 8001db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001db4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001db6:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <HAL_MspInit+0x4c>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800

08001dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <NMI_Handler+0x4>

08001ddc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001de0:	bf00      	nop
 8001de2:	e7fd      	b.n	8001de0 <HardFault_Handler+0x4>

08001de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de8:	bf00      	nop
 8001dea:	e7fd      	b.n	8001de8 <MemManage_Handler+0x4>

08001dec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <BusFault_Handler+0x4>

08001df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df8:	bf00      	nop
 8001dfa:	e7fd      	b.n	8001df8 <UsageFault_Handler+0x4>

08001dfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e2a:	f000 fb53 	bl	80024d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e38:	4802      	ldr	r0, [pc, #8]	@ (8001e44 <ADC_IRQHandler+0x10>)
 8001e3a:	f000 fbae 	bl	800259a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200000a8 	.word	0x200000a8

08001e48 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e4c:	4802      	ldr	r0, [pc, #8]	@ (8001e58 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001e4e:	f003 fe07 	bl	8005a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000204 	.word	0x20000204

08001e5c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e60:	4802      	ldr	r0, [pc, #8]	@ (8001e6c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e62:	f003 fdfd 	bl	8005a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000204 	.word	0x20000204

08001e70 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e74:	4802      	ldr	r0, [pc, #8]	@ (8001e80 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001e76:	f003 fdf3 	bl	8005a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000204 	.word	0x20000204

08001e84 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e88:	4802      	ldr	r0, [pc, #8]	@ (8001e94 <TIM1_CC_IRQHandler+0x10>)
 8001e8a:	f003 fde9 	bl	8005a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000204 	.word	0x20000204

08001e98 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001e9c:	4802      	ldr	r0, [pc, #8]	@ (8001ea8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001e9e:	f003 fddf 	bl	8005a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	200002dc 	.word	0x200002dc

08001eac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001eb0:	4802      	ldr	r0, [pc, #8]	@ (8001ebc <TIM6_DAC_IRQHandler+0x10>)
 8001eb2:	f003 fdd5 	bl	8005a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000294 	.word	0x20000294

08001ec0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ec4:	4802      	ldr	r0, [pc, #8]	@ (8001ed0 <DMA2_Stream0_IRQHandler+0x10>)
 8001ec6:	f001 f88f 	bl	8002fe8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	200000f0 	.word	0x200000f0

08001ed4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ed8:	4b06      	ldr	r3, [pc, #24]	@ (8001ef4 <SystemInit+0x20>)
 8001eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ede:	4a05      	ldr	r2, [pc, #20]	@ (8001ef4 <SystemInit+0x20>)
 8001ee0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ee4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b092      	sub	sp, #72	@ 0x48
 8001efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001efe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]
 8001f18:	615a      	str	r2, [r3, #20]
 8001f1a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	2220      	movs	r2, #32
 8001f20:	2100      	movs	r1, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f004 fc3c 	bl	80067a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f28:	4b39      	ldr	r3, [pc, #228]	@ (8002010 <MX_TIM1_Init+0x118>)
 8001f2a:	4a3a      	ldr	r2, [pc, #232]	@ (8002014 <MX_TIM1_Init+0x11c>)
 8001f2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9-1;
 8001f2e:	4b38      	ldr	r3, [pc, #224]	@ (8002010 <MX_TIM1_Init+0x118>)
 8001f30:	2208      	movs	r2, #8
 8001f32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f34:	4b36      	ldr	r3, [pc, #216]	@ (8002010 <MX_TIM1_Init+0x118>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001f3a:	4b35      	ldr	r3, [pc, #212]	@ (8002010 <MX_TIM1_Init+0x118>)
 8001f3c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f42:	4b33      	ldr	r3, [pc, #204]	@ (8002010 <MX_TIM1_Init+0x118>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f48:	4b31      	ldr	r3, [pc, #196]	@ (8002010 <MX_TIM1_Init+0x118>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f4e:	4b30      	ldr	r3, [pc, #192]	@ (8002010 <MX_TIM1_Init+0x118>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f54:	482e      	ldr	r0, [pc, #184]	@ (8002010 <MX_TIM1_Init+0x118>)
 8001f56:	f003 fb37 	bl	80055c8 <HAL_TIM_PWM_Init>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001f60:	f7ff ff0a 	bl	8001d78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f64:	2300      	movs	r3, #0
 8001f66:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f6c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f70:	4619      	mov	r1, r3
 8001f72:	4827      	ldr	r0, [pc, #156]	@ (8002010 <MX_TIM1_Init+0x118>)
 8001f74:	f004 fb32 	bl	80065dc <HAL_TIMEx_MasterConfigSynchronization>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001f7e:	f7ff fefb 	bl	8001d78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f82:	2360      	movs	r3, #96	@ 0x60
 8001f84:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f96:	2300      	movs	r3, #0
 8001f98:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	481a      	ldr	r0, [pc, #104]	@ (8002010 <MX_TIM1_Init+0x118>)
 8001fa8:	f003 fe4a 	bl	8005c40 <HAL_TIM_PWM_ConfigChannel>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001fb2:	f7ff fee1 	bl	8001d78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fba:	2204      	movs	r2, #4
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4814      	ldr	r0, [pc, #80]	@ (8002010 <MX_TIM1_Init+0x118>)
 8001fc0:	f003 fe3e 	bl	8005c40 <HAL_TIM_PWM_ConfigChannel>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001fca:	f7ff fed5 	bl	8001d78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fe2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fe6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001fec:	1d3b      	adds	r3, r7, #4
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4807      	ldr	r0, [pc, #28]	@ (8002010 <MX_TIM1_Init+0x118>)
 8001ff2:	f004 fb6f 	bl	80066d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001ffc:	f7ff febc 	bl	8001d78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002000:	4803      	ldr	r0, [pc, #12]	@ (8002010 <MX_TIM1_Init+0x118>)
 8002002:	f000 f9b1 	bl	8002368 <HAL_TIM_MspPostInit>

}
 8002006:	bf00      	nop
 8002008:	3748      	adds	r7, #72	@ 0x48
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000204 	.word	0x20000204
 8002014:	40010000 	.word	0x40010000

08002018 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08c      	sub	sp, #48	@ 0x30
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800201e:	f107 030c 	add.w	r3, r7, #12
 8002022:	2224      	movs	r2, #36	@ 0x24
 8002024:	2100      	movs	r1, #0
 8002026:	4618      	mov	r0, r3
 8002028:	f004 fbba 	bl	80067a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002034:	4b20      	ldr	r3, [pc, #128]	@ (80020b8 <MX_TIM3_Init+0xa0>)
 8002036:	4a21      	ldr	r2, [pc, #132]	@ (80020bc <MX_TIM3_Init+0xa4>)
 8002038:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800203a:	4b1f      	ldr	r3, [pc, #124]	@ (80020b8 <MX_TIM3_Init+0xa0>)
 800203c:	2200      	movs	r2, #0
 800203e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002040:	4b1d      	ldr	r3, [pc, #116]	@ (80020b8 <MX_TIM3_Init+0xa0>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002046:	4b1c      	ldr	r3, [pc, #112]	@ (80020b8 <MX_TIM3_Init+0xa0>)
 8002048:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800204c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800204e:	4b1a      	ldr	r3, [pc, #104]	@ (80020b8 <MX_TIM3_Init+0xa0>)
 8002050:	2200      	movs	r2, #0
 8002052:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002054:	4b18      	ldr	r3, [pc, #96]	@ (80020b8 <MX_TIM3_Init+0xa0>)
 8002056:	2200      	movs	r2, #0
 8002058:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800205a:	2303      	movs	r3, #3
 800205c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002062:	2301      	movs	r3, #1
 8002064:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002066:	2300      	movs	r3, #0
 8002068:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 800206a:	2305      	movs	r3, #5
 800206c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800206e:	2300      	movs	r3, #0
 8002070:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002072:	2301      	movs	r3, #1
 8002074:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002076:	2300      	movs	r3, #0
 8002078:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 800207a:	2305      	movs	r3, #5
 800207c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800207e:	f107 030c 	add.w	r3, r7, #12
 8002082:	4619      	mov	r1, r3
 8002084:	480c      	ldr	r0, [pc, #48]	@ (80020b8 <MX_TIM3_Init+0xa0>)
 8002086:	f003 fbb7 	bl	80057f8 <HAL_TIM_Encoder_Init>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002090:	f7ff fe72 	bl	8001d78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002094:	2300      	movs	r3, #0
 8002096:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002098:	2300      	movs	r3, #0
 800209a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800209c:	1d3b      	adds	r3, r7, #4
 800209e:	4619      	mov	r1, r3
 80020a0:	4805      	ldr	r0, [pc, #20]	@ (80020b8 <MX_TIM3_Init+0xa0>)
 80020a2:	f004 fa9b 	bl	80065dc <HAL_TIMEx_MasterConfigSynchronization>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80020ac:	f7ff fe64 	bl	8001d78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020b0:	bf00      	nop
 80020b2:	3730      	adds	r7, #48	@ 0x30
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	2000024c 	.word	0x2000024c
 80020bc:	40000400 	.word	0x40000400

080020c0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020c6:	463b      	mov	r3, r7
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80020ce:	4b15      	ldr	r3, [pc, #84]	@ (8002124 <MX_TIM6_Init+0x64>)
 80020d0:	4a15      	ldr	r2, [pc, #84]	@ (8002128 <MX_TIM6_Init+0x68>)
 80020d2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 900-1;
 80020d4:	4b13      	ldr	r3, [pc, #76]	@ (8002124 <MX_TIM6_Init+0x64>)
 80020d6:	f240 3283 	movw	r2, #899	@ 0x383
 80020da:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020dc:	4b11      	ldr	r3, [pc, #68]	@ (8002124 <MX_TIM6_Init+0x64>)
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80020e2:	4b10      	ldr	r3, [pc, #64]	@ (8002124 <MX_TIM6_Init+0x64>)
 80020e4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020e8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002124 <MX_TIM6_Init+0x64>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80020f0:	480c      	ldr	r0, [pc, #48]	@ (8002124 <MX_TIM6_Init+0x64>)
 80020f2:	f003 f9a9 	bl	8005448 <HAL_TIM_Base_Init>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80020fc:	f7ff fe3c 	bl	8001d78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002100:	2300      	movs	r3, #0
 8002102:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002104:	2300      	movs	r3, #0
 8002106:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002108:	463b      	mov	r3, r7
 800210a:	4619      	mov	r1, r3
 800210c:	4805      	ldr	r0, [pc, #20]	@ (8002124 <MX_TIM6_Init+0x64>)
 800210e:	f004 fa65 	bl	80065dc <HAL_TIMEx_MasterConfigSynchronization>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002118:	f7ff fe2e 	bl	8001d78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000294 	.word	0x20000294
 8002128:	40001000 	.word	0x40001000

0800212c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002132:	f107 0308 	add.w	r3, r7, #8
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002140:	463b      	mov	r3, r7
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002148:	4b1e      	ldr	r3, [pc, #120]	@ (80021c4 <MX_TIM8_Init+0x98>)
 800214a:	4a1f      	ldr	r2, [pc, #124]	@ (80021c8 <MX_TIM8_Init+0x9c>)
 800214c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 800214e:	4b1d      	ldr	r3, [pc, #116]	@ (80021c4 <MX_TIM8_Init+0x98>)
 8002150:	22b3      	movs	r2, #179	@ 0xb3
 8002152:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002154:	4b1b      	ldr	r3, [pc, #108]	@ (80021c4 <MX_TIM8_Init+0x98>)
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 10000-1;
 800215a:	4b1a      	ldr	r3, [pc, #104]	@ (80021c4 <MX_TIM8_Init+0x98>)
 800215c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002160:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002162:	4b18      	ldr	r3, [pc, #96]	@ (80021c4 <MX_TIM8_Init+0x98>)
 8002164:	2200      	movs	r2, #0
 8002166:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002168:	4b16      	ldr	r3, [pc, #88]	@ (80021c4 <MX_TIM8_Init+0x98>)
 800216a:	2200      	movs	r2, #0
 800216c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800216e:	4b15      	ldr	r3, [pc, #84]	@ (80021c4 <MX_TIM8_Init+0x98>)
 8002170:	2200      	movs	r2, #0
 8002172:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002174:	4813      	ldr	r0, [pc, #76]	@ (80021c4 <MX_TIM8_Init+0x98>)
 8002176:	f003 f967 	bl	8005448 <HAL_TIM_Base_Init>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8002180:	f7ff fdfa 	bl	8001d78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002184:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002188:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800218a:	f107 0308 	add.w	r3, r7, #8
 800218e:	4619      	mov	r1, r3
 8002190:	480c      	ldr	r0, [pc, #48]	@ (80021c4 <MX_TIM8_Init+0x98>)
 8002192:	f003 fe17 	bl	8005dc4 <HAL_TIM_ConfigClockSource>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 800219c:	f7ff fdec 	bl	8001d78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021a0:	2320      	movs	r3, #32
 80021a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021a4:	2300      	movs	r3, #0
 80021a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80021a8:	463b      	mov	r3, r7
 80021aa:	4619      	mov	r1, r3
 80021ac:	4805      	ldr	r0, [pc, #20]	@ (80021c4 <MX_TIM8_Init+0x98>)
 80021ae:	f004 fa15 	bl	80065dc <HAL_TIMEx_MasterConfigSynchronization>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80021b8:	f7ff fdde 	bl	8001d78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80021bc:	bf00      	nop
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	200002dc 	.word	0x200002dc
 80021c8:	40010400 	.word	0x40010400

080021cc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a1a      	ldr	r2, [pc, #104]	@ (8002244 <HAL_TIM_PWM_MspInit+0x78>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d12d      	bne.n	800223a <HAL_TIM_PWM_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	4b19      	ldr	r3, [pc, #100]	@ (8002248 <HAL_TIM_PWM_MspInit+0x7c>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e6:	4a18      	ldr	r2, [pc, #96]	@ (8002248 <HAL_TIM_PWM_MspInit+0x7c>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ee:	4b16      	ldr	r3, [pc, #88]	@ (8002248 <HAL_TIM_PWM_MspInit+0x7c>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80021fa:	2200      	movs	r2, #0
 80021fc:	2100      	movs	r1, #0
 80021fe:	2018      	movs	r0, #24
 8002200:	f000 fe0d 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002204:	2018      	movs	r0, #24
 8002206:	f000 fe26 	bl	8002e56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800220a:	2200      	movs	r2, #0
 800220c:	2100      	movs	r1, #0
 800220e:	2019      	movs	r0, #25
 8002210:	f000 fe05 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002214:	2019      	movs	r0, #25
 8002216:	f000 fe1e 	bl	8002e56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	2100      	movs	r1, #0
 800221e:	201a      	movs	r0, #26
 8002220:	f000 fdfd 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002224:	201a      	movs	r0, #26
 8002226:	f000 fe16 	bl	8002e56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800222a:	2200      	movs	r2, #0
 800222c:	2100      	movs	r1, #0
 800222e:	201b      	movs	r0, #27
 8002230:	f000 fdf5 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002234:	201b      	movs	r0, #27
 8002236:	f000 fe0e 	bl	8002e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800223a:	bf00      	nop
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40010000 	.word	0x40010000
 8002248:	40023800 	.word	0x40023800

0800224c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08a      	sub	sp, #40	@ 0x28
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002254:	f107 0314 	add.w	r3, r7, #20
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a19      	ldr	r2, [pc, #100]	@ (80022d0 <HAL_TIM_Encoder_MspInit+0x84>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d12b      	bne.n	80022c6 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	4b18      	ldr	r3, [pc, #96]	@ (80022d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002276:	4a17      	ldr	r2, [pc, #92]	@ (80022d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002278:	f043 0302 	orr.w	r3, r3, #2
 800227c:	6413      	str	r3, [r2, #64]	@ 0x40
 800227e:	4b15      	ldr	r3, [pc, #84]	@ (80022d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	4b11      	ldr	r3, [pc, #68]	@ (80022d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002292:	4a10      	ldr	r2, [pc, #64]	@ (80022d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002294:	f043 0302 	orr.w	r3, r3, #2
 8002298:	6313      	str	r3, [r2, #48]	@ 0x30
 800229a:	4b0e      	ldr	r3, [pc, #56]	@ (80022d4 <HAL_TIM_Encoder_MspInit+0x88>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80022a6:	2330      	movs	r3, #48	@ 0x30
 80022a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022aa:	2302      	movs	r3, #2
 80022ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022ae:	2301      	movs	r3, #1
 80022b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b2:	2300      	movs	r3, #0
 80022b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022b6:	2302      	movs	r3, #2
 80022b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ba:	f107 0314 	add.w	r3, r7, #20
 80022be:	4619      	mov	r1, r3
 80022c0:	4805      	ldr	r0, [pc, #20]	@ (80022d8 <HAL_TIM_Encoder_MspInit+0x8c>)
 80022c2:	f001 f8cd 	bl	8003460 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80022c6:	bf00      	nop
 80022c8:	3728      	adds	r7, #40	@ 0x28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40000400 	.word	0x40000400
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40020400 	.word	0x40020400

080022dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a1c      	ldr	r2, [pc, #112]	@ (800235c <HAL_TIM_Base_MspInit+0x80>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d116      	bne.n	800231c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002360 <HAL_TIM_Base_MspInit+0x84>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002360 <HAL_TIM_Base_MspInit+0x84>)
 80022f8:	f043 0310 	orr.w	r3, r3, #16
 80022fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80022fe:	4b18      	ldr	r3, [pc, #96]	@ (8002360 <HAL_TIM_Base_MspInit+0x84>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002302:	f003 0310 	and.w	r3, r3, #16
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800230a:	2200      	movs	r2, #0
 800230c:	2100      	movs	r1, #0
 800230e:	2036      	movs	r0, #54	@ 0x36
 8002310:	f000 fd85 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002314:	2036      	movs	r0, #54	@ 0x36
 8002316:	f000 fd9e 	bl	8002e56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800231a:	e01a      	b.n	8002352 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM8)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a10      	ldr	r2, [pc, #64]	@ (8002364 <HAL_TIM_Base_MspInit+0x88>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d115      	bne.n	8002352 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	4b0d      	ldr	r3, [pc, #52]	@ (8002360 <HAL_TIM_Base_MspInit+0x84>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232e:	4a0c      	ldr	r2, [pc, #48]	@ (8002360 <HAL_TIM_Base_MspInit+0x84>)
 8002330:	f043 0302 	orr.w	r3, r3, #2
 8002334:	6453      	str	r3, [r2, #68]	@ 0x44
 8002336:	4b0a      	ldr	r3, [pc, #40]	@ (8002360 <HAL_TIM_Base_MspInit+0x84>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	60bb      	str	r3, [r7, #8]
 8002340:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002342:	2200      	movs	r2, #0
 8002344:	2100      	movs	r1, #0
 8002346:	202c      	movs	r0, #44	@ 0x2c
 8002348:	f000 fd69 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800234c:	202c      	movs	r0, #44	@ 0x2c
 800234e:	f000 fd82 	bl	8002e56 <HAL_NVIC_EnableIRQ>
}
 8002352:	bf00      	nop
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40001000 	.word	0x40001000
 8002360:	40023800 	.word	0x40023800
 8002364:	40010400 	.word	0x40010400

08002368 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002370:	f107 030c 	add.w	r3, r7, #12
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
 800237e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a12      	ldr	r2, [pc, #72]	@ (80023d0 <HAL_TIM_MspPostInit+0x68>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d11e      	bne.n	80023c8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	4b11      	ldr	r3, [pc, #68]	@ (80023d4 <HAL_TIM_MspPostInit+0x6c>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002392:	4a10      	ldr	r2, [pc, #64]	@ (80023d4 <HAL_TIM_MspPostInit+0x6c>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	6313      	str	r3, [r2, #48]	@ 0x30
 800239a:	4b0e      	ldr	r3, [pc, #56]	@ (80023d4 <HAL_TIM_MspPostInit+0x6c>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	60bb      	str	r3, [r7, #8]
 80023a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023a6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80023aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ac:	2302      	movs	r3, #2
 80023ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023b8:	2301      	movs	r3, #1
 80023ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023bc:	f107 030c 	add.w	r3, r7, #12
 80023c0:	4619      	mov	r1, r3
 80023c2:	4805      	ldr	r0, [pc, #20]	@ (80023d8 <HAL_TIM_MspPostInit+0x70>)
 80023c4:	f001 f84c 	bl	8003460 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80023c8:	bf00      	nop
 80023ca:	3720      	adds	r7, #32
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40010000 	.word	0x40010000
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40020000 	.word	0x40020000

080023dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002414 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80023e0:	f7ff fd78 	bl	8001ed4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023e4:	480c      	ldr	r0, [pc, #48]	@ (8002418 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023e6:	490d      	ldr	r1, [pc, #52]	@ (800241c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002420 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023ec:	e002      	b.n	80023f4 <LoopCopyDataInit>

080023ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023f2:	3304      	adds	r3, #4

080023f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023f8:	d3f9      	bcc.n	80023ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002424 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002428 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002400:	e001      	b.n	8002406 <LoopFillZerobss>

08002402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002404:	3204      	adds	r2, #4

08002406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002408:	d3fb      	bcc.n	8002402 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800240a:	f004 f9d7 	bl	80067bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800240e:	f7ff fb29 	bl	8001a64 <main>
  bx  lr    
 8002412:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002414:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800241c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002420:	080070c0 	.word	0x080070c0
  ldr r2, =_sbss
 8002424:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002428:	20000460 	.word	0x20000460

0800242c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800242c:	e7fe      	b.n	800242c <CAN1_RX0_IRQHandler>
	...

08002430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002434:	4b0e      	ldr	r3, [pc, #56]	@ (8002470 <HAL_Init+0x40>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0d      	ldr	r2, [pc, #52]	@ (8002470 <HAL_Init+0x40>)
 800243a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800243e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002440:	4b0b      	ldr	r3, [pc, #44]	@ (8002470 <HAL_Init+0x40>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a0a      	ldr	r2, [pc, #40]	@ (8002470 <HAL_Init+0x40>)
 8002446:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800244a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800244c:	4b08      	ldr	r3, [pc, #32]	@ (8002470 <HAL_Init+0x40>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a07      	ldr	r2, [pc, #28]	@ (8002470 <HAL_Init+0x40>)
 8002452:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002456:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002458:	2003      	movs	r0, #3
 800245a:	f000 fcd5 	bl	8002e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800245e:	200f      	movs	r0, #15
 8002460:	f000 f808 	bl	8002474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002464:	f7ff fc8e 	bl	8001d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40023c00 	.word	0x40023c00

08002474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800247c:	4b12      	ldr	r3, [pc, #72]	@ (80024c8 <HAL_InitTick+0x54>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4b12      	ldr	r3, [pc, #72]	@ (80024cc <HAL_InitTick+0x58>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	4619      	mov	r1, r3
 8002486:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800248a:	fbb3 f3f1 	udiv	r3, r3, r1
 800248e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002492:	4618      	mov	r0, r3
 8002494:	f000 fced 	bl	8002e72 <HAL_SYSTICK_Config>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e00e      	b.n	80024c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b0f      	cmp	r3, #15
 80024a6:	d80a      	bhi.n	80024be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024a8:	2200      	movs	r2, #0
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295
 80024b0:	f000 fcb5 	bl	8002e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024b4:	4a06      	ldr	r2, [pc, #24]	@ (80024d0 <HAL_InitTick+0x5c>)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	e000      	b.n	80024c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000030 	.word	0x20000030
 80024cc:	20000038 	.word	0x20000038
 80024d0:	20000034 	.word	0x20000034

080024d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d8:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <HAL_IncTick+0x20>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	4b06      	ldr	r3, [pc, #24]	@ (80024f8 <HAL_IncTick+0x24>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4413      	add	r3, r2
 80024e4:	4a04      	ldr	r2, [pc, #16]	@ (80024f8 <HAL_IncTick+0x24>)
 80024e6:	6013      	str	r3, [r2, #0]
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	20000038 	.word	0x20000038
 80024f8:	20000324 	.word	0x20000324

080024fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002500:	4b03      	ldr	r3, [pc, #12]	@ (8002510 <HAL_GetTick+0x14>)
 8002502:	681b      	ldr	r3, [r3, #0]
}
 8002504:	4618      	mov	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000324 	.word	0x20000324

08002514 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800251c:	2300      	movs	r3, #0
 800251e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e033      	b.n	8002592 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252e:	2b00      	cmp	r3, #0
 8002530:	d109      	bne.n	8002546 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7fe fcfc 	bl	8000f30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254a:	f003 0310 	and.w	r3, r3, #16
 800254e:	2b00      	cmp	r3, #0
 8002550:	d118      	bne.n	8002584 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002556:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800255a:	f023 0302 	bic.w	r3, r3, #2
 800255e:	f043 0202 	orr.w	r2, r3, #2
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 fa78 	bl	8002a5c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002576:	f023 0303 	bic.w	r3, r3, #3
 800257a:	f043 0201 	orr.w	r2, r3, #1
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	641a      	str	r2, [r3, #64]	@ 0x40
 8002582:	e001      	b.n	8002588 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002590:	7bfb      	ldrb	r3, [r7, #15]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b086      	sub	sp, #24
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	2300      	movs	r3, #0
 80025a8:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	f003 0320 	and.w	r3, r3, #32
 80025c8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d049      	beq.n	8002664 <HAL_ADC_IRQHandler+0xca>
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d046      	beq.n	8002664 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025da:	f003 0310 	and.w	r3, r3, #16
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d105      	bne.n	80025ee <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d12b      	bne.n	8002654 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002600:	2b00      	cmp	r3, #0
 8002602:	d127      	bne.n	8002654 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800260a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800260e:	2b00      	cmp	r3, #0
 8002610:	d006      	beq.n	8002620 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800261c:	2b00      	cmp	r3, #0
 800261e:	d119      	bne.n	8002654 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0220 	bic.w	r2, r2, #32
 800262e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002634:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002640:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d105      	bne.n	8002654 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264c:	f043 0201 	orr.w	r2, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f8b0 	bl	80027ba <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f06f 0212 	mvn.w	r2, #18
 8002662:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002672:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d057      	beq.n	800272a <HAL_ADC_IRQHandler+0x190>
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d054      	beq.n	800272a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	2b00      	cmp	r3, #0
 800268a:	d105      	bne.n	8002698 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002690:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d139      	bne.n	800271a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ac:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d006      	beq.n	80026c2 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d12b      	bne.n	800271a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d124      	bne.n	800271a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d11d      	bne.n	800271a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d119      	bne.n	800271a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026f4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800270a:	2b00      	cmp	r3, #0
 800270c:	d105      	bne.n	800271a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002712:	f043 0201 	orr.w	r2, r3, #1
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 fa9a 	bl	8002c54 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f06f 020c 	mvn.w	r2, #12
 8002728:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002738:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d017      	beq.n	8002770 <HAL_ADC_IRQHandler+0x1d6>
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d014      	beq.n	8002770 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b01      	cmp	r3, #1
 8002752:	d10d      	bne.n	8002770 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002758:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f834 	bl	80027ce <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f06f 0201 	mvn.w	r2, #1
 800276e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f003 0320 	and.w	r3, r3, #32
 8002776:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800277e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d015      	beq.n	80027b2 <HAL_ADC_IRQHandler+0x218>
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d012      	beq.n	80027b2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002790:	f043 0202 	orr.w	r2, r3, #2
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f06f 0220 	mvn.w	r2, #32
 80027a0:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f81d 	bl	80027e2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f06f 0220 	mvn.w	r2, #32
 80027b0:	601a      	str	r2, [r3, #0]
  }
}
 80027b2:	bf00      	nop
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
	...

080027f8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002802:	2300      	movs	r3, #0
 8002804:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x1c>
 8002810:	2302      	movs	r3, #2
 8002812:	e113      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x244>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b09      	cmp	r3, #9
 8002822:	d925      	bls.n	8002870 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68d9      	ldr	r1, [r3, #12]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	b29b      	uxth	r3, r3
 8002830:	461a      	mov	r2, r3
 8002832:	4613      	mov	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	4413      	add	r3, r2
 8002838:	3b1e      	subs	r3, #30
 800283a:	2207      	movs	r2, #7
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43da      	mvns	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	400a      	ands	r2, r1
 8002848:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68d9      	ldr	r1, [r3, #12]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	b29b      	uxth	r3, r3
 800285a:	4618      	mov	r0, r3
 800285c:	4603      	mov	r3, r0
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	4403      	add	r3, r0
 8002862:	3b1e      	subs	r3, #30
 8002864:	409a      	lsls	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	60da      	str	r2, [r3, #12]
 800286e:	e022      	b.n	80028b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6919      	ldr	r1, [r3, #16]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	b29b      	uxth	r3, r3
 800287c:	461a      	mov	r2, r3
 800287e:	4613      	mov	r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	4413      	add	r3, r2
 8002884:	2207      	movs	r2, #7
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43da      	mvns	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	400a      	ands	r2, r1
 8002892:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6919      	ldr	r1, [r3, #16]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	4618      	mov	r0, r3
 80028a6:	4603      	mov	r3, r0
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	4403      	add	r3, r0
 80028ac:	409a      	lsls	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b06      	cmp	r3, #6
 80028bc:	d824      	bhi.n	8002908 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	3b05      	subs	r3, #5
 80028d0:	221f      	movs	r2, #31
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43da      	mvns	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	400a      	ands	r2, r1
 80028de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	4618      	mov	r0, r3
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	3b05      	subs	r3, #5
 80028fa:	fa00 f203 	lsl.w	r2, r0, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	635a      	str	r2, [r3, #52]	@ 0x34
 8002906:	e04c      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b0c      	cmp	r3, #12
 800290e:	d824      	bhi.n	800295a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	3b23      	subs	r3, #35	@ 0x23
 8002922:	221f      	movs	r2, #31
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43da      	mvns	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	400a      	ands	r2, r1
 8002930:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	b29b      	uxth	r3, r3
 800293e:	4618      	mov	r0, r3
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	3b23      	subs	r3, #35	@ 0x23
 800294c:	fa00 f203 	lsl.w	r2, r0, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	631a      	str	r2, [r3, #48]	@ 0x30
 8002958:	e023      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	3b41      	subs	r3, #65	@ 0x41
 800296c:	221f      	movs	r2, #31
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43da      	mvns	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	400a      	ands	r2, r1
 800297a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	b29b      	uxth	r3, r3
 8002988:	4618      	mov	r0, r3
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	3b41      	subs	r3, #65	@ 0x41
 8002996:	fa00 f203 	lsl.w	r2, r0, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029a2:	4b29      	ldr	r3, [pc, #164]	@ (8002a48 <HAL_ADC_ConfigChannel+0x250>)
 80029a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a28      	ldr	r2, [pc, #160]	@ (8002a4c <HAL_ADC_ConfigChannel+0x254>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d10f      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x1d8>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b12      	cmp	r3, #18
 80029b6:	d10b      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a1d      	ldr	r2, [pc, #116]	@ (8002a4c <HAL_ADC_ConfigChannel+0x254>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d12b      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x23a>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a1c      	ldr	r2, [pc, #112]	@ (8002a50 <HAL_ADC_ConfigChannel+0x258>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d003      	beq.n	80029ec <HAL_ADC_ConfigChannel+0x1f4>
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b11      	cmp	r3, #17
 80029ea:	d122      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a11      	ldr	r2, [pc, #68]	@ (8002a50 <HAL_ADC_ConfigChannel+0x258>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d111      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a0e:	4b11      	ldr	r3, [pc, #68]	@ (8002a54 <HAL_ADC_ConfigChannel+0x25c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a11      	ldr	r2, [pc, #68]	@ (8002a58 <HAL_ADC_ConfigChannel+0x260>)
 8002a14:	fba2 2303 	umull	r2, r3, r2, r3
 8002a18:	0c9a      	lsrs	r2, r3, #18
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002a24:	e002      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f9      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	40012300 	.word	0x40012300
 8002a4c:	40012000 	.word	0x40012000
 8002a50:	10000012 	.word	0x10000012
 8002a54:	20000030 	.word	0x20000030
 8002a58:	431bde83 	.word	0x431bde83

08002a5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a64:	4b79      	ldr	r3, [pc, #484]	@ (8002c4c <ADC_Init+0x1f0>)
 8002a66:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6859      	ldr	r1, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	021a      	lsls	r2, r3, #8
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002ab4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6859      	ldr	r1, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ad6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6899      	ldr	r1, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aee:	4a58      	ldr	r2, [pc, #352]	@ (8002c50 <ADC_Init+0x1f4>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d022      	beq.n	8002b3a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6899      	ldr	r1, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6899      	ldr	r1, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	e00f      	b.n	8002b5a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b58:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0202 	bic.w	r2, r2, #2
 8002b68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6899      	ldr	r1, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	7e1b      	ldrb	r3, [r3, #24]
 8002b74:	005a      	lsls	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d01b      	beq.n	8002bc0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b96:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002ba6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6859      	ldr	r1, [r3, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	035a      	lsls	r2, r3, #13
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	e007      	b.n	8002bd0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bce:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002bde:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	051a      	lsls	r2, r3, #20
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002c04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6899      	ldr	r1, [r3, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c12:	025a      	lsls	r2, r3, #9
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6899      	ldr	r1, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	029a      	lsls	r2, r3, #10
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	609a      	str	r2, [r3, #8]
}
 8002c40:	bf00      	nop
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	40012300 	.word	0x40012300
 8002c50:	0f000001 	.word	0x0f000001

08002c54 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c78:	4b0c      	ldr	r3, [pc, #48]	@ (8002cac <__NVIC_SetPriorityGrouping+0x44>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c84:	4013      	ands	r3, r2
 8002c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c9a:	4a04      	ldr	r2, [pc, #16]	@ (8002cac <__NVIC_SetPriorityGrouping+0x44>)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	60d3      	str	r3, [r2, #12]
}
 8002ca0:	bf00      	nop
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	e000ed00 	.word	0xe000ed00

08002cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cb4:	4b04      	ldr	r3, [pc, #16]	@ (8002cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	0a1b      	lsrs	r3, r3, #8
 8002cba:	f003 0307 	and.w	r3, r3, #7
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	e000ed00 	.word	0xe000ed00

08002ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	db0b      	blt.n	8002cf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	f003 021f 	and.w	r2, r3, #31
 8002ce4:	4907      	ldr	r1, [pc, #28]	@ (8002d04 <__NVIC_EnableIRQ+0x38>)
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cea:	095b      	lsrs	r3, r3, #5
 8002cec:	2001      	movs	r0, #1
 8002cee:	fa00 f202 	lsl.w	r2, r0, r2
 8002cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	e000e100 	.word	0xe000e100

08002d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	6039      	str	r1, [r7, #0]
 8002d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	db0a      	blt.n	8002d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	490c      	ldr	r1, [pc, #48]	@ (8002d54 <__NVIC_SetPriority+0x4c>)
 8002d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d26:	0112      	lsls	r2, r2, #4
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d30:	e00a      	b.n	8002d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	4908      	ldr	r1, [pc, #32]	@ (8002d58 <__NVIC_SetPriority+0x50>)
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	3b04      	subs	r3, #4
 8002d40:	0112      	lsls	r2, r2, #4
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	440b      	add	r3, r1
 8002d46:	761a      	strb	r2, [r3, #24]
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	e000e100 	.word	0xe000e100
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b089      	sub	sp, #36	@ 0x24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f1c3 0307 	rsb	r3, r3, #7
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	bf28      	it	cs
 8002d7a:	2304      	movcs	r3, #4
 8002d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	3304      	adds	r3, #4
 8002d82:	2b06      	cmp	r3, #6
 8002d84:	d902      	bls.n	8002d8c <NVIC_EncodePriority+0x30>
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3b03      	subs	r3, #3
 8002d8a:	e000      	b.n	8002d8e <NVIC_EncodePriority+0x32>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d90:	f04f 32ff 	mov.w	r2, #4294967295
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43da      	mvns	r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	401a      	ands	r2, r3
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002da4:	f04f 31ff 	mov.w	r1, #4294967295
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	fa01 f303 	lsl.w	r3, r1, r3
 8002dae:	43d9      	mvns	r1, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db4:	4313      	orrs	r3, r2
         );
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3724      	adds	r7, #36	@ 0x24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
	...

08002dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dd4:	d301      	bcc.n	8002dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e00f      	b.n	8002dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dda:	4a0a      	ldr	r2, [pc, #40]	@ (8002e04 <SysTick_Config+0x40>)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002de2:	210f      	movs	r1, #15
 8002de4:	f04f 30ff 	mov.w	r0, #4294967295
 8002de8:	f7ff ff8e 	bl	8002d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dec:	4b05      	ldr	r3, [pc, #20]	@ (8002e04 <SysTick_Config+0x40>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002df2:	4b04      	ldr	r3, [pc, #16]	@ (8002e04 <SysTick_Config+0x40>)
 8002df4:	2207      	movs	r2, #7
 8002df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	e000e010 	.word	0xe000e010

08002e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff ff29 	bl	8002c68 <__NVIC_SetPriorityGrouping>
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b086      	sub	sp, #24
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	4603      	mov	r3, r0
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e30:	f7ff ff3e 	bl	8002cb0 <__NVIC_GetPriorityGrouping>
 8002e34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	68b9      	ldr	r1, [r7, #8]
 8002e3a:	6978      	ldr	r0, [r7, #20]
 8002e3c:	f7ff ff8e 	bl	8002d5c <NVIC_EncodePriority>
 8002e40:	4602      	mov	r2, r0
 8002e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e46:	4611      	mov	r1, r2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ff5d 	bl	8002d08 <__NVIC_SetPriority>
}
 8002e4e:	bf00      	nop
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff ff31 	bl	8002ccc <__NVIC_EnableIRQ>
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7ff ffa2 	bl	8002dc4 <SysTick_Config>
 8002e80:	4603      	mov	r3, r0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e98:	f7ff fb30 	bl	80024fc <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e099      	b.n	8002fdc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0201 	bic.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ec8:	e00f      	b.n	8002eea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002eca:	f7ff fb17 	bl	80024fc <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b05      	cmp	r3, #5
 8002ed6:	d908      	bls.n	8002eea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2220      	movs	r2, #32
 8002edc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2203      	movs	r2, #3
 8002ee2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e078      	b.n	8002fdc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1e8      	bne.n	8002eca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	4b38      	ldr	r3, [pc, #224]	@ (8002fe4 <HAL_DMA_Init+0x158>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	d107      	bne.n	8002f54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f023 0307 	bic.w	r3, r3, #7
 8002f6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d117      	bne.n	8002fae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00e      	beq.n	8002fae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f9e9 	bl	8003368 <DMA_CheckFifoParam>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2240      	movs	r2, #64	@ 0x40
 8002fa0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002faa:	2301      	movs	r3, #1
 8002fac:	e016      	b.n	8002fdc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f9a0 	bl	80032fc <DMA_CalcBaseAndBitshift>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc4:	223f      	movs	r2, #63	@ 0x3f
 8002fc6:	409a      	lsls	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	f010803f 	.word	0xf010803f

08002fe8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ff4:	4b8e      	ldr	r3, [pc, #568]	@ (8003230 <HAL_DMA_IRQHandler+0x248>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a8e      	ldr	r2, [pc, #568]	@ (8003234 <HAL_DMA_IRQHandler+0x24c>)
 8002ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffe:	0a9b      	lsrs	r3, r3, #10
 8003000:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003006:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003012:	2208      	movs	r2, #8
 8003014:	409a      	lsls	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4013      	ands	r3, r2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d01a      	beq.n	8003054 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d013      	beq.n	8003054 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0204 	bic.w	r2, r2, #4
 800303a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003040:	2208      	movs	r2, #8
 8003042:	409a      	lsls	r2, r3
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800304c:	f043 0201 	orr.w	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003058:	2201      	movs	r2, #1
 800305a:	409a      	lsls	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4013      	ands	r3, r2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d012      	beq.n	800308a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00b      	beq.n	800308a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003076:	2201      	movs	r2, #1
 8003078:	409a      	lsls	r2, r3
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003082:	f043 0202 	orr.w	r2, r3, #2
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800308e:	2204      	movs	r2, #4
 8003090:	409a      	lsls	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4013      	ands	r3, r2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d012      	beq.n	80030c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00b      	beq.n	80030c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ac:	2204      	movs	r2, #4
 80030ae:	409a      	lsls	r2, r3
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b8:	f043 0204 	orr.w	r2, r3, #4
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c4:	2210      	movs	r2, #16
 80030c6:	409a      	lsls	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4013      	ands	r3, r2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d043      	beq.n	8003158 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d03c      	beq.n	8003158 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e2:	2210      	movs	r2, #16
 80030e4:	409a      	lsls	r2, r3
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d018      	beq.n	800312a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d108      	bne.n	8003118 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310a:	2b00      	cmp	r3, #0
 800310c:	d024      	beq.n	8003158 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	4798      	blx	r3
 8003116:	e01f      	b.n	8003158 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800311c:	2b00      	cmp	r3, #0
 800311e:	d01b      	beq.n	8003158 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	4798      	blx	r3
 8003128:	e016      	b.n	8003158 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003134:	2b00      	cmp	r3, #0
 8003136:	d107      	bne.n	8003148 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0208 	bic.w	r2, r2, #8
 8003146:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800315c:	2220      	movs	r2, #32
 800315e:	409a      	lsls	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4013      	ands	r3, r2
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 808f 	beq.w	8003288 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0310 	and.w	r3, r3, #16
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 8087 	beq.w	8003288 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800317e:	2220      	movs	r2, #32
 8003180:	409a      	lsls	r2, r3
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b05      	cmp	r3, #5
 8003190:	d136      	bne.n	8003200 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0216 	bic.w	r2, r2, #22
 80031a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695a      	ldr	r2, [r3, #20]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d103      	bne.n	80031c2 <HAL_DMA_IRQHandler+0x1da>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d007      	beq.n	80031d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0208 	bic.w	r2, r2, #8
 80031d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d6:	223f      	movs	r2, #63	@ 0x3f
 80031d8:	409a      	lsls	r2, r3
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d07e      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	4798      	blx	r3
        }
        return;
 80031fe:	e079      	b.n	80032f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d01d      	beq.n	800324a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10d      	bne.n	8003238 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003220:	2b00      	cmp	r3, #0
 8003222:	d031      	beq.n	8003288 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	4798      	blx	r3
 800322c:	e02c      	b.n	8003288 <HAL_DMA_IRQHandler+0x2a0>
 800322e:	bf00      	nop
 8003230:	20000030 	.word	0x20000030
 8003234:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800323c:	2b00      	cmp	r3, #0
 800323e:	d023      	beq.n	8003288 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	4798      	blx	r3
 8003248:	e01e      	b.n	8003288 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10f      	bne.n	8003278 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0210 	bic.w	r2, r2, #16
 8003266:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800328c:	2b00      	cmp	r3, #0
 800328e:	d032      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d022      	beq.n	80032e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2205      	movs	r2, #5
 80032a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0201 	bic.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	3301      	adds	r3, #1
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d307      	bcc.n	80032d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f2      	bne.n	80032b4 <HAL_DMA_IRQHandler+0x2cc>
 80032ce:	e000      	b.n	80032d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80032d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d005      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	4798      	blx	r3
 80032f2:	e000      	b.n	80032f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80032f4:	bf00      	nop
    }
  }
}
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	3b10      	subs	r3, #16
 800330c:	4a14      	ldr	r2, [pc, #80]	@ (8003360 <DMA_CalcBaseAndBitshift+0x64>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	091b      	lsrs	r3, r3, #4
 8003314:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003316:	4a13      	ldr	r2, [pc, #76]	@ (8003364 <DMA_CalcBaseAndBitshift+0x68>)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4413      	add	r3, r2
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2b03      	cmp	r3, #3
 8003328:	d909      	bls.n	800333e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003332:	f023 0303 	bic.w	r3, r3, #3
 8003336:	1d1a      	adds	r2, r3, #4
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	659a      	str	r2, [r3, #88]	@ 0x58
 800333c:	e007      	b.n	800334e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003346:	f023 0303 	bic.w	r3, r3, #3
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003352:	4618      	mov	r0, r3
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	aaaaaaab 	.word	0xaaaaaaab
 8003364:	08007020 	.word	0x08007020

08003368 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003370:	2300      	movs	r3, #0
 8003372:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003378:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d11f      	bne.n	80033c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b03      	cmp	r3, #3
 8003386:	d856      	bhi.n	8003436 <DMA_CheckFifoParam+0xce>
 8003388:	a201      	add	r2, pc, #4	@ (adr r2, 8003390 <DMA_CheckFifoParam+0x28>)
 800338a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338e:	bf00      	nop
 8003390:	080033a1 	.word	0x080033a1
 8003394:	080033b3 	.word	0x080033b3
 8003398:	080033a1 	.word	0x080033a1
 800339c:	08003437 	.word	0x08003437
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d046      	beq.n	800343a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033b0:	e043      	b.n	800343a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033ba:	d140      	bne.n	800343e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033c0:	e03d      	b.n	800343e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033ca:	d121      	bne.n	8003410 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b03      	cmp	r3, #3
 80033d0:	d837      	bhi.n	8003442 <DMA_CheckFifoParam+0xda>
 80033d2:	a201      	add	r2, pc, #4	@ (adr r2, 80033d8 <DMA_CheckFifoParam+0x70>)
 80033d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d8:	080033e9 	.word	0x080033e9
 80033dc:	080033ef 	.word	0x080033ef
 80033e0:	080033e9 	.word	0x080033e9
 80033e4:	08003401 	.word	0x08003401
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	73fb      	strb	r3, [r7, #15]
      break;
 80033ec:	e030      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d025      	beq.n	8003446 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033fe:	e022      	b.n	8003446 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003404:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003408:	d11f      	bne.n	800344a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800340e:	e01c      	b.n	800344a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d903      	bls.n	800341e <DMA_CheckFifoParam+0xb6>
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2b03      	cmp	r3, #3
 800341a:	d003      	beq.n	8003424 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800341c:	e018      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	73fb      	strb	r3, [r7, #15]
      break;
 8003422:	e015      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003428:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00e      	beq.n	800344e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	73fb      	strb	r3, [r7, #15]
      break;
 8003434:	e00b      	b.n	800344e <DMA_CheckFifoParam+0xe6>
      break;
 8003436:	bf00      	nop
 8003438:	e00a      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
      break;
 800343a:	bf00      	nop
 800343c:	e008      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
      break;
 800343e:	bf00      	nop
 8003440:	e006      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
      break;
 8003442:	bf00      	nop
 8003444:	e004      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
      break;
 8003446:	bf00      	nop
 8003448:	e002      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
      break;   
 800344a:	bf00      	nop
 800344c:	e000      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
      break;
 800344e:	bf00      	nop
    }
  } 
  
  return status; 
 8003450:	7bfb      	ldrb	r3, [r7, #15]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop

08003460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003460:	b480      	push	{r7}
 8003462:	b089      	sub	sp, #36	@ 0x24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800346a:	2300      	movs	r3, #0
 800346c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800346e:	2300      	movs	r3, #0
 8003470:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003472:	2300      	movs	r3, #0
 8003474:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003476:	2300      	movs	r3, #0
 8003478:	61fb      	str	r3, [r7, #28]
 800347a:	e165      	b.n	8003748 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800347c:	2201      	movs	r2, #1
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	4013      	ands	r3, r2
 800348e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	429a      	cmp	r2, r3
 8003496:	f040 8154 	bne.w	8003742 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d005      	beq.n	80034b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d130      	bne.n	8003514 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	2203      	movs	r2, #3
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43db      	mvns	r3, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4013      	ands	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034e8:	2201      	movs	r2, #1
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	091b      	lsrs	r3, r3, #4
 80034fe:	f003 0201 	and.w	r2, r3, #1
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f003 0303 	and.w	r3, r3, #3
 800351c:	2b03      	cmp	r3, #3
 800351e:	d017      	beq.n	8003550 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	2203      	movs	r2, #3
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	43db      	mvns	r3, r3
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4013      	ands	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	4313      	orrs	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 0303 	and.w	r3, r3, #3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d123      	bne.n	80035a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	08da      	lsrs	r2, r3, #3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3208      	adds	r2, #8
 8003564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003568:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	220f      	movs	r2, #15
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	43db      	mvns	r3, r3
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4013      	ands	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4313      	orrs	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	08da      	lsrs	r2, r3, #3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3208      	adds	r2, #8
 800359e:	69b9      	ldr	r1, [r7, #24]
 80035a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	2203      	movs	r2, #3
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4013      	ands	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f003 0203 	and.w	r2, r3, #3
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 80ae 	beq.w	8003742 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	4b5d      	ldr	r3, [pc, #372]	@ (8003760 <HAL_GPIO_Init+0x300>)
 80035ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ee:	4a5c      	ldr	r2, [pc, #368]	@ (8003760 <HAL_GPIO_Init+0x300>)
 80035f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80035f6:	4b5a      	ldr	r3, [pc, #360]	@ (8003760 <HAL_GPIO_Init+0x300>)
 80035f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003602:	4a58      	ldr	r2, [pc, #352]	@ (8003764 <HAL_GPIO_Init+0x304>)
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	089b      	lsrs	r3, r3, #2
 8003608:	3302      	adds	r3, #2
 800360a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800360e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	220f      	movs	r2, #15
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43db      	mvns	r3, r3
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4013      	ands	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a4f      	ldr	r2, [pc, #316]	@ (8003768 <HAL_GPIO_Init+0x308>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d025      	beq.n	800367a <HAL_GPIO_Init+0x21a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a4e      	ldr	r2, [pc, #312]	@ (800376c <HAL_GPIO_Init+0x30c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d01f      	beq.n	8003676 <HAL_GPIO_Init+0x216>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a4d      	ldr	r2, [pc, #308]	@ (8003770 <HAL_GPIO_Init+0x310>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d019      	beq.n	8003672 <HAL_GPIO_Init+0x212>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a4c      	ldr	r2, [pc, #304]	@ (8003774 <HAL_GPIO_Init+0x314>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d013      	beq.n	800366e <HAL_GPIO_Init+0x20e>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a4b      	ldr	r2, [pc, #300]	@ (8003778 <HAL_GPIO_Init+0x318>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d00d      	beq.n	800366a <HAL_GPIO_Init+0x20a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a4a      	ldr	r2, [pc, #296]	@ (800377c <HAL_GPIO_Init+0x31c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d007      	beq.n	8003666 <HAL_GPIO_Init+0x206>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a49      	ldr	r2, [pc, #292]	@ (8003780 <HAL_GPIO_Init+0x320>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d101      	bne.n	8003662 <HAL_GPIO_Init+0x202>
 800365e:	2306      	movs	r3, #6
 8003660:	e00c      	b.n	800367c <HAL_GPIO_Init+0x21c>
 8003662:	2307      	movs	r3, #7
 8003664:	e00a      	b.n	800367c <HAL_GPIO_Init+0x21c>
 8003666:	2305      	movs	r3, #5
 8003668:	e008      	b.n	800367c <HAL_GPIO_Init+0x21c>
 800366a:	2304      	movs	r3, #4
 800366c:	e006      	b.n	800367c <HAL_GPIO_Init+0x21c>
 800366e:	2303      	movs	r3, #3
 8003670:	e004      	b.n	800367c <HAL_GPIO_Init+0x21c>
 8003672:	2302      	movs	r3, #2
 8003674:	e002      	b.n	800367c <HAL_GPIO_Init+0x21c>
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <HAL_GPIO_Init+0x21c>
 800367a:	2300      	movs	r3, #0
 800367c:	69fa      	ldr	r2, [r7, #28]
 800367e:	f002 0203 	and.w	r2, r2, #3
 8003682:	0092      	lsls	r2, r2, #2
 8003684:	4093      	lsls	r3, r2
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4313      	orrs	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800368c:	4935      	ldr	r1, [pc, #212]	@ (8003764 <HAL_GPIO_Init+0x304>)
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	089b      	lsrs	r3, r3, #2
 8003692:	3302      	adds	r3, #2
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800369a:	4b3a      	ldr	r3, [pc, #232]	@ (8003784 <HAL_GPIO_Init+0x324>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	43db      	mvns	r3, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	4013      	ands	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036be:	4a31      	ldr	r2, [pc, #196]	@ (8003784 <HAL_GPIO_Init+0x324>)
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036c4:	4b2f      	ldr	r3, [pc, #188]	@ (8003784 <HAL_GPIO_Init+0x324>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	43db      	mvns	r3, r3
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	4013      	ands	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d003      	beq.n	80036e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036e8:	4a26      	ldr	r2, [pc, #152]	@ (8003784 <HAL_GPIO_Init+0x324>)
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036ee:	4b25      	ldr	r3, [pc, #148]	@ (8003784 <HAL_GPIO_Init+0x324>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	43db      	mvns	r3, r3
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	4013      	ands	r3, r2
 80036fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	4313      	orrs	r3, r2
 8003710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003712:	4a1c      	ldr	r2, [pc, #112]	@ (8003784 <HAL_GPIO_Init+0x324>)
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003718:	4b1a      	ldr	r3, [pc, #104]	@ (8003784 <HAL_GPIO_Init+0x324>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	43db      	mvns	r3, r3
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	4013      	ands	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d003      	beq.n	800373c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	4313      	orrs	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800373c:	4a11      	ldr	r2, [pc, #68]	@ (8003784 <HAL_GPIO_Init+0x324>)
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	3301      	adds	r3, #1
 8003746:	61fb      	str	r3, [r7, #28]
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	2b0f      	cmp	r3, #15
 800374c:	f67f ae96 	bls.w	800347c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003750:	bf00      	nop
 8003752:	bf00      	nop
 8003754:	3724      	adds	r7, #36	@ 0x24
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	40023800 	.word	0x40023800
 8003764:	40013800 	.word	0x40013800
 8003768:	40020000 	.word	0x40020000
 800376c:	40020400 	.word	0x40020400
 8003770:	40020800 	.word	0x40020800
 8003774:	40020c00 	.word	0x40020c00
 8003778:	40021000 	.word	0x40021000
 800377c:	40021400 	.word	0x40021400
 8003780:	40021800 	.word	0x40021800
 8003784:	40013c00 	.word	0x40013c00

08003788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	460b      	mov	r3, r1
 8003792:	807b      	strh	r3, [r7, #2]
 8003794:	4613      	mov	r3, r2
 8003796:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003798:	787b      	ldrb	r3, [r7, #1]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800379e:	887a      	ldrh	r2, [r7, #2]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037a4:	e003      	b.n	80037ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037a6:	887b      	ldrh	r3, [r7, #2]
 80037a8:	041a      	lsls	r2, r3, #16
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	619a      	str	r2, [r3, #24]
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
	...

080037bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e12b      	b.n	8003a26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d106      	bne.n	80037e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fd fcd2 	bl	800118c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2224      	movs	r2, #36	@ 0x24
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0201 	bic.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800380e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800381e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003820:	f001 f932 	bl	8004a88 <HAL_RCC_GetPCLK1Freq>
 8003824:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	4a81      	ldr	r2, [pc, #516]	@ (8003a30 <HAL_I2C_Init+0x274>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d807      	bhi.n	8003840 <HAL_I2C_Init+0x84>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4a80      	ldr	r2, [pc, #512]	@ (8003a34 <HAL_I2C_Init+0x278>)
 8003834:	4293      	cmp	r3, r2
 8003836:	bf94      	ite	ls
 8003838:	2301      	movls	r3, #1
 800383a:	2300      	movhi	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	e006      	b.n	800384e <HAL_I2C_Init+0x92>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4a7d      	ldr	r2, [pc, #500]	@ (8003a38 <HAL_I2C_Init+0x27c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	bf94      	ite	ls
 8003848:	2301      	movls	r3, #1
 800384a:	2300      	movhi	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e0e7      	b.n	8003a26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4a78      	ldr	r2, [pc, #480]	@ (8003a3c <HAL_I2C_Init+0x280>)
 800385a:	fba2 2303 	umull	r2, r3, r2, r3
 800385e:	0c9b      	lsrs	r3, r3, #18
 8003860:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	430a      	orrs	r2, r1
 8003874:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	4a6a      	ldr	r2, [pc, #424]	@ (8003a30 <HAL_I2C_Init+0x274>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d802      	bhi.n	8003890 <HAL_I2C_Init+0xd4>
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	3301      	adds	r3, #1
 800388e:	e009      	b.n	80038a4 <HAL_I2C_Init+0xe8>
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003896:	fb02 f303 	mul.w	r3, r2, r3
 800389a:	4a69      	ldr	r2, [pc, #420]	@ (8003a40 <HAL_I2C_Init+0x284>)
 800389c:	fba2 2303 	umull	r2, r3, r2, r3
 80038a0:	099b      	lsrs	r3, r3, #6
 80038a2:	3301      	adds	r3, #1
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6812      	ldr	r2, [r2, #0]
 80038a8:	430b      	orrs	r3, r1
 80038aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80038b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	495c      	ldr	r1, [pc, #368]	@ (8003a30 <HAL_I2C_Init+0x274>)
 80038c0:	428b      	cmp	r3, r1
 80038c2:	d819      	bhi.n	80038f8 <HAL_I2C_Init+0x13c>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	1e59      	subs	r1, r3, #1
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80038d2:	1c59      	adds	r1, r3, #1
 80038d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80038d8:	400b      	ands	r3, r1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <HAL_I2C_Init+0x138>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	1e59      	subs	r1, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80038ec:	3301      	adds	r3, #1
 80038ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f2:	e051      	b.n	8003998 <HAL_I2C_Init+0x1dc>
 80038f4:	2304      	movs	r3, #4
 80038f6:	e04f      	b.n	8003998 <HAL_I2C_Init+0x1dc>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d111      	bne.n	8003924 <HAL_I2C_Init+0x168>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1e58      	subs	r0, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6859      	ldr	r1, [r3, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	440b      	add	r3, r1
 800390e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003912:	3301      	adds	r3, #1
 8003914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003918:	2b00      	cmp	r3, #0
 800391a:	bf0c      	ite	eq
 800391c:	2301      	moveq	r3, #1
 800391e:	2300      	movne	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	e012      	b.n	800394a <HAL_I2C_Init+0x18e>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	1e58      	subs	r0, r3, #1
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6859      	ldr	r1, [r3, #4]
 800392c:	460b      	mov	r3, r1
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	440b      	add	r3, r1
 8003932:	0099      	lsls	r1, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	fbb0 f3f3 	udiv	r3, r0, r3
 800393a:	3301      	adds	r3, #1
 800393c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003940:	2b00      	cmp	r3, #0
 8003942:	bf0c      	ite	eq
 8003944:	2301      	moveq	r3, #1
 8003946:	2300      	movne	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <HAL_I2C_Init+0x196>
 800394e:	2301      	movs	r3, #1
 8003950:	e022      	b.n	8003998 <HAL_I2C_Init+0x1dc>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10e      	bne.n	8003978 <HAL_I2C_Init+0x1bc>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	1e58      	subs	r0, r3, #1
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6859      	ldr	r1, [r3, #4]
 8003962:	460b      	mov	r3, r1
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	440b      	add	r3, r1
 8003968:	fbb0 f3f3 	udiv	r3, r0, r3
 800396c:	3301      	adds	r3, #1
 800396e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003972:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003976:	e00f      	b.n	8003998 <HAL_I2C_Init+0x1dc>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	1e58      	subs	r0, r3, #1
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6859      	ldr	r1, [r3, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	0099      	lsls	r1, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	fbb0 f3f3 	udiv	r3, r0, r3
 800398e:	3301      	adds	r3, #1
 8003990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003994:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	6809      	ldr	r1, [r1, #0]
 800399c:	4313      	orrs	r3, r2
 800399e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69da      	ldr	r2, [r3, #28]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80039c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6911      	ldr	r1, [r2, #16]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68d2      	ldr	r2, [r2, #12]
 80039d2:	4311      	orrs	r1, r2
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6812      	ldr	r2, [r2, #0]
 80039d8:	430b      	orrs	r3, r1
 80039da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695a      	ldr	r2, [r3, #20]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2220      	movs	r2, #32
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	000186a0 	.word	0x000186a0
 8003a34:	001e847f 	.word	0x001e847f
 8003a38:	003d08ff 	.word	0x003d08ff
 8003a3c:	431bde83 	.word	0x431bde83
 8003a40:	10624dd3 	.word	0x10624dd3

08003a44 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af02      	add	r7, sp, #8
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	4608      	mov	r0, r1
 8003a4e:	4611      	mov	r1, r2
 8003a50:	461a      	mov	r2, r3
 8003a52:	4603      	mov	r3, r0
 8003a54:	817b      	strh	r3, [r7, #10]
 8003a56:	460b      	mov	r3, r1
 8003a58:	813b      	strh	r3, [r7, #8]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a5e:	f7fe fd4d 	bl	80024fc <HAL_GetTick>
 8003a62:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b20      	cmp	r3, #32
 8003a6e:	f040 80d9 	bne.w	8003c24 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	2319      	movs	r3, #25
 8003a78:	2201      	movs	r2, #1
 8003a7a:	496d      	ldr	r1, [pc, #436]	@ (8003c30 <HAL_I2C_Mem_Write+0x1ec>)
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 fc8b 	bl	8004398 <I2C_WaitOnFlagUntilTimeout>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e0cc      	b.n	8003c26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d101      	bne.n	8003a9a <HAL_I2C_Mem_Write+0x56>
 8003a96:	2302      	movs	r3, #2
 8003a98:	e0c5      	b.n	8003c26 <HAL_I2C_Mem_Write+0x1e2>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d007      	beq.n	8003ac0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f042 0201 	orr.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ace:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2221      	movs	r2, #33	@ 0x21
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2240      	movs	r2, #64	@ 0x40
 8003adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a3a      	ldr	r2, [r7, #32]
 8003aea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003af0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4a4d      	ldr	r2, [pc, #308]	@ (8003c34 <HAL_I2C_Mem_Write+0x1f0>)
 8003b00:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b02:	88f8      	ldrh	r0, [r7, #6]
 8003b04:	893a      	ldrh	r2, [r7, #8]
 8003b06:	8979      	ldrh	r1, [r7, #10]
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	9301      	str	r3, [sp, #4]
 8003b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	4603      	mov	r3, r0
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 fac2 	bl	800409c <I2C_RequestMemoryWrite>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d052      	beq.n	8003bc4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e081      	b.n	8003c26 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 fd50 	bl	80045cc <I2C_WaitOnTXEFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00d      	beq.n	8003b4e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d107      	bne.n	8003b4a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e06b      	b.n	8003c26 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	781a      	ldrb	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d11b      	bne.n	8003bc4 <HAL_I2C_Mem_Write+0x180>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d017      	beq.n	8003bc4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b98:	781a      	ldrb	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1aa      	bne.n	8003b22 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 fd43 	bl	800465c <I2C_WaitOnBTFFlagUntilTimeout>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00d      	beq.n	8003bf8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d107      	bne.n	8003bf4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bf2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e016      	b.n	8003c26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	e000      	b.n	8003c26 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003c24:	2302      	movs	r3, #2
  }
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	00100002 	.word	0x00100002
 8003c34:	ffff0000 	.word	0xffff0000

08003c38 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08c      	sub	sp, #48	@ 0x30
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	4608      	mov	r0, r1
 8003c42:	4611      	mov	r1, r2
 8003c44:	461a      	mov	r2, r3
 8003c46:	4603      	mov	r3, r0
 8003c48:	817b      	strh	r3, [r7, #10]
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	813b      	strh	r3, [r7, #8]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c52:	f7fe fc53 	bl	80024fc <HAL_GetTick>
 8003c56:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b20      	cmp	r3, #32
 8003c62:	f040 8214 	bne.w	800408e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	2319      	movs	r3, #25
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	497b      	ldr	r1, [pc, #492]	@ (8003e5c <HAL_I2C_Mem_Read+0x224>)
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 fb91 	bl	8004398 <I2C_WaitOnFlagUntilTimeout>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e207      	b.n	8004090 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <HAL_I2C_Mem_Read+0x56>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e200      	b.n	8004090 <HAL_I2C_Mem_Read+0x458>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d007      	beq.n	8003cb4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0201 	orr.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cc2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2222      	movs	r2, #34	@ 0x22
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2240      	movs	r2, #64	@ 0x40
 8003cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cde:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003ce4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4a5b      	ldr	r2, [pc, #364]	@ (8003e60 <HAL_I2C_Mem_Read+0x228>)
 8003cf4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cf6:	88f8      	ldrh	r0, [r7, #6]
 8003cf8:	893a      	ldrh	r2, [r7, #8]
 8003cfa:	8979      	ldrh	r1, [r7, #10]
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfe:	9301      	str	r3, [sp, #4]
 8003d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	4603      	mov	r3, r0
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 fa5e 	bl	80041c8 <I2C_RequestMemoryRead>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e1bc      	b.n	8004090 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d113      	bne.n	8003d46 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d1e:	2300      	movs	r3, #0
 8003d20:	623b      	str	r3, [r7, #32]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	623b      	str	r3, [r7, #32]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	623b      	str	r3, [r7, #32]
 8003d32:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	e190      	b.n	8004068 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d11b      	bne.n	8003d86 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61fb      	str	r3, [r7, #28]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	61fb      	str	r3, [r7, #28]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	61fb      	str	r3, [r7, #28]
 8003d72:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	e170      	b.n	8004068 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d11b      	bne.n	8003dc6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d9c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dae:	2300      	movs	r3, #0
 8003db0:	61bb      	str	r3, [r7, #24]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	61bb      	str	r3, [r7, #24]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	61bb      	str	r3, [r7, #24]
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	e150      	b.n	8004068 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	617b      	str	r3, [r7, #20]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	617b      	str	r3, [r7, #20]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	617b      	str	r3, [r7, #20]
 8003dda:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ddc:	e144      	b.n	8004068 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	f200 80f1 	bhi.w	8003fca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d123      	bne.n	8003e38 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003df0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003df2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 fc79 	bl	80046ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e145      	b.n	8004090 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691a      	ldr	r2, [r3, #16]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e36:	e117      	b.n	8004068 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d14e      	bne.n	8003ede <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e46:	2200      	movs	r2, #0
 8003e48:	4906      	ldr	r1, [pc, #24]	@ (8003e64 <HAL_I2C_Mem_Read+0x22c>)
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 faa4 	bl	8004398 <I2C_WaitOnFlagUntilTimeout>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d008      	beq.n	8003e68 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e11a      	b.n	8004090 <HAL_I2C_Mem_Read+0x458>
 8003e5a:	bf00      	nop
 8003e5c:	00100002 	.word	0x00100002
 8003e60:	ffff0000 	.word	0xffff0000
 8003e64:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691a      	ldr	r2, [r3, #16]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	691a      	ldr	r2, [r3, #16]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003edc:	e0c4      	b.n	8004068 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	496c      	ldr	r1, [pc, #432]	@ (8004098 <HAL_I2C_Mem_Read+0x460>)
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 fa55 	bl	8004398 <I2C_WaitOnFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0cb      	b.n	8004090 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	691a      	ldr	r2, [r3, #16]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1a:	1c5a      	adds	r2, r3, #1
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f24:	3b01      	subs	r3, #1
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f40:	2200      	movs	r2, #0
 8003f42:	4955      	ldr	r1, [pc, #340]	@ (8004098 <HAL_I2C_Mem_Read+0x460>)
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 fa27 	bl	8004398 <I2C_WaitOnFlagUntilTimeout>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e09d      	b.n	8004090 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691a      	ldr	r2, [r3, #16]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f76:	1c5a      	adds	r2, r3, #1
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003fc8:	e04e      	b.n	8004068 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fcc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 fb8c 	bl	80046ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e058      	b.n	8004090 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe8:	b2d2      	uxtb	r2, r2
 8003fea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004006:	b29b      	uxth	r3, r3
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	f003 0304 	and.w	r3, r3, #4
 800401a:	2b04      	cmp	r3, #4
 800401c:	d124      	bne.n	8004068 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004022:	2b03      	cmp	r3, #3
 8004024:	d107      	bne.n	8004036 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004034:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004040:	b2d2      	uxtb	r2, r2
 8004042:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800406c:	2b00      	cmp	r3, #0
 800406e:	f47f aeb6 	bne.w	8003dde <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800408a:	2300      	movs	r3, #0
 800408c:	e000      	b.n	8004090 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800408e:	2302      	movs	r3, #2
  }
}
 8004090:	4618      	mov	r0, r3
 8004092:	3728      	adds	r7, #40	@ 0x28
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	00010004 	.word	0x00010004

0800409c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b088      	sub	sp, #32
 80040a0:	af02      	add	r7, sp, #8
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	4608      	mov	r0, r1
 80040a6:	4611      	mov	r1, r2
 80040a8:	461a      	mov	r2, r3
 80040aa:	4603      	mov	r3, r0
 80040ac:	817b      	strh	r3, [r7, #10]
 80040ae:	460b      	mov	r3, r1
 80040b0:	813b      	strh	r3, [r7, #8]
 80040b2:	4613      	mov	r3, r2
 80040b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 f960 	bl	8004398 <I2C_WaitOnFlagUntilTimeout>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00d      	beq.n	80040fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040ec:	d103      	bne.n	80040f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e05f      	b.n	80041ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040fa:	897b      	ldrh	r3, [r7, #10]
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	461a      	mov	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004108:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800410a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410c:	6a3a      	ldr	r2, [r7, #32]
 800410e:	492d      	ldr	r1, [pc, #180]	@ (80041c4 <I2C_RequestMemoryWrite+0x128>)
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 f9bb 	bl	800448c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e04c      	b.n	80041ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004120:	2300      	movs	r3, #0
 8004122:	617b      	str	r3, [r7, #20]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	617b      	str	r3, [r7, #20]
 8004134:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004138:	6a39      	ldr	r1, [r7, #32]
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 fa46 	bl	80045cc <I2C_WaitOnTXEFlagUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00d      	beq.n	8004162 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414a:	2b04      	cmp	r3, #4
 800414c:	d107      	bne.n	800415e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800415c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e02b      	b.n	80041ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004162:	88fb      	ldrh	r3, [r7, #6]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d105      	bne.n	8004174 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004168:	893b      	ldrh	r3, [r7, #8]
 800416a:	b2da      	uxtb	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	611a      	str	r2, [r3, #16]
 8004172:	e021      	b.n	80041b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004174:	893b      	ldrh	r3, [r7, #8]
 8004176:	0a1b      	lsrs	r3, r3, #8
 8004178:	b29b      	uxth	r3, r3
 800417a:	b2da      	uxtb	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004184:	6a39      	ldr	r1, [r7, #32]
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 fa20 	bl	80045cc <I2C_WaitOnTXEFlagUntilTimeout>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00d      	beq.n	80041ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004196:	2b04      	cmp	r3, #4
 8004198:	d107      	bne.n	80041aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e005      	b.n	80041ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041ae:	893b      	ldrh	r3, [r7, #8]
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	00010002 	.word	0x00010002

080041c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b088      	sub	sp, #32
 80041cc:	af02      	add	r7, sp, #8
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	4608      	mov	r0, r1
 80041d2:	4611      	mov	r1, r2
 80041d4:	461a      	mov	r2, r3
 80041d6:	4603      	mov	r3, r0
 80041d8:	817b      	strh	r3, [r7, #10]
 80041da:	460b      	mov	r3, r1
 80041dc:	813b      	strh	r3, [r7, #8]
 80041de:	4613      	mov	r3, r2
 80041e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004200:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	6a3b      	ldr	r3, [r7, #32]
 8004208:	2200      	movs	r2, #0
 800420a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 f8c2 	bl	8004398 <I2C_WaitOnFlagUntilTimeout>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00d      	beq.n	8004236 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004224:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004228:	d103      	bne.n	8004232 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004230:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e0aa      	b.n	800438c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004236:	897b      	ldrh	r3, [r7, #10]
 8004238:	b2db      	uxtb	r3, r3
 800423a:	461a      	mov	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004244:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004248:	6a3a      	ldr	r2, [r7, #32]
 800424a:	4952      	ldr	r1, [pc, #328]	@ (8004394 <I2C_RequestMemoryRead+0x1cc>)
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 f91d 	bl	800448c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e097      	b.n	800438c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800425c:	2300      	movs	r3, #0
 800425e:	617b      	str	r3, [r7, #20]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	617b      	str	r3, [r7, #20]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004272:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004274:	6a39      	ldr	r1, [r7, #32]
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 f9a8 	bl	80045cc <I2C_WaitOnTXEFlagUntilTimeout>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00d      	beq.n	800429e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004286:	2b04      	cmp	r3, #4
 8004288:	d107      	bne.n	800429a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004298:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e076      	b.n	800438c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800429e:	88fb      	ldrh	r3, [r7, #6]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d105      	bne.n	80042b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042a4:	893b      	ldrh	r3, [r7, #8]
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	611a      	str	r2, [r3, #16]
 80042ae:	e021      	b.n	80042f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042b0:	893b      	ldrh	r3, [r7, #8]
 80042b2:	0a1b      	lsrs	r3, r3, #8
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042c0:	6a39      	ldr	r1, [r7, #32]
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 f982 	bl	80045cc <I2C_WaitOnTXEFlagUntilTimeout>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00d      	beq.n	80042ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d2:	2b04      	cmp	r3, #4
 80042d4:	d107      	bne.n	80042e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e050      	b.n	800438c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042ea:	893b      	ldrh	r3, [r7, #8]
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042f6:	6a39      	ldr	r1, [r7, #32]
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 f967 	bl	80045cc <I2C_WaitOnTXEFlagUntilTimeout>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00d      	beq.n	8004320 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004308:	2b04      	cmp	r3, #4
 800430a:	d107      	bne.n	800431c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800431a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e035      	b.n	800438c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800432e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	2200      	movs	r2, #0
 8004338:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 f82b 	bl	8004398 <I2C_WaitOnFlagUntilTimeout>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00d      	beq.n	8004364 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004352:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004356:	d103      	bne.n	8004360 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800435e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e013      	b.n	800438c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004364:	897b      	ldrh	r3, [r7, #10]
 8004366:	b2db      	uxtb	r3, r3
 8004368:	f043 0301 	orr.w	r3, r3, #1
 800436c:	b2da      	uxtb	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004376:	6a3a      	ldr	r2, [r7, #32]
 8004378:	4906      	ldr	r1, [pc, #24]	@ (8004394 <I2C_RequestMemoryRead+0x1cc>)
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 f886 	bl	800448c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e000      	b.n	800438c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	00010002 	.word	0x00010002

08004398 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	603b      	str	r3, [r7, #0]
 80043a4:	4613      	mov	r3, r2
 80043a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043a8:	e048      	b.n	800443c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b0:	d044      	beq.n	800443c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b2:	f7fe f8a3 	bl	80024fc <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d302      	bcc.n	80043c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d139      	bne.n	800443c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	0c1b      	lsrs	r3, r3, #16
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d10d      	bne.n	80043ee <I2C_WaitOnFlagUntilTimeout+0x56>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	43da      	mvns	r2, r3
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	4013      	ands	r3, r2
 80043de:	b29b      	uxth	r3, r3
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	bf0c      	ite	eq
 80043e4:	2301      	moveq	r3, #1
 80043e6:	2300      	movne	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	461a      	mov	r2, r3
 80043ec:	e00c      	b.n	8004408 <I2C_WaitOnFlagUntilTimeout+0x70>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	43da      	mvns	r2, r3
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	4013      	ands	r3, r2
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	bf0c      	ite	eq
 8004400:	2301      	moveq	r3, #1
 8004402:	2300      	movne	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	461a      	mov	r2, r3
 8004408:	79fb      	ldrb	r3, [r7, #7]
 800440a:	429a      	cmp	r2, r3
 800440c:	d116      	bne.n	800443c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2220      	movs	r2, #32
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004428:	f043 0220 	orr.w	r2, r3, #32
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e023      	b.n	8004484 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	0c1b      	lsrs	r3, r3, #16
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b01      	cmp	r3, #1
 8004444:	d10d      	bne.n	8004462 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	43da      	mvns	r2, r3
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	4013      	ands	r3, r2
 8004452:	b29b      	uxth	r3, r3
 8004454:	2b00      	cmp	r3, #0
 8004456:	bf0c      	ite	eq
 8004458:	2301      	moveq	r3, #1
 800445a:	2300      	movne	r3, #0
 800445c:	b2db      	uxtb	r3, r3
 800445e:	461a      	mov	r2, r3
 8004460:	e00c      	b.n	800447c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	43da      	mvns	r2, r3
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	4013      	ands	r3, r2
 800446e:	b29b      	uxth	r3, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	bf0c      	ite	eq
 8004474:	2301      	moveq	r3, #1
 8004476:	2300      	movne	r3, #0
 8004478:	b2db      	uxtb	r3, r3
 800447a:	461a      	mov	r2, r3
 800447c:	79fb      	ldrb	r3, [r7, #7]
 800447e:	429a      	cmp	r2, r3
 8004480:	d093      	beq.n	80043aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
 8004498:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800449a:	e071      	b.n	8004580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044aa:	d123      	bne.n	80044f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e0:	f043 0204 	orr.w	r2, r3, #4
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e067      	b.n	80045c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fa:	d041      	beq.n	8004580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044fc:	f7fd fffe 	bl	80024fc <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	429a      	cmp	r2, r3
 800450a:	d302      	bcc.n	8004512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d136      	bne.n	8004580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	0c1b      	lsrs	r3, r3, #16
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b01      	cmp	r3, #1
 800451a:	d10c      	bne.n	8004536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	43da      	mvns	r2, r3
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	4013      	ands	r3, r2
 8004528:	b29b      	uxth	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	bf14      	ite	ne
 800452e:	2301      	movne	r3, #1
 8004530:	2300      	moveq	r3, #0
 8004532:	b2db      	uxtb	r3, r3
 8004534:	e00b      	b.n	800454e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	43da      	mvns	r2, r3
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	4013      	ands	r3, r2
 8004542:	b29b      	uxth	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	bf14      	ite	ne
 8004548:	2301      	movne	r3, #1
 800454a:	2300      	moveq	r3, #0
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d016      	beq.n	8004580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2220      	movs	r2, #32
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456c:	f043 0220 	orr.w	r2, r3, #32
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e021      	b.n	80045c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	0c1b      	lsrs	r3, r3, #16
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b01      	cmp	r3, #1
 8004588:	d10c      	bne.n	80045a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	43da      	mvns	r2, r3
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	4013      	ands	r3, r2
 8004596:	b29b      	uxth	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	bf14      	ite	ne
 800459c:	2301      	movne	r3, #1
 800459e:	2300      	moveq	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	e00b      	b.n	80045bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	43da      	mvns	r2, r3
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	4013      	ands	r3, r2
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	bf14      	ite	ne
 80045b6:	2301      	movne	r3, #1
 80045b8:	2300      	moveq	r3, #0
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f47f af6d 	bne.w	800449c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045d8:	e034      	b.n	8004644 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 f8e3 	bl	80047a6 <I2C_IsAcknowledgeFailed>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e034      	b.n	8004654 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f0:	d028      	beq.n	8004644 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f2:	f7fd ff83 	bl	80024fc <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d302      	bcc.n	8004608 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d11d      	bne.n	8004644 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004612:	2b80      	cmp	r3, #128	@ 0x80
 8004614:	d016      	beq.n	8004644 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004630:	f043 0220 	orr.w	r2, r3, #32
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e007      	b.n	8004654 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800464e:	2b80      	cmp	r3, #128	@ 0x80
 8004650:	d1c3      	bne.n	80045da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004668:	e034      	b.n	80046d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 f89b 	bl	80047a6 <I2C_IsAcknowledgeFailed>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e034      	b.n	80046e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004680:	d028      	beq.n	80046d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004682:	f7fd ff3b 	bl	80024fc <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	429a      	cmp	r2, r3
 8004690:	d302      	bcc.n	8004698 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d11d      	bne.n	80046d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	f003 0304 	and.w	r3, r3, #4
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	d016      	beq.n	80046d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2220      	movs	r2, #32
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c0:	f043 0220 	orr.w	r2, r3, #32
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e007      	b.n	80046e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	f003 0304 	and.w	r3, r3, #4
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d1c3      	bne.n	800466a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046f8:	e049      	b.n	800478e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	f003 0310 	and.w	r3, r3, #16
 8004704:	2b10      	cmp	r3, #16
 8004706:	d119      	bne.n	800473c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f06f 0210 	mvn.w	r2, #16
 8004710:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2220      	movs	r2, #32
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e030      	b.n	800479e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800473c:	f7fd fede 	bl	80024fc <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	429a      	cmp	r2, r3
 800474a:	d302      	bcc.n	8004752 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d11d      	bne.n	800478e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800475c:	2b40      	cmp	r3, #64	@ 0x40
 800475e:	d016      	beq.n	800478e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2220      	movs	r2, #32
 800476a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477a:	f043 0220 	orr.w	r2, r3, #32
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e007      	b.n	800479e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004798:	2b40      	cmp	r3, #64	@ 0x40
 800479a:	d1ae      	bne.n	80046fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b083      	sub	sp, #12
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047bc:	d11b      	bne.n	80047f6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047c6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2220      	movs	r2, #32
 80047d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e2:	f043 0204 	orr.w	r2, r3, #4
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e000      	b.n	80047f8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800480a:	2300      	movs	r3, #0
 800480c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800480e:	2300      	movs	r3, #0
 8004810:	603b      	str	r3, [r7, #0]
 8004812:	4b20      	ldr	r3, [pc, #128]	@ (8004894 <HAL_PWREx_EnableOverDrive+0x90>)
 8004814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004816:	4a1f      	ldr	r2, [pc, #124]	@ (8004894 <HAL_PWREx_EnableOverDrive+0x90>)
 8004818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800481c:	6413      	str	r3, [r2, #64]	@ 0x40
 800481e:	4b1d      	ldr	r3, [pc, #116]	@ (8004894 <HAL_PWREx_EnableOverDrive+0x90>)
 8004820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004826:	603b      	str	r3, [r7, #0]
 8004828:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800482a:	4b1b      	ldr	r3, [pc, #108]	@ (8004898 <HAL_PWREx_EnableOverDrive+0x94>)
 800482c:	2201      	movs	r2, #1
 800482e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004830:	f7fd fe64 	bl	80024fc <HAL_GetTick>
 8004834:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004836:	e009      	b.n	800484c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004838:	f7fd fe60 	bl	80024fc <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004846:	d901      	bls.n	800484c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e01f      	b.n	800488c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800484c:	4b13      	ldr	r3, [pc, #76]	@ (800489c <HAL_PWREx_EnableOverDrive+0x98>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004858:	d1ee      	bne.n	8004838 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800485a:	4b11      	ldr	r3, [pc, #68]	@ (80048a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800485c:	2201      	movs	r2, #1
 800485e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004860:	f7fd fe4c 	bl	80024fc <HAL_GetTick>
 8004864:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004866:	e009      	b.n	800487c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004868:	f7fd fe48 	bl	80024fc <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004876:	d901      	bls.n	800487c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e007      	b.n	800488c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800487c:	4b07      	ldr	r3, [pc, #28]	@ (800489c <HAL_PWREx_EnableOverDrive+0x98>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004884:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004888:	d1ee      	bne.n	8004868 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	40023800 	.word	0x40023800
 8004898:	420e0040 	.word	0x420e0040
 800489c:	40007000 	.word	0x40007000
 80048a0:	420e0044 	.word	0x420e0044

080048a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e0cc      	b.n	8004a52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048b8:	4b68      	ldr	r3, [pc, #416]	@ (8004a5c <HAL_RCC_ClockConfig+0x1b8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 030f 	and.w	r3, r3, #15
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d90c      	bls.n	80048e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c6:	4b65      	ldr	r3, [pc, #404]	@ (8004a5c <HAL_RCC_ClockConfig+0x1b8>)
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ce:	4b63      	ldr	r3, [pc, #396]	@ (8004a5c <HAL_RCC_ClockConfig+0x1b8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d001      	beq.n	80048e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e0b8      	b.n	8004a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d020      	beq.n	800492e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d005      	beq.n	8004904 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048f8:	4b59      	ldr	r3, [pc, #356]	@ (8004a60 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	4a58      	ldr	r2, [pc, #352]	@ (8004a60 <HAL_RCC_ClockConfig+0x1bc>)
 80048fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004902:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0308 	and.w	r3, r3, #8
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004910:	4b53      	ldr	r3, [pc, #332]	@ (8004a60 <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	4a52      	ldr	r2, [pc, #328]	@ (8004a60 <HAL_RCC_ClockConfig+0x1bc>)
 8004916:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800491a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800491c:	4b50      	ldr	r3, [pc, #320]	@ (8004a60 <HAL_RCC_ClockConfig+0x1bc>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	494d      	ldr	r1, [pc, #308]	@ (8004a60 <HAL_RCC_ClockConfig+0x1bc>)
 800492a:	4313      	orrs	r3, r2
 800492c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d044      	beq.n	80049c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d107      	bne.n	8004952 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004942:	4b47      	ldr	r3, [pc, #284]	@ (8004a60 <HAL_RCC_ClockConfig+0x1bc>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d119      	bne.n	8004982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e07f      	b.n	8004a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	2b02      	cmp	r3, #2
 8004958:	d003      	beq.n	8004962 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800495e:	2b03      	cmp	r3, #3
 8004960:	d107      	bne.n	8004972 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004962:	4b3f      	ldr	r3, [pc, #252]	@ (8004a60 <HAL_RCC_ClockConfig+0x1bc>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d109      	bne.n	8004982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e06f      	b.n	8004a52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004972:	4b3b      	ldr	r3, [pc, #236]	@ (8004a60 <HAL_RCC_ClockConfig+0x1bc>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e067      	b.n	8004a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004982:	4b37      	ldr	r3, [pc, #220]	@ (8004a60 <HAL_RCC_ClockConfig+0x1bc>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f023 0203 	bic.w	r2, r3, #3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	4934      	ldr	r1, [pc, #208]	@ (8004a60 <HAL_RCC_ClockConfig+0x1bc>)
 8004990:	4313      	orrs	r3, r2
 8004992:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004994:	f7fd fdb2 	bl	80024fc <HAL_GetTick>
 8004998:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800499a:	e00a      	b.n	80049b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800499c:	f7fd fdae 	bl	80024fc <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e04f      	b.n	8004a52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049b2:	4b2b      	ldr	r3, [pc, #172]	@ (8004a60 <HAL_RCC_ClockConfig+0x1bc>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 020c 	and.w	r2, r3, #12
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d1eb      	bne.n	800499c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049c4:	4b25      	ldr	r3, [pc, #148]	@ (8004a5c <HAL_RCC_ClockConfig+0x1b8>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 030f 	and.w	r3, r3, #15
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d20c      	bcs.n	80049ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d2:	4b22      	ldr	r3, [pc, #136]	@ (8004a5c <HAL_RCC_ClockConfig+0x1b8>)
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049da:	4b20      	ldr	r3, [pc, #128]	@ (8004a5c <HAL_RCC_ClockConfig+0x1b8>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d001      	beq.n	80049ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e032      	b.n	8004a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d008      	beq.n	8004a0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049f8:	4b19      	ldr	r3, [pc, #100]	@ (8004a60 <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	4916      	ldr	r1, [pc, #88]	@ (8004a60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0308 	and.w	r3, r3, #8
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d009      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a16:	4b12      	ldr	r3, [pc, #72]	@ (8004a60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	00db      	lsls	r3, r3, #3
 8004a24:	490e      	ldr	r1, [pc, #56]	@ (8004a60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a2a:	f000 f841 	bl	8004ab0 <HAL_RCC_GetSysClockFreq>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	4b0b      	ldr	r3, [pc, #44]	@ (8004a60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	091b      	lsrs	r3, r3, #4
 8004a36:	f003 030f 	and.w	r3, r3, #15
 8004a3a:	490a      	ldr	r1, [pc, #40]	@ (8004a64 <HAL_RCC_ClockConfig+0x1c0>)
 8004a3c:	5ccb      	ldrb	r3, [r1, r3]
 8004a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a42:	4a09      	ldr	r2, [pc, #36]	@ (8004a68 <HAL_RCC_ClockConfig+0x1c4>)
 8004a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a46:	4b09      	ldr	r3, [pc, #36]	@ (8004a6c <HAL_RCC_ClockConfig+0x1c8>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fd fd12 	bl	8002474 <HAL_InitTick>

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	40023c00 	.word	0x40023c00
 8004a60:	40023800 	.word	0x40023800
 8004a64:	08007008 	.word	0x08007008
 8004a68:	20000030 	.word	0x20000030
 8004a6c:	20000034 	.word	0x20000034

08004a70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a74:	4b03      	ldr	r3, [pc, #12]	@ (8004a84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a76:	681b      	ldr	r3, [r3, #0]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	20000030 	.word	0x20000030

08004a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a8c:	f7ff fff0 	bl	8004a70 <HAL_RCC_GetHCLKFreq>
 8004a90:	4602      	mov	r2, r0
 8004a92:	4b05      	ldr	r3, [pc, #20]	@ (8004aa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	0a9b      	lsrs	r3, r3, #10
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	4903      	ldr	r1, [pc, #12]	@ (8004aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a9e:	5ccb      	ldrb	r3, [r1, r3]
 8004aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	08007018 	.word	0x08007018

08004ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ab4:	b0ae      	sub	sp, #184	@ 0xb8
 8004ab6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ad6:	4bcb      	ldr	r3, [pc, #812]	@ (8004e04 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 030c 	and.w	r3, r3, #12
 8004ade:	2b0c      	cmp	r3, #12
 8004ae0:	f200 8204 	bhi.w	8004eec <HAL_RCC_GetSysClockFreq+0x43c>
 8004ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8004aec <HAL_RCC_GetSysClockFreq+0x3c>)
 8004ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aea:	bf00      	nop
 8004aec:	08004b21 	.word	0x08004b21
 8004af0:	08004eed 	.word	0x08004eed
 8004af4:	08004eed 	.word	0x08004eed
 8004af8:	08004eed 	.word	0x08004eed
 8004afc:	08004b29 	.word	0x08004b29
 8004b00:	08004eed 	.word	0x08004eed
 8004b04:	08004eed 	.word	0x08004eed
 8004b08:	08004eed 	.word	0x08004eed
 8004b0c:	08004b31 	.word	0x08004b31
 8004b10:	08004eed 	.word	0x08004eed
 8004b14:	08004eed 	.word	0x08004eed
 8004b18:	08004eed 	.word	0x08004eed
 8004b1c:	08004d21 	.word	0x08004d21
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b20:	4bb9      	ldr	r3, [pc, #740]	@ (8004e08 <HAL_RCC_GetSysClockFreq+0x358>)
 8004b22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8004b26:	e1e5      	b.n	8004ef4 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b28:	4bb7      	ldr	r3, [pc, #732]	@ (8004e08 <HAL_RCC_GetSysClockFreq+0x358>)
 8004b2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004b2e:	e1e1      	b.n	8004ef4 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b30:	4bb4      	ldr	r3, [pc, #720]	@ (8004e04 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b3c:	4bb1      	ldr	r3, [pc, #708]	@ (8004e04 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d071      	beq.n	8004c2c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b48:	4bae      	ldr	r3, [pc, #696]	@ (8004e04 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	099b      	lsrs	r3, r3, #6
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004b54:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004b58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b64:	2300      	movs	r3, #0
 8004b66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b6e:	4622      	mov	r2, r4
 8004b70:	462b      	mov	r3, r5
 8004b72:	f04f 0000 	mov.w	r0, #0
 8004b76:	f04f 0100 	mov.w	r1, #0
 8004b7a:	0159      	lsls	r1, r3, #5
 8004b7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b80:	0150      	lsls	r0, r2, #5
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	4621      	mov	r1, r4
 8004b88:	1a51      	subs	r1, r2, r1
 8004b8a:	6439      	str	r1, [r7, #64]	@ 0x40
 8004b8c:	4629      	mov	r1, r5
 8004b8e:	eb63 0301 	sbc.w	r3, r3, r1
 8004b92:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004ba0:	4649      	mov	r1, r9
 8004ba2:	018b      	lsls	r3, r1, #6
 8004ba4:	4641      	mov	r1, r8
 8004ba6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004baa:	4641      	mov	r1, r8
 8004bac:	018a      	lsls	r2, r1, #6
 8004bae:	4641      	mov	r1, r8
 8004bb0:	1a51      	subs	r1, r2, r1
 8004bb2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004bb4:	4649      	mov	r1, r9
 8004bb6:	eb63 0301 	sbc.w	r3, r3, r1
 8004bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	f04f 0300 	mov.w	r3, #0
 8004bc4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004bc8:	4649      	mov	r1, r9
 8004bca:	00cb      	lsls	r3, r1, #3
 8004bcc:	4641      	mov	r1, r8
 8004bce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bd2:	4641      	mov	r1, r8
 8004bd4:	00ca      	lsls	r2, r1, #3
 8004bd6:	4610      	mov	r0, r2
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4603      	mov	r3, r0
 8004bdc:	4622      	mov	r2, r4
 8004bde:	189b      	adds	r3, r3, r2
 8004be0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004be2:	462b      	mov	r3, r5
 8004be4:	460a      	mov	r2, r1
 8004be6:	eb42 0303 	adc.w	r3, r2, r3
 8004bea:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bec:	f04f 0200 	mov.w	r2, #0
 8004bf0:	f04f 0300 	mov.w	r3, #0
 8004bf4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004bf8:	4629      	mov	r1, r5
 8004bfa:	028b      	lsls	r3, r1, #10
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c02:	4621      	mov	r1, r4
 8004c04:	028a      	lsls	r2, r1, #10
 8004c06:	4610      	mov	r0, r2
 8004c08:	4619      	mov	r1, r3
 8004c0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004c18:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004c1c:	f7fb ff9a 	bl	8000b54 <__aeabi_uldivmod>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	4613      	mov	r3, r2
 8004c26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c2a:	e067      	b.n	8004cfc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c2c:	4b75      	ldr	r3, [pc, #468]	@ (8004e04 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	099b      	lsrs	r3, r3, #6
 8004c32:	2200      	movs	r2, #0
 8004c34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c38:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004c3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c46:	2300      	movs	r3, #0
 8004c48:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004c4a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004c4e:	4622      	mov	r2, r4
 8004c50:	462b      	mov	r3, r5
 8004c52:	f04f 0000 	mov.w	r0, #0
 8004c56:	f04f 0100 	mov.w	r1, #0
 8004c5a:	0159      	lsls	r1, r3, #5
 8004c5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c60:	0150      	lsls	r0, r2, #5
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4621      	mov	r1, r4
 8004c68:	1a51      	subs	r1, r2, r1
 8004c6a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004c6c:	4629      	mov	r1, r5
 8004c6e:	eb63 0301 	sbc.w	r3, r3, r1
 8004c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004c80:	4649      	mov	r1, r9
 8004c82:	018b      	lsls	r3, r1, #6
 8004c84:	4641      	mov	r1, r8
 8004c86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c8a:	4641      	mov	r1, r8
 8004c8c:	018a      	lsls	r2, r1, #6
 8004c8e:	4641      	mov	r1, r8
 8004c90:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c94:	4649      	mov	r1, r9
 8004c96:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c9a:	f04f 0200 	mov.w	r2, #0
 8004c9e:	f04f 0300 	mov.w	r3, #0
 8004ca2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ca6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004caa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cae:	4692      	mov	sl, r2
 8004cb0:	469b      	mov	fp, r3
 8004cb2:	4623      	mov	r3, r4
 8004cb4:	eb1a 0303 	adds.w	r3, sl, r3
 8004cb8:	623b      	str	r3, [r7, #32]
 8004cba:	462b      	mov	r3, r5
 8004cbc:	eb4b 0303 	adc.w	r3, fp, r3
 8004cc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	f04f 0300 	mov.w	r3, #0
 8004cca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004cce:	4629      	mov	r1, r5
 8004cd0:	028b      	lsls	r3, r1, #10
 8004cd2:	4621      	mov	r1, r4
 8004cd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cd8:	4621      	mov	r1, r4
 8004cda:	028a      	lsls	r2, r1, #10
 8004cdc:	4610      	mov	r0, r2
 8004cde:	4619      	mov	r1, r3
 8004ce0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ce8:	677a      	str	r2, [r7, #116]	@ 0x74
 8004cea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004cee:	f7fb ff31 	bl	8000b54 <__aeabi_uldivmod>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004cfc:	4b41      	ldr	r3, [pc, #260]	@ (8004e04 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	0c1b      	lsrs	r3, r3, #16
 8004d02:	f003 0303 	and.w	r3, r3, #3
 8004d06:	3301      	adds	r3, #1
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8004d0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004d1e:	e0e9      	b.n	8004ef4 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d20:	4b38      	ldr	r3, [pc, #224]	@ (8004e04 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d2c:	4b35      	ldr	r3, [pc, #212]	@ (8004e04 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d069      	beq.n	8004e0c <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d38:	4b32      	ldr	r3, [pc, #200]	@ (8004e04 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	099b      	lsrs	r3, r3, #6
 8004d3e:	2200      	movs	r2, #0
 8004d40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004d44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d50:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004d54:	4622      	mov	r2, r4
 8004d56:	462b      	mov	r3, r5
 8004d58:	f04f 0000 	mov.w	r0, #0
 8004d5c:	f04f 0100 	mov.w	r1, #0
 8004d60:	0159      	lsls	r1, r3, #5
 8004d62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d66:	0150      	lsls	r0, r2, #5
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4621      	mov	r1, r4
 8004d6e:	1a51      	subs	r1, r2, r1
 8004d70:	61b9      	str	r1, [r7, #24]
 8004d72:	4629      	mov	r1, r5
 8004d74:	eb63 0301 	sbc.w	r3, r3, r1
 8004d78:	61fb      	str	r3, [r7, #28]
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004d86:	4659      	mov	r1, fp
 8004d88:	018b      	lsls	r3, r1, #6
 8004d8a:	4651      	mov	r1, sl
 8004d8c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d90:	4651      	mov	r1, sl
 8004d92:	018a      	lsls	r2, r1, #6
 8004d94:	4651      	mov	r1, sl
 8004d96:	ebb2 0801 	subs.w	r8, r2, r1
 8004d9a:	4659      	mov	r1, fp
 8004d9c:	eb63 0901 	sbc.w	r9, r3, r1
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004db0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004db4:	4690      	mov	r8, r2
 8004db6:	4699      	mov	r9, r3
 8004db8:	4623      	mov	r3, r4
 8004dba:	eb18 0303 	adds.w	r3, r8, r3
 8004dbe:	613b      	str	r3, [r7, #16]
 8004dc0:	462b      	mov	r3, r5
 8004dc2:	eb49 0303 	adc.w	r3, r9, r3
 8004dc6:	617b      	str	r3, [r7, #20]
 8004dc8:	f04f 0200 	mov.w	r2, #0
 8004dcc:	f04f 0300 	mov.w	r3, #0
 8004dd0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	028b      	lsls	r3, r1, #10
 8004dd8:	4621      	mov	r1, r4
 8004dda:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dde:	4621      	mov	r1, r4
 8004de0:	028a      	lsls	r2, r1, #10
 8004de2:	4610      	mov	r0, r2
 8004de4:	4619      	mov	r1, r3
 8004de6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004dea:	2200      	movs	r2, #0
 8004dec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004dee:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004df0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004df4:	f7fb feae 	bl	8000b54 <__aeabi_uldivmod>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e02:	e063      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0x41c>
 8004e04:	40023800 	.word	0x40023800
 8004e08:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e0c:	4b3d      	ldr	r3, [pc, #244]	@ (8004f04 <HAL_RCC_GetSysClockFreq+0x454>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	099b      	lsrs	r3, r3, #6
 8004e12:	2200      	movs	r2, #0
 8004e14:	4618      	mov	r0, r3
 8004e16:	4611      	mov	r1, r2
 8004e18:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e1c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e1e:	2300      	movs	r3, #0
 8004e20:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e22:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004e26:	4642      	mov	r2, r8
 8004e28:	464b      	mov	r3, r9
 8004e2a:	f04f 0000 	mov.w	r0, #0
 8004e2e:	f04f 0100 	mov.w	r1, #0
 8004e32:	0159      	lsls	r1, r3, #5
 8004e34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e38:	0150      	lsls	r0, r2, #5
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	4641      	mov	r1, r8
 8004e40:	1a51      	subs	r1, r2, r1
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	4649      	mov	r1, r9
 8004e46:	eb63 0301 	sbc.w	r3, r3, r1
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	f04f 0300 	mov.w	r3, #0
 8004e54:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004e58:	4659      	mov	r1, fp
 8004e5a:	018b      	lsls	r3, r1, #6
 8004e5c:	4651      	mov	r1, sl
 8004e5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e62:	4651      	mov	r1, sl
 8004e64:	018a      	lsls	r2, r1, #6
 8004e66:	4651      	mov	r1, sl
 8004e68:	1a54      	subs	r4, r2, r1
 8004e6a:	4659      	mov	r1, fp
 8004e6c:	eb63 0501 	sbc.w	r5, r3, r1
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	f04f 0300 	mov.w	r3, #0
 8004e78:	00eb      	lsls	r3, r5, #3
 8004e7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e7e:	00e2      	lsls	r2, r4, #3
 8004e80:	4614      	mov	r4, r2
 8004e82:	461d      	mov	r5, r3
 8004e84:	4643      	mov	r3, r8
 8004e86:	18e3      	adds	r3, r4, r3
 8004e88:	603b      	str	r3, [r7, #0]
 8004e8a:	464b      	mov	r3, r9
 8004e8c:	eb45 0303 	adc.w	r3, r5, r3
 8004e90:	607b      	str	r3, [r7, #4]
 8004e92:	f04f 0200 	mov.w	r2, #0
 8004e96:	f04f 0300 	mov.w	r3, #0
 8004e9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e9e:	4629      	mov	r1, r5
 8004ea0:	028b      	lsls	r3, r1, #10
 8004ea2:	4621      	mov	r1, r4
 8004ea4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ea8:	4621      	mov	r1, r4
 8004eaa:	028a      	lsls	r2, r1, #10
 8004eac:	4610      	mov	r0, r2
 8004eae:	4619      	mov	r1, r3
 8004eb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004eb8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004eba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ebe:	f7fb fe49 	bl	8000b54 <__aeabi_uldivmod>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004ecc:	4b0d      	ldr	r3, [pc, #52]	@ (8004f04 <HAL_RCC_GetSysClockFreq+0x454>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	0f1b      	lsrs	r3, r3, #28
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8004eda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004ede:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004eea:	e003      	b.n	8004ef4 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004eec:	4b06      	ldr	r3, [pc, #24]	@ (8004f08 <HAL_RCC_GetSysClockFreq+0x458>)
 8004eee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004ef2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ef4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	37b8      	adds	r7, #184	@ 0xb8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f02:	bf00      	nop
 8004f04:	40023800 	.word	0x40023800
 8004f08:	00f42400 	.word	0x00f42400

08004f0c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e28d      	b.n	800543a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 8083 	beq.w	8005032 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f2c:	4b94      	ldr	r3, [pc, #592]	@ (8005180 <HAL_RCC_OscConfig+0x274>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f003 030c 	and.w	r3, r3, #12
 8004f34:	2b04      	cmp	r3, #4
 8004f36:	d019      	beq.n	8004f6c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f38:	4b91      	ldr	r3, [pc, #580]	@ (8005180 <HAL_RCC_OscConfig+0x274>)
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f40:	2b08      	cmp	r3, #8
 8004f42:	d106      	bne.n	8004f52 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f44:	4b8e      	ldr	r3, [pc, #568]	@ (8005180 <HAL_RCC_OscConfig+0x274>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f50:	d00c      	beq.n	8004f6c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f52:	4b8b      	ldr	r3, [pc, #556]	@ (8005180 <HAL_RCC_OscConfig+0x274>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f5a:	2b0c      	cmp	r3, #12
 8004f5c:	d112      	bne.n	8004f84 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f5e:	4b88      	ldr	r3, [pc, #544]	@ (8005180 <HAL_RCC_OscConfig+0x274>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f6a:	d10b      	bne.n	8004f84 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f6c:	4b84      	ldr	r3, [pc, #528]	@ (8005180 <HAL_RCC_OscConfig+0x274>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d05b      	beq.n	8005030 <HAL_RCC_OscConfig+0x124>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d157      	bne.n	8005030 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e25a      	b.n	800543a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f8c:	d106      	bne.n	8004f9c <HAL_RCC_OscConfig+0x90>
 8004f8e:	4b7c      	ldr	r3, [pc, #496]	@ (8005180 <HAL_RCC_OscConfig+0x274>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a7b      	ldr	r2, [pc, #492]	@ (8005180 <HAL_RCC_OscConfig+0x274>)
 8004f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f98:	6013      	str	r3, [r2, #0]
 8004f9a:	e01d      	b.n	8004fd8 <HAL_RCC_OscConfig+0xcc>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fa4:	d10c      	bne.n	8004fc0 <HAL_RCC_OscConfig+0xb4>
 8004fa6:	4b76      	ldr	r3, [pc, #472]	@ (8005180 <HAL_RCC_OscConfig+0x274>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a75      	ldr	r2, [pc, #468]	@ (8005180 <HAL_RCC_OscConfig+0x274>)
 8004fac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	4b73      	ldr	r3, [pc, #460]	@ (8005180 <HAL_RCC_OscConfig+0x274>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a72      	ldr	r2, [pc, #456]	@ (8005180 <HAL_RCC_OscConfig+0x274>)
 8004fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	e00b      	b.n	8004fd8 <HAL_RCC_OscConfig+0xcc>
 8004fc0:	4b6f      	ldr	r3, [pc, #444]	@ (8005180 <HAL_RCC_OscConfig+0x274>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a6e      	ldr	r2, [pc, #440]	@ (8005180 <HAL_RCC_OscConfig+0x274>)
 8004fc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	4b6c      	ldr	r3, [pc, #432]	@ (8005180 <HAL_RCC_OscConfig+0x274>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a6b      	ldr	r2, [pc, #428]	@ (8005180 <HAL_RCC_OscConfig+0x274>)
 8004fd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d013      	beq.n	8005008 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe0:	f7fd fa8c 	bl	80024fc <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fe8:	f7fd fa88 	bl	80024fc <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b64      	cmp	r3, #100	@ 0x64
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e21f      	b.n	800543a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ffa:	4b61      	ldr	r3, [pc, #388]	@ (8005180 <HAL_RCC_OscConfig+0x274>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0f0      	beq.n	8004fe8 <HAL_RCC_OscConfig+0xdc>
 8005006:	e014      	b.n	8005032 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005008:	f7fd fa78 	bl	80024fc <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800500e:	e008      	b.n	8005022 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005010:	f7fd fa74 	bl	80024fc <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b64      	cmp	r3, #100	@ 0x64
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e20b      	b.n	800543a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005022:	4b57      	ldr	r3, [pc, #348]	@ (8005180 <HAL_RCC_OscConfig+0x274>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1f0      	bne.n	8005010 <HAL_RCC_OscConfig+0x104>
 800502e:	e000      	b.n	8005032 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d06f      	beq.n	800511e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800503e:	4b50      	ldr	r3, [pc, #320]	@ (8005180 <HAL_RCC_OscConfig+0x274>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 030c 	and.w	r3, r3, #12
 8005046:	2b00      	cmp	r3, #0
 8005048:	d017      	beq.n	800507a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800504a:	4b4d      	ldr	r3, [pc, #308]	@ (8005180 <HAL_RCC_OscConfig+0x274>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005052:	2b08      	cmp	r3, #8
 8005054:	d105      	bne.n	8005062 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005056:	4b4a      	ldr	r3, [pc, #296]	@ (8005180 <HAL_RCC_OscConfig+0x274>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00b      	beq.n	800507a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005062:	4b47      	ldr	r3, [pc, #284]	@ (8005180 <HAL_RCC_OscConfig+0x274>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800506a:	2b0c      	cmp	r3, #12
 800506c:	d11c      	bne.n	80050a8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800506e:	4b44      	ldr	r3, [pc, #272]	@ (8005180 <HAL_RCC_OscConfig+0x274>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d116      	bne.n	80050a8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800507a:	4b41      	ldr	r3, [pc, #260]	@ (8005180 <HAL_RCC_OscConfig+0x274>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d005      	beq.n	8005092 <HAL_RCC_OscConfig+0x186>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d001      	beq.n	8005092 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e1d3      	b.n	800543a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005092:	4b3b      	ldr	r3, [pc, #236]	@ (8005180 <HAL_RCC_OscConfig+0x274>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	4937      	ldr	r1, [pc, #220]	@ (8005180 <HAL_RCC_OscConfig+0x274>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050a6:	e03a      	b.n	800511e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d020      	beq.n	80050f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050b0:	4b34      	ldr	r3, [pc, #208]	@ (8005184 <HAL_RCC_OscConfig+0x278>)
 80050b2:	2201      	movs	r2, #1
 80050b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b6:	f7fd fa21 	bl	80024fc <HAL_GetTick>
 80050ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050bc:	e008      	b.n	80050d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050be:	f7fd fa1d 	bl	80024fc <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d901      	bls.n	80050d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e1b4      	b.n	800543a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050d0:	4b2b      	ldr	r3, [pc, #172]	@ (8005180 <HAL_RCC_OscConfig+0x274>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d0f0      	beq.n	80050be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050dc:	4b28      	ldr	r3, [pc, #160]	@ (8005180 <HAL_RCC_OscConfig+0x274>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	4925      	ldr	r1, [pc, #148]	@ (8005180 <HAL_RCC_OscConfig+0x274>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	600b      	str	r3, [r1, #0]
 80050f0:	e015      	b.n	800511e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050f2:	4b24      	ldr	r3, [pc, #144]	@ (8005184 <HAL_RCC_OscConfig+0x278>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f8:	f7fd fa00 	bl	80024fc <HAL_GetTick>
 80050fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050fe:	e008      	b.n	8005112 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005100:	f7fd f9fc 	bl	80024fc <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b02      	cmp	r3, #2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e193      	b.n	800543a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005112:	4b1b      	ldr	r3, [pc, #108]	@ (8005180 <HAL_RCC_OscConfig+0x274>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1f0      	bne.n	8005100 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0308 	and.w	r3, r3, #8
 8005126:	2b00      	cmp	r3, #0
 8005128:	d036      	beq.n	8005198 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d016      	beq.n	8005160 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005132:	4b15      	ldr	r3, [pc, #84]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 8005134:	2201      	movs	r2, #1
 8005136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005138:	f7fd f9e0 	bl	80024fc <HAL_GetTick>
 800513c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005140:	f7fd f9dc 	bl	80024fc <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e173      	b.n	800543a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005152:	4b0b      	ldr	r3, [pc, #44]	@ (8005180 <HAL_RCC_OscConfig+0x274>)
 8005154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d0f0      	beq.n	8005140 <HAL_RCC_OscConfig+0x234>
 800515e:	e01b      	b.n	8005198 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005160:	4b09      	ldr	r3, [pc, #36]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005166:	f7fd f9c9 	bl	80024fc <HAL_GetTick>
 800516a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800516c:	e00e      	b.n	800518c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800516e:	f7fd f9c5 	bl	80024fc <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d907      	bls.n	800518c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e15c      	b.n	800543a <HAL_RCC_OscConfig+0x52e>
 8005180:	40023800 	.word	0x40023800
 8005184:	42470000 	.word	0x42470000
 8005188:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800518c:	4b8a      	ldr	r3, [pc, #552]	@ (80053b8 <HAL_RCC_OscConfig+0x4ac>)
 800518e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1ea      	bne.n	800516e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0304 	and.w	r3, r3, #4
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 8097 	beq.w	80052d4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051a6:	2300      	movs	r3, #0
 80051a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051aa:	4b83      	ldr	r3, [pc, #524]	@ (80053b8 <HAL_RCC_OscConfig+0x4ac>)
 80051ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10f      	bne.n	80051d6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051b6:	2300      	movs	r3, #0
 80051b8:	60bb      	str	r3, [r7, #8]
 80051ba:	4b7f      	ldr	r3, [pc, #508]	@ (80053b8 <HAL_RCC_OscConfig+0x4ac>)
 80051bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051be:	4a7e      	ldr	r2, [pc, #504]	@ (80053b8 <HAL_RCC_OscConfig+0x4ac>)
 80051c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80051c6:	4b7c      	ldr	r3, [pc, #496]	@ (80053b8 <HAL_RCC_OscConfig+0x4ac>)
 80051c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051ce:	60bb      	str	r3, [r7, #8]
 80051d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051d2:	2301      	movs	r3, #1
 80051d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d6:	4b79      	ldr	r3, [pc, #484]	@ (80053bc <HAL_RCC_OscConfig+0x4b0>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d118      	bne.n	8005214 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051e2:	4b76      	ldr	r3, [pc, #472]	@ (80053bc <HAL_RCC_OscConfig+0x4b0>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a75      	ldr	r2, [pc, #468]	@ (80053bc <HAL_RCC_OscConfig+0x4b0>)
 80051e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ee:	f7fd f985 	bl	80024fc <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f4:	e008      	b.n	8005208 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051f6:	f7fd f981 	bl	80024fc <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e118      	b.n	800543a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005208:	4b6c      	ldr	r3, [pc, #432]	@ (80053bc <HAL_RCC_OscConfig+0x4b0>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0f0      	beq.n	80051f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d106      	bne.n	800522a <HAL_RCC_OscConfig+0x31e>
 800521c:	4b66      	ldr	r3, [pc, #408]	@ (80053b8 <HAL_RCC_OscConfig+0x4ac>)
 800521e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005220:	4a65      	ldr	r2, [pc, #404]	@ (80053b8 <HAL_RCC_OscConfig+0x4ac>)
 8005222:	f043 0301 	orr.w	r3, r3, #1
 8005226:	6713      	str	r3, [r2, #112]	@ 0x70
 8005228:	e01c      	b.n	8005264 <HAL_RCC_OscConfig+0x358>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	2b05      	cmp	r3, #5
 8005230:	d10c      	bne.n	800524c <HAL_RCC_OscConfig+0x340>
 8005232:	4b61      	ldr	r3, [pc, #388]	@ (80053b8 <HAL_RCC_OscConfig+0x4ac>)
 8005234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005236:	4a60      	ldr	r2, [pc, #384]	@ (80053b8 <HAL_RCC_OscConfig+0x4ac>)
 8005238:	f043 0304 	orr.w	r3, r3, #4
 800523c:	6713      	str	r3, [r2, #112]	@ 0x70
 800523e:	4b5e      	ldr	r3, [pc, #376]	@ (80053b8 <HAL_RCC_OscConfig+0x4ac>)
 8005240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005242:	4a5d      	ldr	r2, [pc, #372]	@ (80053b8 <HAL_RCC_OscConfig+0x4ac>)
 8005244:	f043 0301 	orr.w	r3, r3, #1
 8005248:	6713      	str	r3, [r2, #112]	@ 0x70
 800524a:	e00b      	b.n	8005264 <HAL_RCC_OscConfig+0x358>
 800524c:	4b5a      	ldr	r3, [pc, #360]	@ (80053b8 <HAL_RCC_OscConfig+0x4ac>)
 800524e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005250:	4a59      	ldr	r2, [pc, #356]	@ (80053b8 <HAL_RCC_OscConfig+0x4ac>)
 8005252:	f023 0301 	bic.w	r3, r3, #1
 8005256:	6713      	str	r3, [r2, #112]	@ 0x70
 8005258:	4b57      	ldr	r3, [pc, #348]	@ (80053b8 <HAL_RCC_OscConfig+0x4ac>)
 800525a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800525c:	4a56      	ldr	r2, [pc, #344]	@ (80053b8 <HAL_RCC_OscConfig+0x4ac>)
 800525e:	f023 0304 	bic.w	r3, r3, #4
 8005262:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d015      	beq.n	8005298 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800526c:	f7fd f946 	bl	80024fc <HAL_GetTick>
 8005270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005272:	e00a      	b.n	800528a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005274:	f7fd f942 	bl	80024fc <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005282:	4293      	cmp	r3, r2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e0d7      	b.n	800543a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800528a:	4b4b      	ldr	r3, [pc, #300]	@ (80053b8 <HAL_RCC_OscConfig+0x4ac>)
 800528c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0ee      	beq.n	8005274 <HAL_RCC_OscConfig+0x368>
 8005296:	e014      	b.n	80052c2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005298:	f7fd f930 	bl	80024fc <HAL_GetTick>
 800529c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800529e:	e00a      	b.n	80052b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052a0:	f7fd f92c 	bl	80024fc <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e0c1      	b.n	800543a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052b6:	4b40      	ldr	r3, [pc, #256]	@ (80053b8 <HAL_RCC_OscConfig+0x4ac>)
 80052b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1ee      	bne.n	80052a0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052c2:	7dfb      	ldrb	r3, [r7, #23]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d105      	bne.n	80052d4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052c8:	4b3b      	ldr	r3, [pc, #236]	@ (80053b8 <HAL_RCC_OscConfig+0x4ac>)
 80052ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052cc:	4a3a      	ldr	r2, [pc, #232]	@ (80053b8 <HAL_RCC_OscConfig+0x4ac>)
 80052ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 80ad 	beq.w	8005438 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052de:	4b36      	ldr	r3, [pc, #216]	@ (80053b8 <HAL_RCC_OscConfig+0x4ac>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 030c 	and.w	r3, r3, #12
 80052e6:	2b08      	cmp	r3, #8
 80052e8:	d060      	beq.n	80053ac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d145      	bne.n	800537e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052f2:	4b33      	ldr	r3, [pc, #204]	@ (80053c0 <HAL_RCC_OscConfig+0x4b4>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f8:	f7fd f900 	bl	80024fc <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005300:	f7fd f8fc 	bl	80024fc <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e093      	b.n	800543a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005312:	4b29      	ldr	r3, [pc, #164]	@ (80053b8 <HAL_RCC_OscConfig+0x4ac>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1f0      	bne.n	8005300 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	69da      	ldr	r2, [r3, #28]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532c:	019b      	lsls	r3, r3, #6
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005334:	085b      	lsrs	r3, r3, #1
 8005336:	3b01      	subs	r3, #1
 8005338:	041b      	lsls	r3, r3, #16
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005340:	061b      	lsls	r3, r3, #24
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005348:	071b      	lsls	r3, r3, #28
 800534a:	491b      	ldr	r1, [pc, #108]	@ (80053b8 <HAL_RCC_OscConfig+0x4ac>)
 800534c:	4313      	orrs	r3, r2
 800534e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005350:	4b1b      	ldr	r3, [pc, #108]	@ (80053c0 <HAL_RCC_OscConfig+0x4b4>)
 8005352:	2201      	movs	r2, #1
 8005354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005356:	f7fd f8d1 	bl	80024fc <HAL_GetTick>
 800535a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800535c:	e008      	b.n	8005370 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800535e:	f7fd f8cd 	bl	80024fc <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	2b02      	cmp	r3, #2
 800536a:	d901      	bls.n	8005370 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e064      	b.n	800543a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005370:	4b11      	ldr	r3, [pc, #68]	@ (80053b8 <HAL_RCC_OscConfig+0x4ac>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d0f0      	beq.n	800535e <HAL_RCC_OscConfig+0x452>
 800537c:	e05c      	b.n	8005438 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800537e:	4b10      	ldr	r3, [pc, #64]	@ (80053c0 <HAL_RCC_OscConfig+0x4b4>)
 8005380:	2200      	movs	r2, #0
 8005382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005384:	f7fd f8ba 	bl	80024fc <HAL_GetTick>
 8005388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800538a:	e008      	b.n	800539e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800538c:	f7fd f8b6 	bl	80024fc <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b02      	cmp	r3, #2
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e04d      	b.n	800543a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800539e:	4b06      	ldr	r3, [pc, #24]	@ (80053b8 <HAL_RCC_OscConfig+0x4ac>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1f0      	bne.n	800538c <HAL_RCC_OscConfig+0x480>
 80053aa:	e045      	b.n	8005438 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d107      	bne.n	80053c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e040      	b.n	800543a <HAL_RCC_OscConfig+0x52e>
 80053b8:	40023800 	.word	0x40023800
 80053bc:	40007000 	.word	0x40007000
 80053c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053c4:	4b1f      	ldr	r3, [pc, #124]	@ (8005444 <HAL_RCC_OscConfig+0x538>)
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d030      	beq.n	8005434 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053dc:	429a      	cmp	r2, r3
 80053de:	d129      	bne.n	8005434 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d122      	bne.n	8005434 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80053f4:	4013      	ands	r3, r2
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80053fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d119      	bne.n	8005434 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540a:	085b      	lsrs	r3, r3, #1
 800540c:	3b01      	subs	r3, #1
 800540e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005410:	429a      	cmp	r2, r3
 8005412:	d10f      	bne.n	8005434 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005420:	429a      	cmp	r2, r3
 8005422:	d107      	bne.n	8005434 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800542e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005430:	429a      	cmp	r2, r3
 8005432:	d001      	beq.n	8005438 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e000      	b.n	800543a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3718      	adds	r7, #24
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	40023800 	.word	0x40023800

08005448 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e041      	b.n	80054de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d106      	bne.n	8005474 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7fc ff34 	bl	80022dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	3304      	adds	r3, #4
 8005484:	4619      	mov	r1, r3
 8005486:	4610      	mov	r0, r2
 8005488:	f000 fd8c 	bl	8005fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
	...

080054e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d001      	beq.n	8005500 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e04e      	b.n	800559e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68da      	ldr	r2, [r3, #12]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f042 0201 	orr.w	r2, r2, #1
 8005516:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a23      	ldr	r2, [pc, #140]	@ (80055ac <HAL_TIM_Base_Start_IT+0xc4>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d022      	beq.n	8005568 <HAL_TIM_Base_Start_IT+0x80>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800552a:	d01d      	beq.n	8005568 <HAL_TIM_Base_Start_IT+0x80>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a1f      	ldr	r2, [pc, #124]	@ (80055b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d018      	beq.n	8005568 <HAL_TIM_Base_Start_IT+0x80>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a1e      	ldr	r2, [pc, #120]	@ (80055b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d013      	beq.n	8005568 <HAL_TIM_Base_Start_IT+0x80>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a1c      	ldr	r2, [pc, #112]	@ (80055b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d00e      	beq.n	8005568 <HAL_TIM_Base_Start_IT+0x80>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a1b      	ldr	r2, [pc, #108]	@ (80055bc <HAL_TIM_Base_Start_IT+0xd4>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d009      	beq.n	8005568 <HAL_TIM_Base_Start_IT+0x80>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a19      	ldr	r2, [pc, #100]	@ (80055c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d004      	beq.n	8005568 <HAL_TIM_Base_Start_IT+0x80>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a18      	ldr	r2, [pc, #96]	@ (80055c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d111      	bne.n	800558c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2b06      	cmp	r3, #6
 8005578:	d010      	beq.n	800559c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f042 0201 	orr.w	r2, r2, #1
 8005588:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800558a:	e007      	b.n	800559c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0201 	orr.w	r2, r2, #1
 800559a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	40010000 	.word	0x40010000
 80055b0:	40000400 	.word	0x40000400
 80055b4:	40000800 	.word	0x40000800
 80055b8:	40000c00 	.word	0x40000c00
 80055bc:	40010400 	.word	0x40010400
 80055c0:	40014000 	.word	0x40014000
 80055c4:	40001800 	.word	0x40001800

080055c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e041      	b.n	800565e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d106      	bne.n	80055f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7fc fdec 	bl	80021cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	3304      	adds	r3, #4
 8005604:	4619      	mov	r1, r3
 8005606:	4610      	mov	r0, r2
 8005608:	f000 fccc 	bl	8005fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
	...

08005668 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d109      	bne.n	800568c <HAL_TIM_PWM_Start+0x24>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b01      	cmp	r3, #1
 8005682:	bf14      	ite	ne
 8005684:	2301      	movne	r3, #1
 8005686:	2300      	moveq	r3, #0
 8005688:	b2db      	uxtb	r3, r3
 800568a:	e022      	b.n	80056d2 <HAL_TIM_PWM_Start+0x6a>
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	2b04      	cmp	r3, #4
 8005690:	d109      	bne.n	80056a6 <HAL_TIM_PWM_Start+0x3e>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b01      	cmp	r3, #1
 800569c:	bf14      	ite	ne
 800569e:	2301      	movne	r3, #1
 80056a0:	2300      	moveq	r3, #0
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	e015      	b.n	80056d2 <HAL_TIM_PWM_Start+0x6a>
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d109      	bne.n	80056c0 <HAL_TIM_PWM_Start+0x58>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	bf14      	ite	ne
 80056b8:	2301      	movne	r3, #1
 80056ba:	2300      	moveq	r3, #0
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	e008      	b.n	80056d2 <HAL_TIM_PWM_Start+0x6a>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	bf14      	ite	ne
 80056cc:	2301      	movne	r3, #1
 80056ce:	2300      	moveq	r3, #0
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e07c      	b.n	80057d4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d104      	bne.n	80056ea <HAL_TIM_PWM_Start+0x82>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2202      	movs	r2, #2
 80056e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056e8:	e013      	b.n	8005712 <HAL_TIM_PWM_Start+0xaa>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b04      	cmp	r3, #4
 80056ee:	d104      	bne.n	80056fa <HAL_TIM_PWM_Start+0x92>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056f8:	e00b      	b.n	8005712 <HAL_TIM_PWM_Start+0xaa>
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b08      	cmp	r3, #8
 80056fe:	d104      	bne.n	800570a <HAL_TIM_PWM_Start+0xa2>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2202      	movs	r2, #2
 8005704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005708:	e003      	b.n	8005712 <HAL_TIM_PWM_Start+0xaa>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2202      	movs	r2, #2
 800570e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2201      	movs	r2, #1
 8005718:	6839      	ldr	r1, [r7, #0]
 800571a:	4618      	mov	r0, r3
 800571c:	f000 ff38 	bl	8006590 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a2d      	ldr	r2, [pc, #180]	@ (80057dc <HAL_TIM_PWM_Start+0x174>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d004      	beq.n	8005734 <HAL_TIM_PWM_Start+0xcc>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a2c      	ldr	r2, [pc, #176]	@ (80057e0 <HAL_TIM_PWM_Start+0x178>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d101      	bne.n	8005738 <HAL_TIM_PWM_Start+0xd0>
 8005734:	2301      	movs	r3, #1
 8005736:	e000      	b.n	800573a <HAL_TIM_PWM_Start+0xd2>
 8005738:	2300      	movs	r3, #0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d007      	beq.n	800574e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800574c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a22      	ldr	r2, [pc, #136]	@ (80057dc <HAL_TIM_PWM_Start+0x174>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d022      	beq.n	800579e <HAL_TIM_PWM_Start+0x136>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005760:	d01d      	beq.n	800579e <HAL_TIM_PWM_Start+0x136>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a1f      	ldr	r2, [pc, #124]	@ (80057e4 <HAL_TIM_PWM_Start+0x17c>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d018      	beq.n	800579e <HAL_TIM_PWM_Start+0x136>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a1d      	ldr	r2, [pc, #116]	@ (80057e8 <HAL_TIM_PWM_Start+0x180>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d013      	beq.n	800579e <HAL_TIM_PWM_Start+0x136>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a1c      	ldr	r2, [pc, #112]	@ (80057ec <HAL_TIM_PWM_Start+0x184>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d00e      	beq.n	800579e <HAL_TIM_PWM_Start+0x136>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a16      	ldr	r2, [pc, #88]	@ (80057e0 <HAL_TIM_PWM_Start+0x178>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d009      	beq.n	800579e <HAL_TIM_PWM_Start+0x136>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a18      	ldr	r2, [pc, #96]	@ (80057f0 <HAL_TIM_PWM_Start+0x188>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d004      	beq.n	800579e <HAL_TIM_PWM_Start+0x136>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a16      	ldr	r2, [pc, #88]	@ (80057f4 <HAL_TIM_PWM_Start+0x18c>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d111      	bne.n	80057c2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f003 0307 	and.w	r3, r3, #7
 80057a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2b06      	cmp	r3, #6
 80057ae:	d010      	beq.n	80057d2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0201 	orr.w	r2, r2, #1
 80057be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057c0:	e007      	b.n	80057d2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f042 0201 	orr.w	r2, r2, #1
 80057d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	40010000 	.word	0x40010000
 80057e0:	40010400 	.word	0x40010400
 80057e4:	40000400 	.word	0x40000400
 80057e8:	40000800 	.word	0x40000800
 80057ec:	40000c00 	.word	0x40000c00
 80057f0:	40014000 	.word	0x40014000
 80057f4:	40001800 	.word	0x40001800

080057f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e097      	b.n	800593c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b00      	cmp	r3, #0
 8005816:	d106      	bne.n	8005826 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7fc fd13 	bl	800224c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2202      	movs	r2, #2
 800582a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	6812      	ldr	r2, [r2, #0]
 8005838:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800583c:	f023 0307 	bic.w	r3, r3, #7
 8005840:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	3304      	adds	r3, #4
 800584a:	4619      	mov	r1, r3
 800584c:	4610      	mov	r0, r2
 800584e:	f000 fba9 	bl	8005fa4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	4313      	orrs	r3, r2
 8005872:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800587a:	f023 0303 	bic.w	r3, r3, #3
 800587e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	021b      	lsls	r3, r3, #8
 800588a:	4313      	orrs	r3, r2
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	4313      	orrs	r3, r2
 8005890:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005898:	f023 030c 	bic.w	r3, r3, #12
 800589c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80058a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	68da      	ldr	r2, [r3, #12]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	021b      	lsls	r3, r3, #8
 80058b4:	4313      	orrs	r3, r2
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	011a      	lsls	r2, r3, #4
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	031b      	lsls	r3, r3, #12
 80058c8:	4313      	orrs	r3, r2
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80058d6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80058de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	695b      	ldr	r3, [r3, #20]
 80058e8:	011b      	lsls	r3, r3, #4
 80058ea:	4313      	orrs	r3, r2
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3718      	adds	r7, #24
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005954:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800595c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005964:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800596c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d110      	bne.n	8005996 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005974:	7bfb      	ldrb	r3, [r7, #15]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d102      	bne.n	8005980 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800597a:	7b7b      	ldrb	r3, [r7, #13]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d001      	beq.n	8005984 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e069      	b.n	8005a58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2202      	movs	r2, #2
 8005988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005994:	e031      	b.n	80059fa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b04      	cmp	r3, #4
 800599a:	d110      	bne.n	80059be <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800599c:	7bbb      	ldrb	r3, [r7, #14]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d102      	bne.n	80059a8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80059a2:	7b3b      	ldrb	r3, [r7, #12]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d001      	beq.n	80059ac <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e055      	b.n	8005a58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059bc:	e01d      	b.n	80059fa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059be:	7bfb      	ldrb	r3, [r7, #15]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d108      	bne.n	80059d6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80059c4:	7bbb      	ldrb	r3, [r7, #14]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d105      	bne.n	80059d6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059ca:	7b7b      	ldrb	r3, [r7, #13]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d102      	bne.n	80059d6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80059d0:	7b3b      	ldrb	r3, [r7, #12]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d001      	beq.n	80059da <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e03e      	b.n	8005a58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2202      	movs	r2, #2
 80059de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2202      	movs	r2, #2
 80059e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2202      	movs	r2, #2
 80059ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2202      	movs	r2, #2
 80059f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d003      	beq.n	8005a08 <HAL_TIM_Encoder_Start+0xc4>
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	2b04      	cmp	r3, #4
 8005a04:	d008      	beq.n	8005a18 <HAL_TIM_Encoder_Start+0xd4>
 8005a06:	e00f      	b.n	8005a28 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	2100      	movs	r1, #0
 8005a10:	4618      	mov	r0, r3
 8005a12:	f000 fdbd 	bl	8006590 <TIM_CCxChannelCmd>
      break;
 8005a16:	e016      	b.n	8005a46 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	2104      	movs	r1, #4
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 fdb5 	bl	8006590 <TIM_CCxChannelCmd>
      break;
 8005a26:	e00e      	b.n	8005a46 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	2100      	movs	r1, #0
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 fdad 	bl	8006590 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	2104      	movs	r1, #4
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 fda6 	bl	8006590 <TIM_CCxChannelCmd>
      break;
 8005a44:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f042 0201 	orr.w	r2, r2, #1
 8005a54:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d020      	beq.n	8005ac4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f003 0302 	and.w	r3, r3, #2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d01b      	beq.n	8005ac4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f06f 0202 	mvn.w	r2, #2
 8005a94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fa5b 	bl	8005f66 <HAL_TIM_IC_CaptureCallback>
 8005ab0:	e005      	b.n	8005abe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fa4d 	bl	8005f52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 fa5e 	bl	8005f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f003 0304 	and.w	r3, r3, #4
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d020      	beq.n	8005b10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f003 0304 	and.w	r3, r3, #4
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d01b      	beq.n	8005b10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f06f 0204 	mvn.w	r2, #4
 8005ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2202      	movs	r2, #2
 8005ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fa35 	bl	8005f66 <HAL_TIM_IC_CaptureCallback>
 8005afc:	e005      	b.n	8005b0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fa27 	bl	8005f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 fa38 	bl	8005f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	f003 0308 	and.w	r3, r3, #8
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d020      	beq.n	8005b5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f003 0308 	and.w	r3, r3, #8
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d01b      	beq.n	8005b5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f06f 0208 	mvn.w	r2, #8
 8005b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2204      	movs	r2, #4
 8005b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	f003 0303 	and.w	r3, r3, #3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d003      	beq.n	8005b4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fa0f 	bl	8005f66 <HAL_TIM_IC_CaptureCallback>
 8005b48:	e005      	b.n	8005b56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fa01 	bl	8005f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fa12 	bl	8005f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f003 0310 	and.w	r3, r3, #16
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d020      	beq.n	8005ba8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f003 0310 	and.w	r3, r3, #16
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d01b      	beq.n	8005ba8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f06f 0210 	mvn.w	r2, #16
 8005b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2208      	movs	r2, #8
 8005b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f9e9 	bl	8005f66 <HAL_TIM_IC_CaptureCallback>
 8005b94:	e005      	b.n	8005ba2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f9db 	bl	8005f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 f9ec 	bl	8005f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00c      	beq.n	8005bcc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d007      	beq.n	8005bcc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f06f 0201 	mvn.w	r2, #1
 8005bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7fc f8aa 	bl	8001d20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00c      	beq.n	8005bf0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d007      	beq.n	8005bf0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fdce 	bl	800678c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00c      	beq.n	8005c14 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d007      	beq.n	8005c14 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f9bd 	bl	8005f8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	f003 0320 	and.w	r3, r3, #32
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00c      	beq.n	8005c38 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f003 0320 	and.w	r3, r3, #32
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d007      	beq.n	8005c38 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f06f 0220 	mvn.w	r2, #32
 8005c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 fda0 	bl	8006778 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c38:	bf00      	nop
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d101      	bne.n	8005c5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	e0ae      	b.n	8005dbc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b0c      	cmp	r3, #12
 8005c6a:	f200 809f 	bhi.w	8005dac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c74:	08005ca9 	.word	0x08005ca9
 8005c78:	08005dad 	.word	0x08005dad
 8005c7c:	08005dad 	.word	0x08005dad
 8005c80:	08005dad 	.word	0x08005dad
 8005c84:	08005ce9 	.word	0x08005ce9
 8005c88:	08005dad 	.word	0x08005dad
 8005c8c:	08005dad 	.word	0x08005dad
 8005c90:	08005dad 	.word	0x08005dad
 8005c94:	08005d2b 	.word	0x08005d2b
 8005c98:	08005dad 	.word	0x08005dad
 8005c9c:	08005dad 	.word	0x08005dad
 8005ca0:	08005dad 	.word	0x08005dad
 8005ca4:	08005d6b 	.word	0x08005d6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68b9      	ldr	r1, [r7, #8]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f000 fa24 	bl	80060fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	699a      	ldr	r2, [r3, #24]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f042 0208 	orr.w	r2, r2, #8
 8005cc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	699a      	ldr	r2, [r3, #24]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f022 0204 	bic.w	r2, r2, #4
 8005cd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6999      	ldr	r1, [r3, #24]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	691a      	ldr	r2, [r3, #16]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	619a      	str	r2, [r3, #24]
      break;
 8005ce6:	e064      	b.n	8005db2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68b9      	ldr	r1, [r7, #8]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 fa74 	bl	80061dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	699a      	ldr	r2, [r3, #24]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	699a      	ldr	r2, [r3, #24]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6999      	ldr	r1, [r3, #24]
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	021a      	lsls	r2, r3, #8
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	430a      	orrs	r2, r1
 8005d26:	619a      	str	r2, [r3, #24]
      break;
 8005d28:	e043      	b.n	8005db2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68b9      	ldr	r1, [r7, #8]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f000 fac9 	bl	80062c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	69da      	ldr	r2, [r3, #28]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f042 0208 	orr.w	r2, r2, #8
 8005d44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	69da      	ldr	r2, [r3, #28]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 0204 	bic.w	r2, r2, #4
 8005d54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	69d9      	ldr	r1, [r3, #28]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	691a      	ldr	r2, [r3, #16]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	430a      	orrs	r2, r1
 8005d66:	61da      	str	r2, [r3, #28]
      break;
 8005d68:	e023      	b.n	8005db2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68b9      	ldr	r1, [r7, #8]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f000 fb1d 	bl	80063b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	69da      	ldr	r2, [r3, #28]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	69da      	ldr	r2, [r3, #28]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	69d9      	ldr	r1, [r3, #28]
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	021a      	lsls	r2, r3, #8
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	61da      	str	r2, [r3, #28]
      break;
 8005daa:	e002      	b.n	8005db2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	75fb      	strb	r3, [r7, #23]
      break;
 8005db0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3718      	adds	r7, #24
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d101      	bne.n	8005de0 <HAL_TIM_ConfigClockSource+0x1c>
 8005ddc:	2302      	movs	r3, #2
 8005dde:	e0b4      	b.n	8005f4a <HAL_TIM_ConfigClockSource+0x186>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005dfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e18:	d03e      	beq.n	8005e98 <HAL_TIM_ConfigClockSource+0xd4>
 8005e1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e1e:	f200 8087 	bhi.w	8005f30 <HAL_TIM_ConfigClockSource+0x16c>
 8005e22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e26:	f000 8086 	beq.w	8005f36 <HAL_TIM_ConfigClockSource+0x172>
 8005e2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e2e:	d87f      	bhi.n	8005f30 <HAL_TIM_ConfigClockSource+0x16c>
 8005e30:	2b70      	cmp	r3, #112	@ 0x70
 8005e32:	d01a      	beq.n	8005e6a <HAL_TIM_ConfigClockSource+0xa6>
 8005e34:	2b70      	cmp	r3, #112	@ 0x70
 8005e36:	d87b      	bhi.n	8005f30 <HAL_TIM_ConfigClockSource+0x16c>
 8005e38:	2b60      	cmp	r3, #96	@ 0x60
 8005e3a:	d050      	beq.n	8005ede <HAL_TIM_ConfigClockSource+0x11a>
 8005e3c:	2b60      	cmp	r3, #96	@ 0x60
 8005e3e:	d877      	bhi.n	8005f30 <HAL_TIM_ConfigClockSource+0x16c>
 8005e40:	2b50      	cmp	r3, #80	@ 0x50
 8005e42:	d03c      	beq.n	8005ebe <HAL_TIM_ConfigClockSource+0xfa>
 8005e44:	2b50      	cmp	r3, #80	@ 0x50
 8005e46:	d873      	bhi.n	8005f30 <HAL_TIM_ConfigClockSource+0x16c>
 8005e48:	2b40      	cmp	r3, #64	@ 0x40
 8005e4a:	d058      	beq.n	8005efe <HAL_TIM_ConfigClockSource+0x13a>
 8005e4c:	2b40      	cmp	r3, #64	@ 0x40
 8005e4e:	d86f      	bhi.n	8005f30 <HAL_TIM_ConfigClockSource+0x16c>
 8005e50:	2b30      	cmp	r3, #48	@ 0x30
 8005e52:	d064      	beq.n	8005f1e <HAL_TIM_ConfigClockSource+0x15a>
 8005e54:	2b30      	cmp	r3, #48	@ 0x30
 8005e56:	d86b      	bhi.n	8005f30 <HAL_TIM_ConfigClockSource+0x16c>
 8005e58:	2b20      	cmp	r3, #32
 8005e5a:	d060      	beq.n	8005f1e <HAL_TIM_ConfigClockSource+0x15a>
 8005e5c:	2b20      	cmp	r3, #32
 8005e5e:	d867      	bhi.n	8005f30 <HAL_TIM_ConfigClockSource+0x16c>
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d05c      	beq.n	8005f1e <HAL_TIM_ConfigClockSource+0x15a>
 8005e64:	2b10      	cmp	r3, #16
 8005e66:	d05a      	beq.n	8005f1e <HAL_TIM_ConfigClockSource+0x15a>
 8005e68:	e062      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e7a:	f000 fb69 	bl	8006550 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	609a      	str	r2, [r3, #8]
      break;
 8005e96:	e04f      	b.n	8005f38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ea8:	f000 fb52 	bl	8006550 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689a      	ldr	r2, [r3, #8]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005eba:	609a      	str	r2, [r3, #8]
      break;
 8005ebc:	e03c      	b.n	8005f38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eca:	461a      	mov	r2, r3
 8005ecc:	f000 fac6 	bl	800645c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2150      	movs	r1, #80	@ 0x50
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 fb1f 	bl	800651a <TIM_ITRx_SetConfig>
      break;
 8005edc:	e02c      	b.n	8005f38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005eea:	461a      	mov	r2, r3
 8005eec:	f000 fae5 	bl	80064ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2160      	movs	r1, #96	@ 0x60
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 fb0f 	bl	800651a <TIM_ITRx_SetConfig>
      break;
 8005efc:	e01c      	b.n	8005f38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	f000 faa6 	bl	800645c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2140      	movs	r1, #64	@ 0x40
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 faff 	bl	800651a <TIM_ITRx_SetConfig>
      break;
 8005f1c:	e00c      	b.n	8005f38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4619      	mov	r1, r3
 8005f28:	4610      	mov	r0, r2
 8005f2a:	f000 faf6 	bl	800651a <TIM_ITRx_SetConfig>
      break;
 8005f2e:	e003      	b.n	8005f38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	73fb      	strb	r3, [r7, #15]
      break;
 8005f34:	e000      	b.n	8005f38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f66:	b480      	push	{r7}
 8005f68:	b083      	sub	sp, #12
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f6e:	bf00      	nop
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b083      	sub	sp, #12
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f82:	bf00      	nop
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f96:	bf00      	nop
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
	...

08005fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a46      	ldr	r2, [pc, #280]	@ (80060d0 <TIM_Base_SetConfig+0x12c>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d013      	beq.n	8005fe4 <TIM_Base_SetConfig+0x40>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fc2:	d00f      	beq.n	8005fe4 <TIM_Base_SetConfig+0x40>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a43      	ldr	r2, [pc, #268]	@ (80060d4 <TIM_Base_SetConfig+0x130>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d00b      	beq.n	8005fe4 <TIM_Base_SetConfig+0x40>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a42      	ldr	r2, [pc, #264]	@ (80060d8 <TIM_Base_SetConfig+0x134>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d007      	beq.n	8005fe4 <TIM_Base_SetConfig+0x40>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a41      	ldr	r2, [pc, #260]	@ (80060dc <TIM_Base_SetConfig+0x138>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d003      	beq.n	8005fe4 <TIM_Base_SetConfig+0x40>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a40      	ldr	r2, [pc, #256]	@ (80060e0 <TIM_Base_SetConfig+0x13c>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d108      	bne.n	8005ff6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a35      	ldr	r2, [pc, #212]	@ (80060d0 <TIM_Base_SetConfig+0x12c>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d02b      	beq.n	8006056 <TIM_Base_SetConfig+0xb2>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006004:	d027      	beq.n	8006056 <TIM_Base_SetConfig+0xb2>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a32      	ldr	r2, [pc, #200]	@ (80060d4 <TIM_Base_SetConfig+0x130>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d023      	beq.n	8006056 <TIM_Base_SetConfig+0xb2>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a31      	ldr	r2, [pc, #196]	@ (80060d8 <TIM_Base_SetConfig+0x134>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d01f      	beq.n	8006056 <TIM_Base_SetConfig+0xb2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a30      	ldr	r2, [pc, #192]	@ (80060dc <TIM_Base_SetConfig+0x138>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d01b      	beq.n	8006056 <TIM_Base_SetConfig+0xb2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a2f      	ldr	r2, [pc, #188]	@ (80060e0 <TIM_Base_SetConfig+0x13c>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d017      	beq.n	8006056 <TIM_Base_SetConfig+0xb2>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a2e      	ldr	r2, [pc, #184]	@ (80060e4 <TIM_Base_SetConfig+0x140>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d013      	beq.n	8006056 <TIM_Base_SetConfig+0xb2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a2d      	ldr	r2, [pc, #180]	@ (80060e8 <TIM_Base_SetConfig+0x144>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d00f      	beq.n	8006056 <TIM_Base_SetConfig+0xb2>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a2c      	ldr	r2, [pc, #176]	@ (80060ec <TIM_Base_SetConfig+0x148>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d00b      	beq.n	8006056 <TIM_Base_SetConfig+0xb2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a2b      	ldr	r2, [pc, #172]	@ (80060f0 <TIM_Base_SetConfig+0x14c>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d007      	beq.n	8006056 <TIM_Base_SetConfig+0xb2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a2a      	ldr	r2, [pc, #168]	@ (80060f4 <TIM_Base_SetConfig+0x150>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d003      	beq.n	8006056 <TIM_Base_SetConfig+0xb2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a29      	ldr	r2, [pc, #164]	@ (80060f8 <TIM_Base_SetConfig+0x154>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d108      	bne.n	8006068 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800605c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	4313      	orrs	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	4313      	orrs	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a10      	ldr	r2, [pc, #64]	@ (80060d0 <TIM_Base_SetConfig+0x12c>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d003      	beq.n	800609c <TIM_Base_SetConfig+0xf8>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a12      	ldr	r2, [pc, #72]	@ (80060e0 <TIM_Base_SetConfig+0x13c>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d103      	bne.n	80060a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	691a      	ldr	r2, [r3, #16]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d105      	bne.n	80060c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	f023 0201 	bic.w	r2, r3, #1
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	611a      	str	r2, [r3, #16]
  }
}
 80060c2:	bf00      	nop
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	40010000 	.word	0x40010000
 80060d4:	40000400 	.word	0x40000400
 80060d8:	40000800 	.word	0x40000800
 80060dc:	40000c00 	.word	0x40000c00
 80060e0:	40010400 	.word	0x40010400
 80060e4:	40014000 	.word	0x40014000
 80060e8:	40014400 	.word	0x40014400
 80060ec:	40014800 	.word	0x40014800
 80060f0:	40001800 	.word	0x40001800
 80060f4:	40001c00 	.word	0x40001c00
 80060f8:	40002000 	.word	0x40002000

080060fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	f023 0201 	bic.w	r2, r3, #1
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800612a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f023 0303 	bic.w	r3, r3, #3
 8006132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f023 0302 	bic.w	r3, r3, #2
 8006144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	4313      	orrs	r3, r2
 800614e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a20      	ldr	r2, [pc, #128]	@ (80061d4 <TIM_OC1_SetConfig+0xd8>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d003      	beq.n	8006160 <TIM_OC1_SetConfig+0x64>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a1f      	ldr	r2, [pc, #124]	@ (80061d8 <TIM_OC1_SetConfig+0xdc>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d10c      	bne.n	800617a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f023 0308 	bic.w	r3, r3, #8
 8006166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	4313      	orrs	r3, r2
 8006170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f023 0304 	bic.w	r3, r3, #4
 8006178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a15      	ldr	r2, [pc, #84]	@ (80061d4 <TIM_OC1_SetConfig+0xd8>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d003      	beq.n	800618a <TIM_OC1_SetConfig+0x8e>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a14      	ldr	r2, [pc, #80]	@ (80061d8 <TIM_OC1_SetConfig+0xdc>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d111      	bne.n	80061ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006190:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006198:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	621a      	str	r2, [r3, #32]
}
 80061c8:	bf00      	nop
 80061ca:	371c      	adds	r7, #28
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	40010000 	.word	0x40010000
 80061d8:	40010400 	.word	0x40010400

080061dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a1b      	ldr	r3, [r3, #32]
 80061f0:	f023 0210 	bic.w	r2, r3, #16
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800620a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	021b      	lsls	r3, r3, #8
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	4313      	orrs	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f023 0320 	bic.w	r3, r3, #32
 8006226:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	011b      	lsls	r3, r3, #4
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	4313      	orrs	r3, r2
 8006232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a22      	ldr	r2, [pc, #136]	@ (80062c0 <TIM_OC2_SetConfig+0xe4>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d003      	beq.n	8006244 <TIM_OC2_SetConfig+0x68>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a21      	ldr	r2, [pc, #132]	@ (80062c4 <TIM_OC2_SetConfig+0xe8>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d10d      	bne.n	8006260 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800624a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	011b      	lsls	r3, r3, #4
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	4313      	orrs	r3, r2
 8006256:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800625e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a17      	ldr	r2, [pc, #92]	@ (80062c0 <TIM_OC2_SetConfig+0xe4>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d003      	beq.n	8006270 <TIM_OC2_SetConfig+0x94>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a16      	ldr	r2, [pc, #88]	@ (80062c4 <TIM_OC2_SetConfig+0xe8>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d113      	bne.n	8006298 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006276:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800627e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	4313      	orrs	r3, r2
 800628a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	4313      	orrs	r3, r2
 8006296:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	621a      	str	r2, [r3, #32]
}
 80062b2:	bf00      	nop
 80062b4:	371c      	adds	r7, #28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	40010000 	.word	0x40010000
 80062c4:	40010400 	.word	0x40010400

080062c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b087      	sub	sp, #28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	69db      	ldr	r3, [r3, #28]
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f023 0303 	bic.w	r3, r3, #3
 80062fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	4313      	orrs	r3, r2
 8006308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	021b      	lsls	r3, r3, #8
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	4313      	orrs	r3, r2
 800631c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a21      	ldr	r2, [pc, #132]	@ (80063a8 <TIM_OC3_SetConfig+0xe0>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d003      	beq.n	800632e <TIM_OC3_SetConfig+0x66>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a20      	ldr	r2, [pc, #128]	@ (80063ac <TIM_OC3_SetConfig+0xe4>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d10d      	bne.n	800634a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006334:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	021b      	lsls	r3, r3, #8
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	4313      	orrs	r3, r2
 8006340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a16      	ldr	r2, [pc, #88]	@ (80063a8 <TIM_OC3_SetConfig+0xe0>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d003      	beq.n	800635a <TIM_OC3_SetConfig+0x92>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a15      	ldr	r2, [pc, #84]	@ (80063ac <TIM_OC3_SetConfig+0xe4>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d113      	bne.n	8006382 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006360:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006368:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	011b      	lsls	r3, r3, #4
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	4313      	orrs	r3, r2
 8006374:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	011b      	lsls	r3, r3, #4
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	4313      	orrs	r3, r2
 8006380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	621a      	str	r2, [r3, #32]
}
 800639c:	bf00      	nop
 800639e:	371c      	adds	r7, #28
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr
 80063a8:	40010000 	.word	0x40010000
 80063ac:	40010400 	.word	0x40010400

080063b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b087      	sub	sp, #28
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a1b      	ldr	r3, [r3, #32]
 80063c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	69db      	ldr	r3, [r3, #28]
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	021b      	lsls	r3, r3, #8
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	031b      	lsls	r3, r3, #12
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	4313      	orrs	r3, r2
 8006406:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a12      	ldr	r2, [pc, #72]	@ (8006454 <TIM_OC4_SetConfig+0xa4>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d003      	beq.n	8006418 <TIM_OC4_SetConfig+0x68>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a11      	ldr	r2, [pc, #68]	@ (8006458 <TIM_OC4_SetConfig+0xa8>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d109      	bne.n	800642c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800641e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	019b      	lsls	r3, r3, #6
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	4313      	orrs	r3, r2
 800642a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	685a      	ldr	r2, [r3, #4]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	621a      	str	r2, [r3, #32]
}
 8006446:	bf00      	nop
 8006448:	371c      	adds	r7, #28
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	40010000 	.word	0x40010000
 8006458:	40010400 	.word	0x40010400

0800645c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800645c:	b480      	push	{r7}
 800645e:	b087      	sub	sp, #28
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6a1b      	ldr	r3, [r3, #32]
 800646c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	f023 0201 	bic.w	r2, r3, #1
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006486:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	011b      	lsls	r3, r3, #4
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	4313      	orrs	r3, r2
 8006490:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f023 030a 	bic.w	r3, r3, #10
 8006498:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	4313      	orrs	r3, r2
 80064a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	621a      	str	r2, [r3, #32]
}
 80064ae:	bf00      	nop
 80064b0:	371c      	adds	r7, #28
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064ba:	b480      	push	{r7}
 80064bc:	b087      	sub	sp, #28
 80064be:	af00      	add	r7, sp, #0
 80064c0:	60f8      	str	r0, [r7, #12]
 80064c2:	60b9      	str	r1, [r7, #8]
 80064c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6a1b      	ldr	r3, [r3, #32]
 80064d0:	f023 0210 	bic.w	r2, r3, #16
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	031b      	lsls	r3, r3, #12
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80064f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	011b      	lsls	r3, r3, #4
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	4313      	orrs	r3, r2
 8006500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	621a      	str	r2, [r3, #32]
}
 800650e:	bf00      	nop
 8006510:	371c      	adds	r7, #28
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr

0800651a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800651a:	b480      	push	{r7}
 800651c:	b085      	sub	sp, #20
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
 8006522:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006530:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006532:	683a      	ldr	r2, [r7, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	4313      	orrs	r3, r2
 8006538:	f043 0307 	orr.w	r3, r3, #7
 800653c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	609a      	str	r2, [r3, #8]
}
 8006544:	bf00      	nop
 8006546:	3714      	adds	r7, #20
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006550:	b480      	push	{r7}
 8006552:	b087      	sub	sp, #28
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
 800655c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800656a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	021a      	lsls	r2, r3, #8
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	431a      	orrs	r2, r3
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	4313      	orrs	r3, r2
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	4313      	orrs	r3, r2
 800657c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	609a      	str	r2, [r3, #8]
}
 8006584:	bf00      	nop
 8006586:	371c      	adds	r7, #28
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006590:	b480      	push	{r7}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f003 031f 	and.w	r3, r3, #31
 80065a2:	2201      	movs	r2, #1
 80065a4:	fa02 f303 	lsl.w	r3, r2, r3
 80065a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6a1a      	ldr	r2, [r3, #32]
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	43db      	mvns	r3, r3
 80065b2:	401a      	ands	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6a1a      	ldr	r2, [r3, #32]
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	f003 031f 	and.w	r3, r3, #31
 80065c2:	6879      	ldr	r1, [r7, #4]
 80065c4:	fa01 f303 	lsl.w	r3, r1, r3
 80065c8:	431a      	orrs	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	621a      	str	r2, [r3, #32]
}
 80065ce:	bf00      	nop
 80065d0:	371c      	adds	r7, #28
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
	...

080065dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d101      	bne.n	80065f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065f0:	2302      	movs	r3, #2
 80065f2:	e05a      	b.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2202      	movs	r2, #2
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800661a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	4313      	orrs	r3, r2
 8006624:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a21      	ldr	r2, [pc, #132]	@ (80066b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d022      	beq.n	800667e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006640:	d01d      	beq.n	800667e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a1d      	ldr	r2, [pc, #116]	@ (80066bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d018      	beq.n	800667e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a1b      	ldr	r2, [pc, #108]	@ (80066c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d013      	beq.n	800667e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a1a      	ldr	r2, [pc, #104]	@ (80066c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d00e      	beq.n	800667e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a18      	ldr	r2, [pc, #96]	@ (80066c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d009      	beq.n	800667e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a17      	ldr	r2, [pc, #92]	@ (80066cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d004      	beq.n	800667e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a15      	ldr	r2, [pc, #84]	@ (80066d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d10c      	bne.n	8006698 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006684:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	4313      	orrs	r3, r2
 800668e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3714      	adds	r7, #20
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	40010000 	.word	0x40010000
 80066bc:	40000400 	.word	0x40000400
 80066c0:	40000800 	.word	0x40000800
 80066c4:	40000c00 	.word	0x40000c00
 80066c8:	40010400 	.word	0x40010400
 80066cc:	40014000 	.word	0x40014000
 80066d0:	40001800 	.word	0x40001800

080066d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80066de:	2300      	movs	r3, #0
 80066e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d101      	bne.n	80066f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80066ec:	2302      	movs	r3, #2
 80066ee:	e03d      	b.n	800676c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	4313      	orrs	r3, r2
 8006704:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	4313      	orrs	r3, r2
 8006712:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	4313      	orrs	r3, r2
 8006720:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4313      	orrs	r3, r2
 800672e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	4313      	orrs	r3, r2
 800673c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	4313      	orrs	r3, r2
 800674a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	4313      	orrs	r3, r2
 8006758:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <memset>:
 80067a0:	4402      	add	r2, r0
 80067a2:	4603      	mov	r3, r0
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d100      	bne.n	80067aa <memset+0xa>
 80067a8:	4770      	bx	lr
 80067aa:	f803 1b01 	strb.w	r1, [r3], #1
 80067ae:	e7f9      	b.n	80067a4 <memset+0x4>

080067b0 <__errno>:
 80067b0:	4b01      	ldr	r3, [pc, #4]	@ (80067b8 <__errno+0x8>)
 80067b2:	6818      	ldr	r0, [r3, #0]
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	2000003c 	.word	0x2000003c

080067bc <__libc_init_array>:
 80067bc:	b570      	push	{r4, r5, r6, lr}
 80067be:	4d0d      	ldr	r5, [pc, #52]	@ (80067f4 <__libc_init_array+0x38>)
 80067c0:	4c0d      	ldr	r4, [pc, #52]	@ (80067f8 <__libc_init_array+0x3c>)
 80067c2:	1b64      	subs	r4, r4, r5
 80067c4:	10a4      	asrs	r4, r4, #2
 80067c6:	2600      	movs	r6, #0
 80067c8:	42a6      	cmp	r6, r4
 80067ca:	d109      	bne.n	80067e0 <__libc_init_array+0x24>
 80067cc:	4d0b      	ldr	r5, [pc, #44]	@ (80067fc <__libc_init_array+0x40>)
 80067ce:	4c0c      	ldr	r4, [pc, #48]	@ (8006800 <__libc_init_array+0x44>)
 80067d0:	f000 fc0e 	bl	8006ff0 <_init>
 80067d4:	1b64      	subs	r4, r4, r5
 80067d6:	10a4      	asrs	r4, r4, #2
 80067d8:	2600      	movs	r6, #0
 80067da:	42a6      	cmp	r6, r4
 80067dc:	d105      	bne.n	80067ea <__libc_init_array+0x2e>
 80067de:	bd70      	pop	{r4, r5, r6, pc}
 80067e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80067e4:	4798      	blx	r3
 80067e6:	3601      	adds	r6, #1
 80067e8:	e7ee      	b.n	80067c8 <__libc_init_array+0xc>
 80067ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ee:	4798      	blx	r3
 80067f0:	3601      	adds	r6, #1
 80067f2:	e7f2      	b.n	80067da <__libc_init_array+0x1e>
 80067f4:	080070b8 	.word	0x080070b8
 80067f8:	080070b8 	.word	0x080070b8
 80067fc:	080070b8 	.word	0x080070b8
 8006800:	080070bc 	.word	0x080070bc

08006804 <atan2>:
 8006804:	f000 b898 	b.w	8006938 <__ieee754_atan2>

08006808 <expf>:
 8006808:	b508      	push	{r3, lr}
 800680a:	ed2d 8b02 	vpush	{d8}
 800680e:	eef0 8a40 	vmov.f32	s17, s0
 8006812:	f000 faf9 	bl	8006e08 <__ieee754_expf>
 8006816:	eeb0 8a40 	vmov.f32	s16, s0
 800681a:	eeb0 0a68 	vmov.f32	s0, s17
 800681e:	f000 f829 	bl	8006874 <finitef>
 8006822:	b160      	cbz	r0, 800683e <expf+0x36>
 8006824:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8006864 <expf+0x5c>
 8006828:	eef4 8ae7 	vcmpe.f32	s17, s15
 800682c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006830:	dd0a      	ble.n	8006848 <expf+0x40>
 8006832:	f7ff ffbd 	bl	80067b0 <__errno>
 8006836:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 8006868 <expf+0x60>
 800683a:	2322      	movs	r3, #34	@ 0x22
 800683c:	6003      	str	r3, [r0, #0]
 800683e:	eeb0 0a48 	vmov.f32	s0, s16
 8006842:	ecbd 8b02 	vpop	{d8}
 8006846:	bd08      	pop	{r3, pc}
 8006848:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800686c <expf+0x64>
 800684c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8006850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006854:	d5f3      	bpl.n	800683e <expf+0x36>
 8006856:	f7ff ffab 	bl	80067b0 <__errno>
 800685a:	2322      	movs	r3, #34	@ 0x22
 800685c:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8006870 <expf+0x68>
 8006860:	6003      	str	r3, [r0, #0]
 8006862:	e7ec      	b.n	800683e <expf+0x36>
 8006864:	42b17217 	.word	0x42b17217
 8006868:	7f800000 	.word	0x7f800000
 800686c:	c2cff1b5 	.word	0xc2cff1b5
 8006870:	00000000 	.word	0x00000000

08006874 <finitef>:
 8006874:	ee10 3a10 	vmov	r3, s0
 8006878:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800687c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8006880:	bfac      	ite	ge
 8006882:	2000      	movge	r0, #0
 8006884:	2001      	movlt	r0, #1
 8006886:	4770      	bx	lr

08006888 <fmaxf>:
 8006888:	b508      	push	{r3, lr}
 800688a:	ed2d 8b02 	vpush	{d8}
 800688e:	eeb0 8a40 	vmov.f32	s16, s0
 8006892:	eef0 8a60 	vmov.f32	s17, s1
 8006896:	f000 f831 	bl	80068fc <__fpclassifyf>
 800689a:	b930      	cbnz	r0, 80068aa <fmaxf+0x22>
 800689c:	eeb0 8a68 	vmov.f32	s16, s17
 80068a0:	eeb0 0a48 	vmov.f32	s0, s16
 80068a4:	ecbd 8b02 	vpop	{d8}
 80068a8:	bd08      	pop	{r3, pc}
 80068aa:	eeb0 0a68 	vmov.f32	s0, s17
 80068ae:	f000 f825 	bl	80068fc <__fpclassifyf>
 80068b2:	2800      	cmp	r0, #0
 80068b4:	d0f4      	beq.n	80068a0 <fmaxf+0x18>
 80068b6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80068ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068be:	dded      	ble.n	800689c <fmaxf+0x14>
 80068c0:	e7ee      	b.n	80068a0 <fmaxf+0x18>

080068c2 <fminf>:
 80068c2:	b508      	push	{r3, lr}
 80068c4:	ed2d 8b02 	vpush	{d8}
 80068c8:	eeb0 8a40 	vmov.f32	s16, s0
 80068cc:	eef0 8a60 	vmov.f32	s17, s1
 80068d0:	f000 f814 	bl	80068fc <__fpclassifyf>
 80068d4:	b930      	cbnz	r0, 80068e4 <fminf+0x22>
 80068d6:	eeb0 8a68 	vmov.f32	s16, s17
 80068da:	eeb0 0a48 	vmov.f32	s0, s16
 80068de:	ecbd 8b02 	vpop	{d8}
 80068e2:	bd08      	pop	{r3, pc}
 80068e4:	eeb0 0a68 	vmov.f32	s0, s17
 80068e8:	f000 f808 	bl	80068fc <__fpclassifyf>
 80068ec:	2800      	cmp	r0, #0
 80068ee:	d0f4      	beq.n	80068da <fminf+0x18>
 80068f0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80068f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068f8:	d5ed      	bpl.n	80068d6 <fminf+0x14>
 80068fa:	e7ee      	b.n	80068da <fminf+0x18>

080068fc <__fpclassifyf>:
 80068fc:	ee10 3a10 	vmov	r3, s0
 8006900:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8006904:	d00d      	beq.n	8006922 <__fpclassifyf+0x26>
 8006906:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800690a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800690e:	d30a      	bcc.n	8006926 <__fpclassifyf+0x2a>
 8006910:	4b07      	ldr	r3, [pc, #28]	@ (8006930 <__fpclassifyf+0x34>)
 8006912:	1e42      	subs	r2, r0, #1
 8006914:	429a      	cmp	r2, r3
 8006916:	d908      	bls.n	800692a <__fpclassifyf+0x2e>
 8006918:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800691c:	4258      	negs	r0, r3
 800691e:	4158      	adcs	r0, r3
 8006920:	4770      	bx	lr
 8006922:	2002      	movs	r0, #2
 8006924:	4770      	bx	lr
 8006926:	2004      	movs	r0, #4
 8006928:	4770      	bx	lr
 800692a:	2003      	movs	r0, #3
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	007ffffe 	.word	0x007ffffe
 8006934:	00000000 	.word	0x00000000

08006938 <__ieee754_atan2>:
 8006938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800693c:	ec57 6b11 	vmov	r6, r7, d1
 8006940:	4273      	negs	r3, r6
 8006942:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8006ac0 <__ieee754_atan2+0x188>
 8006946:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800694a:	4333      	orrs	r3, r6
 800694c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006950:	4543      	cmp	r3, r8
 8006952:	ec51 0b10 	vmov	r0, r1, d0
 8006956:	4635      	mov	r5, r6
 8006958:	d809      	bhi.n	800696e <__ieee754_atan2+0x36>
 800695a:	4244      	negs	r4, r0
 800695c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006960:	4304      	orrs	r4, r0
 8006962:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8006966:	4544      	cmp	r4, r8
 8006968:	468e      	mov	lr, r1
 800696a:	4681      	mov	r9, r0
 800696c:	d907      	bls.n	800697e <__ieee754_atan2+0x46>
 800696e:	4632      	mov	r2, r6
 8006970:	463b      	mov	r3, r7
 8006972:	f7f9 fc4f 	bl	8000214 <__adddf3>
 8006976:	ec41 0b10 	vmov	d0, r0, r1
 800697a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800697e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8006982:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8006986:	4334      	orrs	r4, r6
 8006988:	d103      	bne.n	8006992 <__ieee754_atan2+0x5a>
 800698a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800698e:	f000 b89b 	b.w	8006ac8 <atan>
 8006992:	17bc      	asrs	r4, r7, #30
 8006994:	f004 0402 	and.w	r4, r4, #2
 8006998:	ea53 0909 	orrs.w	r9, r3, r9
 800699c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80069a0:	d107      	bne.n	80069b2 <__ieee754_atan2+0x7a>
 80069a2:	2c02      	cmp	r4, #2
 80069a4:	d05f      	beq.n	8006a66 <__ieee754_atan2+0x12e>
 80069a6:	2c03      	cmp	r4, #3
 80069a8:	d1e5      	bne.n	8006976 <__ieee754_atan2+0x3e>
 80069aa:	a141      	add	r1, pc, #260	@ (adr r1, 8006ab0 <__ieee754_atan2+0x178>)
 80069ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069b0:	e7e1      	b.n	8006976 <__ieee754_atan2+0x3e>
 80069b2:	4315      	orrs	r5, r2
 80069b4:	d106      	bne.n	80069c4 <__ieee754_atan2+0x8c>
 80069b6:	f1be 0f00 	cmp.w	lr, #0
 80069ba:	da5f      	bge.n	8006a7c <__ieee754_atan2+0x144>
 80069bc:	a13e      	add	r1, pc, #248	@ (adr r1, 8006ab8 <__ieee754_atan2+0x180>)
 80069be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069c2:	e7d8      	b.n	8006976 <__ieee754_atan2+0x3e>
 80069c4:	4542      	cmp	r2, r8
 80069c6:	d10f      	bne.n	80069e8 <__ieee754_atan2+0xb0>
 80069c8:	4293      	cmp	r3, r2
 80069ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80069ce:	d107      	bne.n	80069e0 <__ieee754_atan2+0xa8>
 80069d0:	2c02      	cmp	r4, #2
 80069d2:	d84c      	bhi.n	8006a6e <__ieee754_atan2+0x136>
 80069d4:	4b34      	ldr	r3, [pc, #208]	@ (8006aa8 <__ieee754_atan2+0x170>)
 80069d6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80069da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80069de:	e7ca      	b.n	8006976 <__ieee754_atan2+0x3e>
 80069e0:	2c02      	cmp	r4, #2
 80069e2:	d848      	bhi.n	8006a76 <__ieee754_atan2+0x13e>
 80069e4:	4b31      	ldr	r3, [pc, #196]	@ (8006aac <__ieee754_atan2+0x174>)
 80069e6:	e7f6      	b.n	80069d6 <__ieee754_atan2+0x9e>
 80069e8:	4543      	cmp	r3, r8
 80069ea:	d0e4      	beq.n	80069b6 <__ieee754_atan2+0x7e>
 80069ec:	1a9b      	subs	r3, r3, r2
 80069ee:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80069f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80069f6:	da1e      	bge.n	8006a36 <__ieee754_atan2+0xfe>
 80069f8:	2f00      	cmp	r7, #0
 80069fa:	da01      	bge.n	8006a00 <__ieee754_atan2+0xc8>
 80069fc:	323c      	adds	r2, #60	@ 0x3c
 80069fe:	db1e      	blt.n	8006a3e <__ieee754_atan2+0x106>
 8006a00:	4632      	mov	r2, r6
 8006a02:	463b      	mov	r3, r7
 8006a04:	f7f9 fee6 	bl	80007d4 <__aeabi_ddiv>
 8006a08:	ec41 0b10 	vmov	d0, r0, r1
 8006a0c:	f000 f9f4 	bl	8006df8 <fabs>
 8006a10:	f000 f85a 	bl	8006ac8 <atan>
 8006a14:	ec51 0b10 	vmov	r0, r1, d0
 8006a18:	2c01      	cmp	r4, #1
 8006a1a:	d013      	beq.n	8006a44 <__ieee754_atan2+0x10c>
 8006a1c:	2c02      	cmp	r4, #2
 8006a1e:	d015      	beq.n	8006a4c <__ieee754_atan2+0x114>
 8006a20:	2c00      	cmp	r4, #0
 8006a22:	d0a8      	beq.n	8006976 <__ieee754_atan2+0x3e>
 8006a24:	a318      	add	r3, pc, #96	@ (adr r3, 8006a88 <__ieee754_atan2+0x150>)
 8006a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2a:	f7f9 fbf1 	bl	8000210 <__aeabi_dsub>
 8006a2e:	a318      	add	r3, pc, #96	@ (adr r3, 8006a90 <__ieee754_atan2+0x158>)
 8006a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a34:	e014      	b.n	8006a60 <__ieee754_atan2+0x128>
 8006a36:	a118      	add	r1, pc, #96	@ (adr r1, 8006a98 <__ieee754_atan2+0x160>)
 8006a38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a3c:	e7ec      	b.n	8006a18 <__ieee754_atan2+0xe0>
 8006a3e:	2000      	movs	r0, #0
 8006a40:	2100      	movs	r1, #0
 8006a42:	e7e9      	b.n	8006a18 <__ieee754_atan2+0xe0>
 8006a44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006a48:	4619      	mov	r1, r3
 8006a4a:	e794      	b.n	8006976 <__ieee754_atan2+0x3e>
 8006a4c:	a30e      	add	r3, pc, #56	@ (adr r3, 8006a88 <__ieee754_atan2+0x150>)
 8006a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a52:	f7f9 fbdd 	bl	8000210 <__aeabi_dsub>
 8006a56:	4602      	mov	r2, r0
 8006a58:	460b      	mov	r3, r1
 8006a5a:	a10d      	add	r1, pc, #52	@ (adr r1, 8006a90 <__ieee754_atan2+0x158>)
 8006a5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a60:	f7f9 fbd6 	bl	8000210 <__aeabi_dsub>
 8006a64:	e787      	b.n	8006976 <__ieee754_atan2+0x3e>
 8006a66:	a10a      	add	r1, pc, #40	@ (adr r1, 8006a90 <__ieee754_atan2+0x158>)
 8006a68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a6c:	e783      	b.n	8006976 <__ieee754_atan2+0x3e>
 8006a6e:	a10c      	add	r1, pc, #48	@ (adr r1, 8006aa0 <__ieee754_atan2+0x168>)
 8006a70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a74:	e77f      	b.n	8006976 <__ieee754_atan2+0x3e>
 8006a76:	2000      	movs	r0, #0
 8006a78:	2100      	movs	r1, #0
 8006a7a:	e77c      	b.n	8006976 <__ieee754_atan2+0x3e>
 8006a7c:	a106      	add	r1, pc, #24	@ (adr r1, 8006a98 <__ieee754_atan2+0x160>)
 8006a7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a82:	e778      	b.n	8006976 <__ieee754_atan2+0x3e>
 8006a84:	f3af 8000 	nop.w
 8006a88:	33145c07 	.word	0x33145c07
 8006a8c:	3ca1a626 	.word	0x3ca1a626
 8006a90:	54442d18 	.word	0x54442d18
 8006a94:	400921fb 	.word	0x400921fb
 8006a98:	54442d18 	.word	0x54442d18
 8006a9c:	3ff921fb 	.word	0x3ff921fb
 8006aa0:	54442d18 	.word	0x54442d18
 8006aa4:	3fe921fb 	.word	0x3fe921fb
 8006aa8:	08007040 	.word	0x08007040
 8006aac:	08007028 	.word	0x08007028
 8006ab0:	54442d18 	.word	0x54442d18
 8006ab4:	c00921fb 	.word	0xc00921fb
 8006ab8:	54442d18 	.word	0x54442d18
 8006abc:	bff921fb 	.word	0xbff921fb
 8006ac0:	7ff00000 	.word	0x7ff00000
 8006ac4:	00000000 	.word	0x00000000

08006ac8 <atan>:
 8006ac8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006acc:	ec55 4b10 	vmov	r4, r5, d0
 8006ad0:	4bbf      	ldr	r3, [pc, #764]	@ (8006dd0 <atan+0x308>)
 8006ad2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8006ad6:	429e      	cmp	r6, r3
 8006ad8:	46ab      	mov	fp, r5
 8006ada:	d918      	bls.n	8006b0e <atan+0x46>
 8006adc:	4bbd      	ldr	r3, [pc, #756]	@ (8006dd4 <atan+0x30c>)
 8006ade:	429e      	cmp	r6, r3
 8006ae0:	d801      	bhi.n	8006ae6 <atan+0x1e>
 8006ae2:	d109      	bne.n	8006af8 <atan+0x30>
 8006ae4:	b144      	cbz	r4, 8006af8 <atan+0x30>
 8006ae6:	4622      	mov	r2, r4
 8006ae8:	462b      	mov	r3, r5
 8006aea:	4620      	mov	r0, r4
 8006aec:	4629      	mov	r1, r5
 8006aee:	f7f9 fb91 	bl	8000214 <__adddf3>
 8006af2:	4604      	mov	r4, r0
 8006af4:	460d      	mov	r5, r1
 8006af6:	e006      	b.n	8006b06 <atan+0x3e>
 8006af8:	f1bb 0f00 	cmp.w	fp, #0
 8006afc:	f340 812b 	ble.w	8006d56 <atan+0x28e>
 8006b00:	a597      	add	r5, pc, #604	@ (adr r5, 8006d60 <atan+0x298>)
 8006b02:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006b06:	ec45 4b10 	vmov	d0, r4, r5
 8006b0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b0e:	4bb2      	ldr	r3, [pc, #712]	@ (8006dd8 <atan+0x310>)
 8006b10:	429e      	cmp	r6, r3
 8006b12:	d813      	bhi.n	8006b3c <atan+0x74>
 8006b14:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8006b18:	429e      	cmp	r6, r3
 8006b1a:	d80c      	bhi.n	8006b36 <atan+0x6e>
 8006b1c:	a392      	add	r3, pc, #584	@ (adr r3, 8006d68 <atan+0x2a0>)
 8006b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b22:	4620      	mov	r0, r4
 8006b24:	4629      	mov	r1, r5
 8006b26:	f7f9 fb75 	bl	8000214 <__adddf3>
 8006b2a:	4bac      	ldr	r3, [pc, #688]	@ (8006ddc <atan+0x314>)
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f7f9 ffb7 	bl	8000aa0 <__aeabi_dcmpgt>
 8006b32:	2800      	cmp	r0, #0
 8006b34:	d1e7      	bne.n	8006b06 <atan+0x3e>
 8006b36:	f04f 3aff 	mov.w	sl, #4294967295
 8006b3a:	e029      	b.n	8006b90 <atan+0xc8>
 8006b3c:	f000 f95c 	bl	8006df8 <fabs>
 8006b40:	4ba7      	ldr	r3, [pc, #668]	@ (8006de0 <atan+0x318>)
 8006b42:	429e      	cmp	r6, r3
 8006b44:	ec55 4b10 	vmov	r4, r5, d0
 8006b48:	f200 80bc 	bhi.w	8006cc4 <atan+0x1fc>
 8006b4c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8006b50:	429e      	cmp	r6, r3
 8006b52:	f200 809e 	bhi.w	8006c92 <atan+0x1ca>
 8006b56:	4622      	mov	r2, r4
 8006b58:	462b      	mov	r3, r5
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	4629      	mov	r1, r5
 8006b5e:	f7f9 fb59 	bl	8000214 <__adddf3>
 8006b62:	4b9e      	ldr	r3, [pc, #632]	@ (8006ddc <atan+0x314>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	f7f9 fb53 	bl	8000210 <__aeabi_dsub>
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	4606      	mov	r6, r0
 8006b6e:	460f      	mov	r7, r1
 8006b70:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006b74:	4620      	mov	r0, r4
 8006b76:	4629      	mov	r1, r5
 8006b78:	f7f9 fb4c 	bl	8000214 <__adddf3>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	460b      	mov	r3, r1
 8006b80:	4630      	mov	r0, r6
 8006b82:	4639      	mov	r1, r7
 8006b84:	f7f9 fe26 	bl	80007d4 <__aeabi_ddiv>
 8006b88:	f04f 0a00 	mov.w	sl, #0
 8006b8c:	4604      	mov	r4, r0
 8006b8e:	460d      	mov	r5, r1
 8006b90:	4622      	mov	r2, r4
 8006b92:	462b      	mov	r3, r5
 8006b94:	4620      	mov	r0, r4
 8006b96:	4629      	mov	r1, r5
 8006b98:	f7f9 fcf2 	bl	8000580 <__aeabi_dmul>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	4680      	mov	r8, r0
 8006ba2:	4689      	mov	r9, r1
 8006ba4:	f7f9 fcec 	bl	8000580 <__aeabi_dmul>
 8006ba8:	a371      	add	r3, pc, #452	@ (adr r3, 8006d70 <atan+0x2a8>)
 8006baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bae:	4606      	mov	r6, r0
 8006bb0:	460f      	mov	r7, r1
 8006bb2:	f7f9 fce5 	bl	8000580 <__aeabi_dmul>
 8006bb6:	a370      	add	r3, pc, #448	@ (adr r3, 8006d78 <atan+0x2b0>)
 8006bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbc:	f7f9 fb2a 	bl	8000214 <__adddf3>
 8006bc0:	4632      	mov	r2, r6
 8006bc2:	463b      	mov	r3, r7
 8006bc4:	f7f9 fcdc 	bl	8000580 <__aeabi_dmul>
 8006bc8:	a36d      	add	r3, pc, #436	@ (adr r3, 8006d80 <atan+0x2b8>)
 8006bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bce:	f7f9 fb21 	bl	8000214 <__adddf3>
 8006bd2:	4632      	mov	r2, r6
 8006bd4:	463b      	mov	r3, r7
 8006bd6:	f7f9 fcd3 	bl	8000580 <__aeabi_dmul>
 8006bda:	a36b      	add	r3, pc, #428	@ (adr r3, 8006d88 <atan+0x2c0>)
 8006bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be0:	f7f9 fb18 	bl	8000214 <__adddf3>
 8006be4:	4632      	mov	r2, r6
 8006be6:	463b      	mov	r3, r7
 8006be8:	f7f9 fcca 	bl	8000580 <__aeabi_dmul>
 8006bec:	a368      	add	r3, pc, #416	@ (adr r3, 8006d90 <atan+0x2c8>)
 8006bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf2:	f7f9 fb0f 	bl	8000214 <__adddf3>
 8006bf6:	4632      	mov	r2, r6
 8006bf8:	463b      	mov	r3, r7
 8006bfa:	f7f9 fcc1 	bl	8000580 <__aeabi_dmul>
 8006bfe:	a366      	add	r3, pc, #408	@ (adr r3, 8006d98 <atan+0x2d0>)
 8006c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c04:	f7f9 fb06 	bl	8000214 <__adddf3>
 8006c08:	4642      	mov	r2, r8
 8006c0a:	464b      	mov	r3, r9
 8006c0c:	f7f9 fcb8 	bl	8000580 <__aeabi_dmul>
 8006c10:	a363      	add	r3, pc, #396	@ (adr r3, 8006da0 <atan+0x2d8>)
 8006c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c16:	4680      	mov	r8, r0
 8006c18:	4689      	mov	r9, r1
 8006c1a:	4630      	mov	r0, r6
 8006c1c:	4639      	mov	r1, r7
 8006c1e:	f7f9 fcaf 	bl	8000580 <__aeabi_dmul>
 8006c22:	a361      	add	r3, pc, #388	@ (adr r3, 8006da8 <atan+0x2e0>)
 8006c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c28:	f7f9 faf2 	bl	8000210 <__aeabi_dsub>
 8006c2c:	4632      	mov	r2, r6
 8006c2e:	463b      	mov	r3, r7
 8006c30:	f7f9 fca6 	bl	8000580 <__aeabi_dmul>
 8006c34:	a35e      	add	r3, pc, #376	@ (adr r3, 8006db0 <atan+0x2e8>)
 8006c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3a:	f7f9 fae9 	bl	8000210 <__aeabi_dsub>
 8006c3e:	4632      	mov	r2, r6
 8006c40:	463b      	mov	r3, r7
 8006c42:	f7f9 fc9d 	bl	8000580 <__aeabi_dmul>
 8006c46:	a35c      	add	r3, pc, #368	@ (adr r3, 8006db8 <atan+0x2f0>)
 8006c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4c:	f7f9 fae0 	bl	8000210 <__aeabi_dsub>
 8006c50:	4632      	mov	r2, r6
 8006c52:	463b      	mov	r3, r7
 8006c54:	f7f9 fc94 	bl	8000580 <__aeabi_dmul>
 8006c58:	a359      	add	r3, pc, #356	@ (adr r3, 8006dc0 <atan+0x2f8>)
 8006c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5e:	f7f9 fad7 	bl	8000210 <__aeabi_dsub>
 8006c62:	4632      	mov	r2, r6
 8006c64:	463b      	mov	r3, r7
 8006c66:	f7f9 fc8b 	bl	8000580 <__aeabi_dmul>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	4640      	mov	r0, r8
 8006c70:	4649      	mov	r1, r9
 8006c72:	f7f9 facf 	bl	8000214 <__adddf3>
 8006c76:	4622      	mov	r2, r4
 8006c78:	462b      	mov	r3, r5
 8006c7a:	f7f9 fc81 	bl	8000580 <__aeabi_dmul>
 8006c7e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006c82:	4602      	mov	r2, r0
 8006c84:	460b      	mov	r3, r1
 8006c86:	d148      	bne.n	8006d1a <atan+0x252>
 8006c88:	4620      	mov	r0, r4
 8006c8a:	4629      	mov	r1, r5
 8006c8c:	f7f9 fac0 	bl	8000210 <__aeabi_dsub>
 8006c90:	e72f      	b.n	8006af2 <atan+0x2a>
 8006c92:	4b52      	ldr	r3, [pc, #328]	@ (8006ddc <atan+0x314>)
 8006c94:	2200      	movs	r2, #0
 8006c96:	4620      	mov	r0, r4
 8006c98:	4629      	mov	r1, r5
 8006c9a:	f7f9 fab9 	bl	8000210 <__aeabi_dsub>
 8006c9e:	4b4f      	ldr	r3, [pc, #316]	@ (8006ddc <atan+0x314>)
 8006ca0:	4606      	mov	r6, r0
 8006ca2:	460f      	mov	r7, r1
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	4629      	mov	r1, r5
 8006caa:	f7f9 fab3 	bl	8000214 <__adddf3>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	4630      	mov	r0, r6
 8006cb4:	4639      	mov	r1, r7
 8006cb6:	f7f9 fd8d 	bl	80007d4 <__aeabi_ddiv>
 8006cba:	f04f 0a01 	mov.w	sl, #1
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	460d      	mov	r5, r1
 8006cc2:	e765      	b.n	8006b90 <atan+0xc8>
 8006cc4:	4b47      	ldr	r3, [pc, #284]	@ (8006de4 <atan+0x31c>)
 8006cc6:	429e      	cmp	r6, r3
 8006cc8:	d21c      	bcs.n	8006d04 <atan+0x23c>
 8006cca:	4b47      	ldr	r3, [pc, #284]	@ (8006de8 <atan+0x320>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	4620      	mov	r0, r4
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	f7f9 fa9d 	bl	8000210 <__aeabi_dsub>
 8006cd6:	4b44      	ldr	r3, [pc, #272]	@ (8006de8 <atan+0x320>)
 8006cd8:	4606      	mov	r6, r0
 8006cda:	460f      	mov	r7, r1
 8006cdc:	2200      	movs	r2, #0
 8006cde:	4620      	mov	r0, r4
 8006ce0:	4629      	mov	r1, r5
 8006ce2:	f7f9 fc4d 	bl	8000580 <__aeabi_dmul>
 8006ce6:	4b3d      	ldr	r3, [pc, #244]	@ (8006ddc <atan+0x314>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f7f9 fa93 	bl	8000214 <__adddf3>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	4630      	mov	r0, r6
 8006cf4:	4639      	mov	r1, r7
 8006cf6:	f7f9 fd6d 	bl	80007d4 <__aeabi_ddiv>
 8006cfa:	f04f 0a02 	mov.w	sl, #2
 8006cfe:	4604      	mov	r4, r0
 8006d00:	460d      	mov	r5, r1
 8006d02:	e745      	b.n	8006b90 <atan+0xc8>
 8006d04:	4622      	mov	r2, r4
 8006d06:	462b      	mov	r3, r5
 8006d08:	4938      	ldr	r1, [pc, #224]	@ (8006dec <atan+0x324>)
 8006d0a:	2000      	movs	r0, #0
 8006d0c:	f7f9 fd62 	bl	80007d4 <__aeabi_ddiv>
 8006d10:	f04f 0a03 	mov.w	sl, #3
 8006d14:	4604      	mov	r4, r0
 8006d16:	460d      	mov	r5, r1
 8006d18:	e73a      	b.n	8006b90 <atan+0xc8>
 8006d1a:	4b35      	ldr	r3, [pc, #212]	@ (8006df0 <atan+0x328>)
 8006d1c:	4e35      	ldr	r6, [pc, #212]	@ (8006df4 <atan+0x32c>)
 8006d1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d26:	f7f9 fa73 	bl	8000210 <__aeabi_dsub>
 8006d2a:	4622      	mov	r2, r4
 8006d2c:	462b      	mov	r3, r5
 8006d2e:	f7f9 fa6f 	bl	8000210 <__aeabi_dsub>
 8006d32:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006d3e:	f7f9 fa67 	bl	8000210 <__aeabi_dsub>
 8006d42:	f1bb 0f00 	cmp.w	fp, #0
 8006d46:	4604      	mov	r4, r0
 8006d48:	460d      	mov	r5, r1
 8006d4a:	f6bf aedc 	bge.w	8006b06 <atan+0x3e>
 8006d4e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006d52:	461d      	mov	r5, r3
 8006d54:	e6d7      	b.n	8006b06 <atan+0x3e>
 8006d56:	a51c      	add	r5, pc, #112	@ (adr r5, 8006dc8 <atan+0x300>)
 8006d58:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006d5c:	e6d3      	b.n	8006b06 <atan+0x3e>
 8006d5e:	bf00      	nop
 8006d60:	54442d18 	.word	0x54442d18
 8006d64:	3ff921fb 	.word	0x3ff921fb
 8006d68:	8800759c 	.word	0x8800759c
 8006d6c:	7e37e43c 	.word	0x7e37e43c
 8006d70:	e322da11 	.word	0xe322da11
 8006d74:	3f90ad3a 	.word	0x3f90ad3a
 8006d78:	24760deb 	.word	0x24760deb
 8006d7c:	3fa97b4b 	.word	0x3fa97b4b
 8006d80:	a0d03d51 	.word	0xa0d03d51
 8006d84:	3fb10d66 	.word	0x3fb10d66
 8006d88:	c54c206e 	.word	0xc54c206e
 8006d8c:	3fb745cd 	.word	0x3fb745cd
 8006d90:	920083ff 	.word	0x920083ff
 8006d94:	3fc24924 	.word	0x3fc24924
 8006d98:	5555550d 	.word	0x5555550d
 8006d9c:	3fd55555 	.word	0x3fd55555
 8006da0:	2c6a6c2f 	.word	0x2c6a6c2f
 8006da4:	bfa2b444 	.word	0xbfa2b444
 8006da8:	52defd9a 	.word	0x52defd9a
 8006dac:	3fadde2d 	.word	0x3fadde2d
 8006db0:	af749a6d 	.word	0xaf749a6d
 8006db4:	3fb3b0f2 	.word	0x3fb3b0f2
 8006db8:	fe231671 	.word	0xfe231671
 8006dbc:	3fbc71c6 	.word	0x3fbc71c6
 8006dc0:	9998ebc4 	.word	0x9998ebc4
 8006dc4:	3fc99999 	.word	0x3fc99999
 8006dc8:	54442d18 	.word	0x54442d18
 8006dcc:	bff921fb 	.word	0xbff921fb
 8006dd0:	440fffff 	.word	0x440fffff
 8006dd4:	7ff00000 	.word	0x7ff00000
 8006dd8:	3fdbffff 	.word	0x3fdbffff
 8006ddc:	3ff00000 	.word	0x3ff00000
 8006de0:	3ff2ffff 	.word	0x3ff2ffff
 8006de4:	40038000 	.word	0x40038000
 8006de8:	3ff80000 	.word	0x3ff80000
 8006dec:	bff00000 	.word	0xbff00000
 8006df0:	08007058 	.word	0x08007058
 8006df4:	08007078 	.word	0x08007078

08006df8 <fabs>:
 8006df8:	ec51 0b10 	vmov	r0, r1, d0
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006e02:	ec43 2b10 	vmov	d0, r2, r3
 8006e06:	4770      	bx	lr

08006e08 <__ieee754_expf>:
 8006e08:	ee10 2a10 	vmov	r2, s0
 8006e0c:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8006e10:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8006e14:	d902      	bls.n	8006e1c <__ieee754_expf+0x14>
 8006e16:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006e1a:	4770      	bx	lr
 8006e1c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8006e20:	d106      	bne.n	8006e30 <__ieee754_expf+0x28>
 8006e22:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8006f5c <__ieee754_expf+0x154>
 8006e26:	2900      	cmp	r1, #0
 8006e28:	bf18      	it	ne
 8006e2a:	eeb0 0a67 	vmovne.f32	s0, s15
 8006e2e:	4770      	bx	lr
 8006e30:	484b      	ldr	r0, [pc, #300]	@ (8006f60 <__ieee754_expf+0x158>)
 8006e32:	4282      	cmp	r2, r0
 8006e34:	dd02      	ble.n	8006e3c <__ieee754_expf+0x34>
 8006e36:	2000      	movs	r0, #0
 8006e38:	f000 b8d4 	b.w	8006fe4 <__math_oflowf>
 8006e3c:	2a00      	cmp	r2, #0
 8006e3e:	da05      	bge.n	8006e4c <__ieee754_expf+0x44>
 8006e40:	4a48      	ldr	r2, [pc, #288]	@ (8006f64 <__ieee754_expf+0x15c>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d902      	bls.n	8006e4c <__ieee754_expf+0x44>
 8006e46:	2000      	movs	r0, #0
 8006e48:	f000 b8c6 	b.w	8006fd8 <__math_uflowf>
 8006e4c:	4a46      	ldr	r2, [pc, #280]	@ (8006f68 <__ieee754_expf+0x160>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8006e54:	d952      	bls.n	8006efc <__ieee754_expf+0xf4>
 8006e56:	4a45      	ldr	r2, [pc, #276]	@ (8006f6c <__ieee754_expf+0x164>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8006e5e:	d834      	bhi.n	8006eca <__ieee754_expf+0xc2>
 8006e60:	4b43      	ldr	r3, [pc, #268]	@ (8006f70 <__ieee754_expf+0x168>)
 8006e62:	4413      	add	r3, r2
 8006e64:	ed93 7a00 	vldr	s14, [r3]
 8006e68:	4b42      	ldr	r3, [pc, #264]	@ (8006f74 <__ieee754_expf+0x16c>)
 8006e6a:	4413      	add	r3, r2
 8006e6c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8006e70:	f1c1 0201 	rsb	r2, r1, #1
 8006e74:	edd3 7a00 	vldr	s15, [r3]
 8006e78:	1a52      	subs	r2, r2, r1
 8006e7a:	ee37 0a67 	vsub.f32	s0, s14, s15
 8006e7e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8006e82:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 8006f78 <__ieee754_expf+0x170>
 8006e86:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006f7c <__ieee754_expf+0x174>
 8006e8a:	eee6 6a05 	vfma.f32	s13, s12, s10
 8006e8e:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8006f80 <__ieee754_expf+0x178>
 8006e92:	eea6 5a86 	vfma.f32	s10, s13, s12
 8006e96:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006f84 <__ieee754_expf+0x17c>
 8006e9a:	eee5 6a06 	vfma.f32	s13, s10, s12
 8006e9e:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8006f88 <__ieee754_expf+0x180>
 8006ea2:	eea6 5a86 	vfma.f32	s10, s13, s12
 8006ea6:	eef0 6a40 	vmov.f32	s13, s0
 8006eaa:	eee5 6a46 	vfms.f32	s13, s10, s12
 8006eae:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8006eb2:	ee20 5a26 	vmul.f32	s10, s0, s13
 8006eb6:	bb92      	cbnz	r2, 8006f1e <__ieee754_expf+0x116>
 8006eb8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8006ebc:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8006ec0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006ec4:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8006ec8:	4770      	bx	lr
 8006eca:	4b30      	ldr	r3, [pc, #192]	@ (8006f8c <__ieee754_expf+0x184>)
 8006ecc:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8006f90 <__ieee754_expf+0x188>
 8006ed0:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8006f94 <__ieee754_expf+0x18c>
 8006ed4:	4413      	add	r3, r2
 8006ed6:	edd3 7a00 	vldr	s15, [r3]
 8006eda:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006ede:	eeb0 7a40 	vmov.f32	s14, s0
 8006ee2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ee6:	ee17 2a90 	vmov	r2, s15
 8006eea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006eee:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8006ef2:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8006f98 <__ieee754_expf+0x190>
 8006ef6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006efa:	e7be      	b.n	8006e7a <__ieee754_expf+0x72>
 8006efc:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8006f00:	d20b      	bcs.n	8006f1a <__ieee754_expf+0x112>
 8006f02:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006f9c <__ieee754_expf+0x194>
 8006f06:	ee70 6a26 	vadd.f32	s13, s0, s13
 8006f0a:	eef4 6ae5 	vcmpe.f32	s13, s11
 8006f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f12:	dd02      	ble.n	8006f1a <__ieee754_expf+0x112>
 8006f14:	ee30 0a25 	vadd.f32	s0, s0, s11
 8006f18:	4770      	bx	lr
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	e7af      	b.n	8006e7e <__ieee754_expf+0x76>
 8006f1e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8006f22:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 8006f26:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8006f2a:	bfb8      	it	lt
 8006f2c:	3264      	addlt	r2, #100	@ 0x64
 8006f2e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006f32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006f36:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8006f3a:	ee17 3a90 	vmov	r3, s15
 8006f3e:	bfab      	itete	ge
 8006f40:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8006f44:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8006f48:	ee00 3a10 	vmovge	s0, r3
 8006f4c:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 8006fa0 <__ieee754_expf+0x198>
 8006f50:	bfbc      	itt	lt
 8006f52:	ee00 3a10 	vmovlt	s0, r3
 8006f56:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8006f5a:	4770      	bx	lr
 8006f5c:	00000000 	.word	0x00000000
 8006f60:	42b17217 	.word	0x42b17217
 8006f64:	42cff1b5 	.word	0x42cff1b5
 8006f68:	3eb17218 	.word	0x3eb17218
 8006f6c:	3f851591 	.word	0x3f851591
 8006f70:	080070a0 	.word	0x080070a0
 8006f74:	08007098 	.word	0x08007098
 8006f78:	3331bb4c 	.word	0x3331bb4c
 8006f7c:	b5ddea0e 	.word	0xb5ddea0e
 8006f80:	388ab355 	.word	0x388ab355
 8006f84:	bb360b61 	.word	0xbb360b61
 8006f88:	3e2aaaab 	.word	0x3e2aaaab
 8006f8c:	080070a8 	.word	0x080070a8
 8006f90:	3fb8aa3b 	.word	0x3fb8aa3b
 8006f94:	3f317180 	.word	0x3f317180
 8006f98:	3717f7d1 	.word	0x3717f7d1
 8006f9c:	7149f2ca 	.word	0x7149f2ca
 8006fa0:	0d800000 	.word	0x0d800000

08006fa4 <with_errnof>:
 8006fa4:	b510      	push	{r4, lr}
 8006fa6:	ed2d 8b02 	vpush	{d8}
 8006faa:	eeb0 8a40 	vmov.f32	s16, s0
 8006fae:	4604      	mov	r4, r0
 8006fb0:	f7ff fbfe 	bl	80067b0 <__errno>
 8006fb4:	eeb0 0a48 	vmov.f32	s0, s16
 8006fb8:	ecbd 8b02 	vpop	{d8}
 8006fbc:	6004      	str	r4, [r0, #0]
 8006fbe:	bd10      	pop	{r4, pc}

08006fc0 <xflowf>:
 8006fc0:	b130      	cbz	r0, 8006fd0 <xflowf+0x10>
 8006fc2:	eef1 7a40 	vneg.f32	s15, s0
 8006fc6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006fca:	2022      	movs	r0, #34	@ 0x22
 8006fcc:	f7ff bfea 	b.w	8006fa4 <with_errnof>
 8006fd0:	eef0 7a40 	vmov.f32	s15, s0
 8006fd4:	e7f7      	b.n	8006fc6 <xflowf+0x6>
	...

08006fd8 <__math_uflowf>:
 8006fd8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006fe0 <__math_uflowf+0x8>
 8006fdc:	f7ff bff0 	b.w	8006fc0 <xflowf>
 8006fe0:	10000000 	.word	0x10000000

08006fe4 <__math_oflowf>:
 8006fe4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006fec <__math_oflowf+0x8>
 8006fe8:	f7ff bfea 	b.w	8006fc0 <xflowf>
 8006fec:	70000000 	.word	0x70000000

08006ff0 <_init>:
 8006ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ff2:	bf00      	nop
 8006ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ff6:	bc08      	pop	{r3}
 8006ff8:	469e      	mov	lr, r3
 8006ffa:	4770      	bx	lr

08006ffc <_fini>:
 8006ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ffe:	bf00      	nop
 8007000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007002:	bc08      	pop	{r3}
 8007004:	469e      	mov	lr, r3
 8007006:	4770      	bx	lr
